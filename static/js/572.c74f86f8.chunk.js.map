{"version":3,"file":"static/js/572.c74f86f8.chunk.js","mappings":"8OAaA,MCXA,EDWaA,IAAA,IAAC,SAAEC,EAAQ,MAAEC,EAAK,UAAEC,EAAY,GAAE,WAAEC,EAAa,eAAeJ,EAAA,OAC3EK,EAAAA,EAAAA,MAAA,OAAKF,UAAW,iDAAiDA,IAAYF,SAAA,CAC1EC,IACCI,EAAAA,EAAAA,KAAA,OAAKH,UAAW,GAAGC,cAAuBH,UACxCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mCAAkCF,SAAEC,OAGtDI,EAAAA,EAAAA,KAAA,OAAKH,UAAU,MAAKF,SAAEA,MAClB,EEfKM,EAAkBC,GACtB,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAOP,GCVZ,ECcyBR,IAAkD,IAAjD,YAAEgB,EAAW,cAAEC,EAAa,YAAEC,GAAalB,EAEnE,MAAMmB,EAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAG9C,OACEb,EAAAA,EAAAA,KAACc,EAAI,CAAClB,MAAM,4BAA2BD,UACrCI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EAEpDK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiBF,UAC9BI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,sCAAqCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,SAAAL,UACEI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYF,SAAA,EACxBK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,cAG/FK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kFAAiFF,SAAC,iBAKpGI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,oCAAmCF,SAAA,CACjDe,EAAYK,QAAOC,GAA4B,iBAAjBA,EAAQC,OAAyBC,KAAI,CAACF,EAASG,KAC5EpB,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBF,SAAA,EAC1CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CqB,EAAQC,QAEXjB,EAAAA,EAAAA,KAAA,MAAIH,UAAU,6CAA4CF,SACvDM,EAAee,EAAQd,WALnBiB,MASXpB,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBF,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAAC,kBAGhDK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,6CAA4CF,SACvDM,EAAeW,SAGpBb,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYF,SAAA,EACxBK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,8CAA6CF,SAAC,WAG5DK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,yDAAwDF,SACnEM,EAAeU,EAAgBC,iBAQ1CZ,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAcF,UAC3BK,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM3B,UAC7CI,EAAAA,EAAAA,MAACwB,EAAAA,EAAQ,CAAA5B,SAAA,EACPK,EAAAA,EAAAA,KAACwB,EAAAA,EAAG,CACFC,KAAMf,EACNgB,QAAQ,QACRC,QAAQ,OACRC,GAAG,MACHC,GAAG,MACHC,YAAY,MACZC,KAAK,UACLC,WAAW,EACXC,MAAOC,IAAA,IAAC,KAAEjB,EAAI,QAAEkB,GAASD,EAAA,MACvB,GAAGjB,OAAoB,IAAVkB,GAAeC,QAAQ,KAAK,EAC1CzC,SAEAe,EAAYQ,KAAI,CAACmB,EAAOlB,KACvBnB,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAEHP,KAAMlB,EAAOM,EAAQN,EAAO0B,SADvB,QAAQpB,UAKnBnB,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,CAACC,UAAYvC,GAAUD,EAAeC,gBAKjD,E,mFCxEX,MA0IA,EA1IsBR,IAA+D,IAA9D,UAAEgD,EAAS,iBAAEC,EAAgB,wBAAEC,GAAyBlD,EAC7E,OACEK,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,mBAAmBE,WAAW,cAAaH,SAAA,EACrDK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAMF,UACnBK,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM3B,UAC7CI,EAAAA,EAAAA,MAAC8C,EAAAA,EAAa,CACZpB,KAAMiB,EACNI,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRvD,SAAA,EAEFK,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACC,gBAAgB,SAC/BpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CACJ3B,QAAQ,OACR4B,OAAQ,GACRC,WAAW,MACXjC,OAAQ,GACRkC,KAAM,CAAEC,SAAU,OAEpBzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJC,QAAQ,OACRC,cAAgB1D,GAAUD,EAAeC,GACzCmB,MAAO,GACPY,MAAO,CACL/B,MAAO,UACPoD,OAAQ,GACRO,SAAU,aACVC,OAAQ,OAGZ9D,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJC,QAAQ,QACRI,YAAY,QACZH,cAAgB1D,GAAUD,EAAeC,GACzCmB,MAAO,GACPY,MAAO,CACL/B,MAAO,iBACPoD,MAAO,GACPO,SAAU,cACVC,OAAQ,OAGZ9D,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,CAACC,UAAYvC,GAAUD,EAAeC,MAC9CF,EAAAA,EAAAA,KAACgE,EAAAA,EAAM,KACPhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHN,QAAQ,OACRO,KAAK,WACLxC,QAAQ,cACRT,KAAK,eACLkD,OAAO,UACPpC,KAAK,UACLqC,YAAa,GACbC,UAAW,CAAEC,EAAG,MAElBtE,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHN,QAAQ,OACRO,KAAK,WACLxC,QAAQ,aACRT,KAAK,uBACLkD,OAAO,UACPpC,KAAK,UACLqC,YAAa,GACbC,UAAW,CAAEC,EAAG,MAElBtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAI,CACHZ,QAAQ,QACRO,KAAK,WACLxC,QAAQ,gBACRT,KAAK,iBACLkD,OAAO,UACPK,YAAa,EACbC,IAAK,CAAEH,EAAG,GACVD,UAAW,CAAEC,EAAG,KAEjB3B,IACC3C,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,CACZf,QAAQ,QACRgB,EAAGhC,EAAiBiC,KACpBT,OAAO,QACPf,gBAAgB,MAChBnB,MAAO,CACL/B,MAAO,gBACP2D,SAAU,MACV9B,KAAM,WAIXa,IACC5C,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,CACZf,QAAQ,OACRgB,EAAG/B,EAAwBgC,KAC3BT,OAAO,OACPf,gBAAgB,MAChBnB,MAAO,CACL/B,MAAO,gBACP2D,SAAU,MACV9B,KAAM,kBAOlBhC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6CAA4CF,SAAA,EACzDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,EACxCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,oBAG/CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,UAASF,SACnBiD,EACG,yCAAyCA,EAAwBgC,OACjE,+DAGR7E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8BAA6BF,SAAA,EAC1CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mCAAkCF,SAAC,oBAGjDK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,UAASF,SACnBgD,EACG,0BAA0BA,EAAiBiC,OAC3C,+DAIL,E,aCnIX,MAmGA,EAnG2BlF,IAA6C,IAA5C,UAAEgD,EAAS,wBAAEE,GAAyBlD,EAChE,OACEK,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,4BAA4BE,WAAW,eAAcH,SAAA,EAC/DK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAMF,UACnBK,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM3B,UAC7CI,EAAAA,EAAAA,MAAC8E,EAAAA,EAAS,CACRpD,KAAMiB,EACNI,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRvD,SAAA,EAEFK,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACC,gBAAgB,SAC/BpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CACJ3B,QAAQ,OACR4B,OAAQ,GACRC,WAAW,MACXjC,OAAQ,GACRkC,KAAM,CAAEC,SAAU,OAEpBzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJE,cAAgB1D,GAAUD,EAAeC,GACzCmB,MAAO,MAETrB,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,CAACC,UAAYvC,GAAUD,EAAeC,MAC9CF,EAAAA,EAAAA,KAACgE,EAAAA,EAAM,KACPhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHC,KAAK,WACLxC,QAAQ,cACRT,KAAK,eACLkD,OAAO,UACPpC,KAAK,UACLqC,YAAa,GACbC,UAAW,CAAEC,EAAG,MAElBtE,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHC,KAAK,WACLxC,QAAQ,aACRT,KAAK,cACLkD,OAAO,UACPpC,KAAK,UACLqC,YAAa,GACbC,UAAW,CAAEC,EAAG,MAElBtE,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHC,KAAK,WACLxC,QAAQ,gBACRT,KAAK,kBACLkD,OAAO,UACPpC,KAAK,UACLqC,YAAa,GACbC,UAAW,CAAEC,EAAG,KAEjB1B,IACC5C,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,CACZC,EAAG/B,EAAwBgC,KAC3BT,OAAO,QACPf,gBAAgB,MAChBnB,MAAO,CACL/B,MAAO,qBACP2D,SAAU,MACV9B,KAAM,YAIZ/B,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,CACZI,EAAG,IACHX,OAAO,OACPf,gBAAgB,MAChBnB,MAAO,CACL/B,MAAO,QACP2D,SAAU,QACV9B,KAAM,kBAMhBhC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCF,SAAA,EAC9CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAAC,uBAGhDK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,UAASF,SACnBiD,EACG,yCAAyCA,EAAwBgC,OACjE,2DAGH,E,wBC5FX,MAgFA,EAhFsBlF,IAAoB,IAAnB,UAAEgD,GAAWhD,EAElC,MAAMqF,EAAcrC,EAAUsC,MAAM,EAAG,GAEvC,OACEjF,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,oBAAoBE,WAAW,cAAaH,SAAA,EACtDK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAMF,UACnBK,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM3B,UAC7CI,EAAAA,EAAAA,MAACkF,EAAAA,EAAQ,CACPxD,KAAMsD,EACNjC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRvD,SAAA,EAEFK,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACC,gBAAgB,SAC/BpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CACJ3B,QAAQ,OACR4B,OAAQ,GACRC,WAAW,MACXjC,OAAQ,GACRkC,KAAM,CAAEC,SAAU,OAEpBzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJE,cAAgB1D,GAAUD,EAAeC,GACzCmB,MAAO,MAETrB,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,CAACC,UAAYvC,GAAUD,EAAeC,MAC9CF,EAAAA,EAAAA,KAACgE,EAAAA,EAAM,KACPhE,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,cACRT,KAAK,gBACLc,KAAK,aAEP/B,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,WACRT,KAAK,kBACLc,KAAK,aAEP/B,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,cACRT,KAAK,eACLc,KAAK,aAEP/B,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,iBACRT,KAAK,eACLc,KAAK,aAEP/B,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,uBACRT,KAAK,oBACLc,KAAK,aAEP/B,EAAAA,EAAAA,KAACkF,EAAAA,EAAG,CACFxD,QAAQ,cACRT,KAAK,UACLc,KAAK,oBAKbhC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,yBAG/CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,UAASF,SAAC,iHAIpB,ECrFEwF,EAAgB,CAC3BC,YAAa,cACbC,cAAe,gBACfC,eAAgB,iBAChBC,sBAAuB,yBAQnBC,EAAgB,CACpB,eAAgB,CAAC,GAAM,KACvB,WAAY,CAAC,IAAM,KACnB,WAAY,CAAC,KAAO,MACpB,WAAY,CAAC,KAAO,MACpB,SAAY,CAAC,IAAM,MAMfC,EAAsB,CAC1B,eAAgB,CAAC,IAAM,KACvB,WAAY,CAAC,IAAM,KACnB,WAAY,CAAC,IAAM,MACnB,WAAY,CAAC,IAAM,MACnB,SAAY,CAAC,IAAM,OAMfC,EAAuB,CAC3B,eAAgB,CAAC,IAAM,KACvB,WAAY,CAAC,IAAM,KACnB,WAAY,CAAC,KAAO,MACpB,WAAY,CAAC,IAAM,MACnB,SAAY,CAAC,IAAM,OAMfC,EAA8B,CAClC,eAAgB,CAAC,GAAM,KACvB,WAAY,CAAC,IAAM,KACnB,WAAY,CAAC,KAAO,MACpB,WAAY,CAAC,KAAO,MACpB,SAAY,CAAC,IAAM,MAyDRC,EAA4B,SACvCC,GAKI,IAJJC,EAAYC,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAGZ,EAAcC,YAC7Ba,EAAGF,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACNG,EAAcH,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACjBI,EAAwBJ,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE3B,IAEE,MAAOK,EAAcC,GApCEC,EAACR,EAAcG,KACxC,MAAMM,EAhBsBN,IACxBA,GAAO,GAAW,eAClBA,GAAO,GAAW,WAClBA,GAAO,GAAW,WAClBA,GAAO,GAAW,WACf,WAWYO,CAAcP,GAEjC,OAAQH,GACN,KAAKX,EAAcC,YACjB,OAAOI,EAAce,GACvB,KAAKpB,EAAcE,cACjB,OAAOI,EAAoBc,GAC7B,KAAKpB,EAAcG,eACjB,OAAOI,EAAqBa,GAC9B,KAAKpB,EAAcI,sBACjB,OAAOI,EAA4BY,GACrC,QACE,MAAM,IAAIE,MAAM,0BAA0BX,KAC9C,EAsBuCQ,CAAYR,EAAcG,GAGzDS,EAAeC,KAAKC,IAAIf,EA/Df,KAkETgB,EAAuBF,KAAKG,MAAMJ,EAAeN,EAAe,KAAO,IACvEW,EAAuBJ,KAAKG,MAAMJ,EAAeL,EAAe,KAAO,IAG7E,IAAIW,EAAiC,EACjCC,EAAiC,EAErC,GAAIf,EAAiB,EAAG,CAEtB,MAAMgB,EAAef,GAA4C,GAAfO,EAC5CS,EAAqBR,KAAKS,IAAI,EA3EvB,MA2EuCF,GAC9CG,EAAuBV,KAAKC,IAAIV,EAAgBiB,GAGtDH,EAAiCL,KAAKG,MAAMO,EAAuBjB,EAAe,KAAO,IACzFa,EAAiCN,KAAKG,MAAMO,EAAuBhB,EAAe,KAAO,GAC3F,CAGA,MAAMiB,EAA4BT,EAAuBG,EACnDO,EAA4BR,EAAuBE,EAMzD,MAAO,CACLJ,qBAAsBS,EACtBP,qBAAsBQ,EACtBC,kBAR2BF,EAA4BC,EASvDE,YANkB5B,EAASK,EAAiBoB,EAQ5CI,MAAO,CACLtB,eACAC,gBAGN,CAAE,MAAOsB,GAEP,OADAC,QAAQD,MAAM,uCAAwCA,GAC/C,CACLd,qBAAsB,EACtBE,qBAAsB,EACtBS,kBAAmB,EACnBC,YAAa5B,EAASK,EACtBwB,MAAO,CACLtB,aAAc,EACdC,aAAc,GAGpB,CACF,EC0BA,EAhMyB,WAAuB,IAAtBwB,EAAW9B,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEvC,MAAM,OACJF,EAAS,EAAC,IACVI,EAAM,GAAE,aACRH,EAAeX,EAAcC,YAAW,YACxC0C,EAAc,EAAC,kBACfC,EAAoB,GAClBF,GAGGG,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CACzCrC,SACAI,MACAH,eACAgC,cACAC,sBAIII,GAAaC,EAAAA,EAAAA,UAAQ,KACzB,MAAM,OAAEvC,EAAM,IAAEI,EAAG,aAAEH,EAAY,YAAEgC,EAAW,kBAAEC,GAAsBC,EAGhEK,EAAazC,EACjBC,EACAC,EACAG,GAIF,IAAIqC,EAAW,CAAEzB,qBAAsB,EAAGE,qBAAsB,EAAGS,kBAAmB,GAEtF,GAAIO,EAAoB,EAAG,CACzB,MAAMb,EAAwC,GAAzBP,KAAKC,IAAIf,EAAQ,KACtCyC,EAAW1C,EACT,EACAE,EACAG,EACA8B,EACAb,EAEJ,MAAO,GAAIY,EAAc,EAAG,CAE1B,MAAMS,EAAc1C,EAASiC,EACvBZ,EAAwC,GAAzBP,KAAKC,IAAIf,EAAQ,KAEtCyC,EAAW1C,EACT,EACAE,EACAG,EACAsC,EACArB,EAEJ,CAGA,MAAMsB,EDwHoC,SAC5CC,GAII,IAHJ3C,EAAYC,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAGZ,EAAcC,YAC7Ba,EAAGF,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACN+B,EAAW/B,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAGd,MAAM2C,EAAsB9C,EAC1B6C,EACA3C,EACAG,GAIF,IAAI0C,EAAoB,CAAE9B,qBAAsB,EAAGE,qBAAsB,EAAGS,kBAAmB,GAE/F,GAAIM,EAAc,EAAG,CACnB,MAAMc,EAAcH,EAAgBX,EAC9BZ,EAAqD,GAAtCP,KAAKC,IAAI6B,EAjJf,KAmJfE,EAAoB/C,EAClB,EACAE,EACAG,EACA2C,EACA1B,EAEJ,CAGA,MAAM2B,EAAyE,GAA3CH,EAAoB7B,qBACtD8B,EAAkB9B,qBAEdiC,EAAyE,GAA3CJ,EAAoB3B,qBACtD4B,EAAkB5B,qBAIpB,MAAO,CACL8B,6BACAC,6BACAC,wBAL8BF,EAA6BC,EAM3DE,eAAgBN,EAChBO,aAAcN,EAElB,CCrKsBO,CAChBrD,EACAC,EACAG,EACA6B,GAGF,MAAO,CACLqB,QAASd,EACTe,MAAOd,EACPe,OAAQb,EACRf,YAAaY,EAAWZ,YACxB6B,yBAA0BjB,EAAWb,kBACrCX,qBAAsBwB,EAAWxB,qBACjCE,qBAAsBsB,EAAWtB,qBACjCW,MAAOW,EAAWX,MACnB,GACA,CAACM,IAIEuB,GAAiBC,EAAAA,EAAAA,cAAY,CAACC,EAAKvJ,KACpB,kBAARuJ,GAAoBA,KAAOzB,EACpCC,GAAayB,IAAI,IACZA,EACH,CAACD,GAAMvJ,MAEe,kBAARuJ,GAEhBxB,GAAayB,IAAI,IACZA,KACAD,KAEP,GACC,CAACzB,IAGE2B,GAAeH,EAAAA,EAAAA,cAAaI,IAChCL,EAAe,SAAUM,OAAOD,GAAW,GAC1C,CAACL,IAGEO,GAAqBN,EAAAA,EAAAA,cAAaO,IAClCC,OAAOC,OAAO9E,GAAe+E,SAASH,GACxCR,EAAe,eAAgBQ,GAE/BnC,QAAQD,MAAM,0BAA0BoC,IAC1C,GACC,CAACR,IAGEY,GAAkBX,EAAAA,EAAAA,cAAY,KAClCvB,EAAa,CACXpC,OAAQgC,EAAYhC,QAAU,EAC9BI,IAAK4B,EAAY5B,KAAO,GACxBH,aAAc+B,EAAY/B,cAAgBX,EAAcC,YACxD0C,YAAaD,EAAYC,aAAe,EACxCC,kBAAmBF,EAAYE,mBAAqB,GACpD,GACD,CAACF,IA6CJ,OAzCAuC,EAAAA,EAAAA,YAAU,KACR,GAAIvC,GAAsC,kBAAhBA,EAA0B,CAClD,MAAMwC,EAAU,CAAC,EACjB,IAAIC,GAAa,EAGb,WAAYzC,GAAeA,EAAYhC,SAAWmC,EAAUnC,SAC9DwE,EAAQxE,OAASgC,EAAYhC,OAC7ByE,GAAa,GAGX,QAASzC,GAAeA,EAAY5B,MAAQ+B,EAAU/B,MACxDoE,EAAQpE,IAAM4B,EAAY5B,IAC1BqE,GAAa,GAGX,iBAAkBzC,GAAeA,EAAY/B,eAAiBkC,EAAUlC,eAC1EuE,EAAQvE,aAAe+B,EAAY/B,aACnCwE,GAAa,GAGX,gBAAiBzC,GAAeA,EAAYC,cAAgBE,EAAUF,cACxEuC,EAAQvC,YAAcD,EAAYC,YAClCwC,GAAa,GAGX,sBAAuBzC,GAAeA,EAAYE,oBAAsBC,EAAUD,oBACpFsC,EAAQtC,kBAAoBF,EAAYE,kBACxCuC,GAAa,GAIXA,GACFrC,GAAayB,IAAI,IACZA,KACAW,KAGT,IACC,CAACxC,IAEG,CAELG,YACAG,aAGAtB,qBAAsBsB,EAAWtB,qBACjCE,qBAAsBoB,EAAWpB,qBACjCS,kBAAmBW,EAAWmB,yBAC9B7B,YAAaU,EAAWV,YAGxBY,WAAYF,EAAWgB,QACvBb,SAAUH,EAAWiB,MACrBZ,UAAWL,EAAWkB,OAGtBjD,aAAc+B,EAAWT,MAAMtB,aAC/BC,aAAc8B,EAAWT,MAAMrB,aAG/BkD,iBACAI,eACAG,qBACAK,kBAGAhF,cACF,EACF,EC2HA,EAhUsBzF,IAAqC,IAApC,YAAEmI,EAAc,CAAC,EAAC,SAAE0C,GAAU7K,EAEnD,MAAM,UACJsI,EAAS,WACTG,EAAU,WACVE,EAAU,SACVC,EAAQ,UACRE,EAAS,aACTpC,EAAY,aACZC,EAAY,eACZkD,EAAc,aACdI,EAAY,mBACZG,EAAkB,cAClB3E,GACEqF,EAAiB3C,IAGd4C,EAAcC,IAAmBxC,EAAAA,EAAAA,WAAS,GA2D3CjI,EAAkBC,GACf,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IACtBE,OAAOP,GAINyK,EAAoBzK,GACjB,IAAY,IAARA,GAAakC,QAAQ,MAGlC,OACErC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,2CAA0CF,SAAC,oBAKzDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6CAA4CF,SAAA,EACzDI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,SAAOH,UAAU,+CAA8CF,SAAC,oBAGhEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BF,SAAA,EAC5CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uEAAsEF,UACnFK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,2BAA0BF,SAAC,UAE7CK,EAAAA,EAAAA,KAAA,SACEkE,KAAK,SACLhE,MAAO8H,EAAUnC,OACjB0E,SAxFgBK,IAC1B,MAAM1K,EAAQ2K,WAAWD,EAAEE,OAAO5K,QAAU,EAC5CyJ,EAAazJ,GAGTqK,GAAgC,oBAAbA,GACrBA,EAAS,IACJvC,EACHnC,OAAQ3F,GAEZ,EA+EUL,UAAU,wIACVkL,YAAY,OACZnE,IAAI,IACJoE,KAAK,cAKXjL,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,SAAOH,UAAU,+CAA8CF,SAAC,SAGhEK,EAAAA,EAAAA,KAAA,SACEkE,KAAK,SACLhE,MAAO8H,EAAU/B,IACjBsE,SA1FeK,IACvB,MAAM1K,EAAQ+K,SAASL,EAAEE,OAAO5K,QAAU,EAC1CqJ,EAAe,MAAOrJ,GAGlBqK,GAAgC,oBAAbA,GACrBA,EAAS,IACJvC,EACH/B,IAAK/F,GAET,EAiFQL,UAAU,kIACVkL,YAAY,KACZnE,IAAI,IACJQ,IAAI,YAIRrH,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,SAAOH,UAAU,+CAA8CF,SAAC,uBAGhEI,EAAAA,EAAAA,MAAA,UACEG,MAAO8H,EAAUlC,aACjByE,SA1FwBK,IAChC,MAAM1K,EAAQ0K,EAAEE,OAAO5K,MACvB4J,EAAmB5J,GAGfqK,GAAgC,oBAAbA,GACrBA,EAAS,IACJvC,EACHlC,aAAc5F,GAElB,EAiFQL,UAAU,kIAAiIF,SAAA,EAE3IK,EAAAA,EAAAA,KAAA,UAAQE,MAAOiF,EAAcC,YAAYzF,SAAC,yBAC1CK,EAAAA,EAAAA,KAAA,UAAQE,MAAOiF,EAAcE,cAAc1F,SAAC,mBAC5CK,EAAAA,EAAAA,KAAA,UAAQE,MAAOiF,EAAcG,eAAe3F,SAAC,mBAC7CK,EAAAA,EAAAA,KAAA,UAAQE,MAAOiF,EAAcI,sBAAsB5F,SAAC,0BAIxDI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,SAAOH,UAAU,+CAA8CF,SAAC,2BAGhEK,EAAAA,EAAAA,KAAA,SACEkE,KAAK,SACLhE,MAAO8H,EAAUF,YACjByC,SA7FuBK,IAC/B,MAAM1K,EAAQ2K,WAAWD,EAAEE,OAAO5K,QAAU,EAC5CqJ,EAAe,cAAerJ,GAG1BqK,GAAgC,oBAAbA,GACrBA,EAAS,IACJvC,EACHF,YAAa5H,GAEjB,EAoFQL,UAAU,kIACVkL,YAAY,IACZnE,IAAI,IACJoE,KAAK,eAMXjL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,+BAI/CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCF,SAAA,EAC/CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,wBAC/BI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,CACvCM,EAAeoI,EAAWxB,sBAAsB,KAAG8D,EAAiBvE,GAAc,QAGrFpG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,4BAC/BI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,CACvCM,EAAeoI,EAAWtB,sBAAsB,KAAG4D,EAAiBtE,GAAc,QAGrFrG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,6BAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeoI,EAAWb,sBAG7BxH,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,oBAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeoI,EAAWZ,sBAMjC1H,EAAAA,EAAAA,MAAA,UACEmE,KAAK,SACLgH,QAASA,IAAMR,GAAiBD,GAChC5K,UAAU,iFAAgFF,SAAA,CAEzF8K,EAAe,OAAS,OAAO,qBAChCzK,EAAAA,EAAAA,KAAA,OACEH,UAAW,sCAAqC4K,EAAe,uBAAyB,IACxF1I,KAAK,OACLoJ,QAAQ,YACRhH,OAAO,eAAcxE,UAErBK,EAAAA,EAAAA,KAAA,QAAMoL,cAAc,QAAQC,eAAe,QAAQ7G,YAAa,EAAG8G,EAAE,wBAKxEb,IACC1K,EAAAA,EAAAA,MAAAwL,EAAAA,SAAA,CAAA5L,SAAA,EAEEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,sBAI/CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCF,SAAA,EAC/CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,+BAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeuI,EAAUK,+BAG5B7I,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,mCAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeuI,EAAUM,+BAG5B9I,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,uBAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeuI,EAAUO,iCAM/Bf,EAAUF,YAAc,IACvB/H,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,6BAI/CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCF,SAAA,EAC/CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,mBAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAe+H,EAAUnC,OAASmC,EAAUF,gBAG/C9H,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,wBAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeqI,EAASzB,yBAG3B7G,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,4BAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeqI,EAASvB,yBAG3B/G,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,sBAC/BK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SACvCM,EAAeqI,EAASd,4BAOjCzH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,EACxCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,gCAI/CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,6BAA4BF,SAAC,gFAI1CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBF,SAAA,EACtCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,SAAC,sBAC3CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeF,SAAC,yDAKjCI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2BAA0BF,SAAA,EACvCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,6BAA4BF,SAAC,qBAG5CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,iBAAgBF,SAAC,+EAKlCI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,EACxCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,8BAA6BF,SAAC,sBAG7CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiBF,SAAC,6EAU3CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,6BAA4BF,UACzCI,EAAAA,EAAAA,MAAA,KAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,UAAAL,SAAQ,gBAAoB,0KAK5B,ECjKV,EA5JyB6L,KAEvB,MAAOC,EAAOC,IAAYxD,EAAAA,EAAAA,WAAS,IACdyD,aAAaC,QAAQ,YACnB,WAGhBC,EAAaC,IAAkB5D,EAAAA,EAAAA,WAAS,KAC7C,MAAM6D,EAAcJ,aAAaC,QAAQ,eACzC,OAAOG,EACHC,KAAKC,MAAMF,GACX,CACEG,QAAS,UACTC,UAAW,UACXC,SAAU,UACVC,WAAY,UACZC,OAAQ,UACRC,QAAS,UACTC,QAAS,UACV,KAGAC,EAAaC,IAAkBxE,EAAAA,EAAAA,WAAS,IAExB,SADHyD,aAAaC,QAAQ,kBAIlCe,EAAgBC,IAAqB1E,EAAAA,EAAAA,WAAS,IAC/ByD,aAAaC,QAAQ,mBACnB,SAGjBiB,EAAYC,IAAiB5E,EAAAA,EAAAA,WAAS,IACvByD,aAAaC,QAAQ,eACnB,aAIlBmB,GAAcvD,EAAAA,EAAAA,cAAY,KAC9BkC,GAASsB,IACP,MAAMC,EAAyB,UAAdD,EAAwB,OAAS,QAElD,OADArB,aAAauB,QAAQ,UAAWD,GACzBA,CAAQ,GACf,GACD,IAGGE,GAAmB3D,EAAAA,EAAAA,cAAY,CAAC4D,EAAUC,KAC9CvB,GAAewB,IACb,MAAMC,EAAgB,IAAKD,EAAY,CAACF,GAAWC,GAEnD,OADA1B,aAAauB,QAAQ,cAAelB,KAAKwB,UAAUD,IAC5CA,CAAa,GACpB,GACD,IAGGE,GAAmBjE,EAAAA,EAAAA,cAAY,KACnC,MAAMkE,EAAgB,CACpBxB,QAAS,UACTC,UAAW,UACXC,SAAU,UACVC,WAAY,UACZC,OAAQ,UACRC,QAAS,UACTC,QAAS,WAGXV,EAAe4B,GACf/B,aAAauB,QAAQ,cAAelB,KAAKwB,UAAUE,GAAe,GACjE,IAGGC,GAAoBnE,EAAAA,EAAAA,cAAY,KACpCkD,GAAehD,IACb,MAAMkE,GAAWlE,EAEjB,OADAiC,aAAauB,QAAQ,cAAeW,OAAOD,IACpCA,CAAO,GACd,GACD,IAGGE,GAAuBtE,EAAAA,EAAAA,cAAa/I,IACxCmM,EAAkBnM,GAClBkL,aAAauB,QAAQ,iBAAkBzM,EAAO,GAC7C,IAGGsN,GAAmBvE,EAAAA,EAAAA,cAAa/I,IACpCqM,EAAcrM,GACdkL,aAAauB,QAAQ,aAAczM,EAAO,GACzC,KAGH2J,EAAAA,EAAAA,YAAU,KACR4D,SAASC,gBAAgBC,aAAa,aAAczC,GAGtC,SAAVA,GACFuC,SAASC,gBAAgB5N,MAAM8N,YAAY,eAAgB,WAC3DH,SAASC,gBAAgB5N,MAAM8N,YAAY,iBAAkB,WAC7DH,SAASC,gBAAgB5N,MAAM8N,YAAY,iBAAkB,WAC7DH,SAASC,gBAAgB5N,MAAM8N,YAAY,mBAAoB,aAE/DH,SAASC,gBAAgB5N,MAAM8N,YAAY,eAAgB,WAC3DH,SAASC,gBAAgB5N,MAAM8N,YAAY,iBAAkB,WAC7DH,SAASC,gBAAgB5N,MAAM8N,YAAY,iBAAkB,WAC7DH,SAASC,gBAAgB5N,MAAM8N,YAAY,mBAAoB,WACjE,GACC,CAAC1C,IAGJ,MAAM2C,GAAuB5E,EAAAA,EAAAA,cAAY,IAEpB,CACjBqC,EAAYK,QACZL,EAAYM,UACZN,EAAYO,SACZP,EAAYQ,WAEF,SAAVZ,EAAmB,UAAY,UACrB,SAAVA,EAAmB,UAAY,UACrB,SAAVA,EAAmB,UAAY,UACrB,SAAVA,EAAmB,UAAY,YAIhC,CAACA,EAAOI,IAGL5L,GAAiBuJ,EAAAA,EAAAA,cAAa6E,GAC3B,IAAIlO,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAUqM,EACVpM,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAO4N,IACT,CAAC1B,IAEJ,MAAO,CACLlB,QACAI,cACAY,cACAE,iBACAE,aACAE,cACAI,mBACAM,mBACAE,oBACAG,uBACAC,mBACAK,uBACAnO,iBACAqO,WAAsB,SAAV7C,EACb,ECvCH,EAjGuB/L,IAAkC,IAAjC,UAAEgD,EAAS,aAAE6L,GAAc7O,EACjD,MAAM,qBAAE0O,GAAyB5C,IAI3BgD,EAHSJ,IAGS,GAExB,OACErO,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6BAA4BF,SAAA,EACzCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yBAAwBF,UACrCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mCAAkCF,SAAC,4BAEnDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKF,SAAA,EAClBK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAMF,UACnBK,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM3B,UAC7CI,EAAAA,EAAAA,MAAC8E,EAAAA,EAAS,CACRpD,KAAMiB,EACNI,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRvD,SAAA,EAEFK,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACC,gBAAgB,SAC/BpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CACJ3B,QAAQ,OACR4B,OAAQ,GACRC,WAAW,MACXjC,OAAQ,GACRkC,KAAM,CAAEC,SAAU,GAAI1B,KAAM,cAE9B/B,EAAAA,EAAAA,KAAC0D,EAAAA,EAAK,CACJE,cAAgB1D,GAAUD,EAAeC,GACzCmB,MAAO,GACPmC,KAAM,CAAEzB,KAAM,cAEhB/B,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,CACNC,UAAYvC,GAAUD,EAAeC,GACrCuO,aAAc,CACZC,gBAAiB,UACjBC,MAAO,UACPC,OAAQ,qBAEVC,WAAY,CACVF,MAAO,cAGX3O,EAAAA,EAAAA,KAACgE,EAAAA,EAAM,CACL8K,aAAc,CACZH,MAAO,cAGX3O,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CACHC,KAAK,WACLxC,QAAQ,aACRT,KAAK,cACLkD,OAAQqK,EACRzM,KAAMyM,EACNpK,YAAa,GACbC,UAAW,CAAEC,EAAG,KAEjBiK,IACCvO,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,CACZC,EAAG4J,EAAa3J,KAChBT,OAAO,QACPf,gBAAgB,MAChBnB,MAAO,CACL/B,MAAO,OAAOD,EAAesO,EAAaF,UAC1CxK,SAAU,MACV9B,KAAM,mBAOlBhC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCF,SAAA,EAC9CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAAC,gBAGhDK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,yBAAwBF,SAClC4O,EACG,2CAA2CtO,EAAesO,EAAaF,cAAcE,EAAa3J,OAClG,2FAIN,EC4LV,EAhSqBmK,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACzB,MAAM,cACJC,EAAa,oBACbC,EAAmB,aACnBC,IACEC,EAAAA,EAAAA,OAEE,qBAAE5B,GAAyB5C,KAG1ByE,EAAcC,IAAmBhI,EAAAA,EAAAA,UAAS,CAC/CrC,QAA4B,QAApBmJ,EAAAa,EAAcM,cAAM,IAAAnB,OAAA,EAApBA,EAAsBoB,gBAAiB,EAC/CnK,IAAK8J,KAAkB,GACvBjK,aAAcX,EAAcC,YAC5B0C,aAAwC,QAA3BmH,EAAAY,EAAcQ,qBAAa,IAAApB,OAAA,EAA3BA,EAA6B1M,SAAU,KAI/C+N,EAAgBC,IAAqBrI,EAAAA,EAAAA,UAAS,KAGrDkC,EAAAA,EAAAA,YAAU,KACJyF,IACFK,GAAgBM,IAAQ,IAAAC,EAAAC,EAAA,MAAK,IACxBF,EACH3K,QAA4B,QAApB4K,EAAAZ,EAAcM,cAAM,IAAAM,OAAA,EAApBA,EAAsBL,gBAAiBI,EAAS3K,OACxDI,IAAK8J,KAAkBS,EAASvK,IAChC6B,aAAwC,QAA3B4I,EAAAb,EAAcQ,qBAAa,IAAAK,OAAA,EAA3BA,EAA6BnO,SAAUiO,EAAS1I,YAC9D,IAGD6I,IACF,GACC,CAACd,EAAeE,IAGnB,MAAMY,EAAyBA,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACnC,MAAMC,GAA8C,QAA1BL,EAAAf,EAAcqB,oBAAY,IAAAN,OAAA,EAA1BA,EAA4BK,oBAAqB,EACrEvI,GACiB,QAApBmI,EAAAhB,EAAcM,cAAM,IAAAU,OAAA,EAApBA,EAAsBT,gBAAoC,QAAvBU,EAAGjB,EAAcM,cAAM,IAAAW,OAAA,EAApBA,EAAsBK,SAAU,KAClD,QAApBJ,EAAAlB,EAAcM,cAAM,IAAAY,OAAA,EAApBA,EAAsBX,gBAAoC,QAAvBY,EAAGnB,EAAcM,cAAM,IAAAa,OAAA,EAApBA,EAAsBI,iBAAkB,IAK3E3P,EAAO,GAEb,IAAI4P,EAAmBJ,EACvB,MAAMK,EAAc,IAAIC,KAClBC,EAAcF,EAAYG,cAC1BC,EAAeJ,EAAYK,WAGjC,IAAK,IAAIC,EAAO,EAAGA,GATK,GASoBA,IAC1C,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,GAAIA,IAE9B,KAAa,IAATD,GAAcC,EAAQH,KAG1BL,GAAoB3I,EAGpB2I,GAAqB,EApBE,IAoBwB,GAG3CQ,EAAQ,IAAM,GAAG,CACnB,MACMC,EADO,IAAIP,KAAKC,EAAcI,EAAMC,EAAO,GACtBE,mBAAmB,QAAS,CACrDH,KAAM,UACNC,MAAO,UAGTpQ,EAAKuQ,KAAK,CACRpN,KAAMkN,EACNG,WAAYtL,KAAKG,MAAMuK,IAE3B,CAIJd,EAAkB9O,EAAK,EA+CnBxB,EAAkBC,GACf,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IACtBE,OAAOP,GAINqO,EAAe,CACnB3J,KAAM,IAAI2M,MAAK,IAAIA,MAAOE,cAAgB,EAAG,EAAG,GAAGM,mBAAmB,QAAS,CAC7EH,KAAM,UACNC,MAAO,UAETxD,OAAQ,KAGV,OACEtO,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mCAAkCF,SAAC,8BAK/CsQ,EAAapK,UAA+B,QAAzBqJ,EAAKW,EAAcM,cAAM,IAAAjB,OAAA,EAApBA,EAAsBkB,iBAC9CpQ,EAAAA,EAAAA,KAAA,UACEkL,QAjEgBgH,KAAO,IAADC,EAAAC,EAE9BtC,EAAoB,CAClBK,OAAQ,IACHN,EAAcM,OACjBC,cAAeH,EAAapK,OAC5BsL,QAAqC,IAA5BlB,EAAa7J,eAA0C,QAAxB+L,EAAItC,EAAcM,cAAM,IAAAgC,OAAA,EAApBA,EAAsBhB,SAClEC,gBAA6C,IAA5BnB,EAAa5J,eAA0C,QAAxB+L,EAAIvC,EAAcM,cAAM,IAAAiC,OAAA,EAApBA,EAAsBhB,oBAK9ET,GAAwB,EAsDhB9Q,UAAU,uHAAsHF,SACjI,qBAMLK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeF,SAAC,2IAM7BK,EAAAA,EAAAA,KAACqS,EAAa,CACZxK,YAAaoI,EACb1F,SAtF6B+H,IACjCpC,EAAgBoC,EAAY,KAyF1BvS,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,2CAA0CF,SAAC,yBAIzDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EAEpDK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BF,UACxCK,EAAAA,EAAAA,KAACuS,EAAc,CACb7P,UAAW4N,EACX/B,aAAcA,OAKlBxO,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,EACxCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,0BAI/CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,6BAA4BF,SAAC,mGAM1CI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,wBAAuBF,SAAC,yBAGxCK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,4BAA2BF,SACxCM,GAAyC,QAA1BkP,EAAAU,EAAcqB,oBAAY,IAAA/B,OAAA,EAA1BA,EAA4B8B,oBAAqB,SAIrElR,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,wBAAuBF,SAAC,6BAGxCK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,4BAA2BF,SACxCM,EAGG,KAFmB,QAApBmP,EAAAS,EAAcM,cAAM,IAAAf,OAAA,EAApBA,EAAsBgB,gBAAoC,QAAvBf,EAAGQ,EAAcM,cAAM,IAAAd,OAAA,EAApBA,EAAsB8B,SAAU,KAClD,QAApB7B,EAAAO,EAAcM,cAAM,IAAAb,OAAA,EAApBA,EAAsBc,gBAAoC,QAAvBb,EAAGM,EAAcM,cAAM,IAAAZ,OAAA,EAApBA,EAAsB6B,iBAAkB,YAKrFrR,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,wBAAuBF,SAAC,yBAGxCK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,4BAA2BF,SACxCM,EA1HiBuS,EAACvB,EAAmBwB,EAAoBC,KAExE,MAAMC,EAAehM,KAAKS,IAAI,EAAG,GAAKsL,GAKtC,IAAIrB,EAAmBJ,EAGvB,IAAK,IAAI2B,EAAI,EAAGA,EAAID,EAAcC,IAEhCvB,GAAoBoB,EAGpBpB,GAAqB,KAGvB,OAAO1K,KAAKG,MAAMuK,EAAiB,EAwGLmB,EACY,QAA1BhD,EAAAK,EAAcqB,oBAAY,IAAA1B,OAAA,EAA1BA,EAA4ByB,oBAAqB,GAC5B,QAApBxB,EAAAI,EAAcM,cAAM,IAAAV,OAAA,EAApBA,EAAsBW,gBAAoC,QAAvBV,EAAGG,EAAcM,cAAM,IAAAT,OAAA,EAApBA,EAAsByB,SAAU,KAClD,QAApBxB,EAAAE,EAAcM,cAAM,IAAAR,OAAA,EAApBA,EAAsBS,gBAAoC,QAAvBR,EAAGC,EAAcM,cAAM,IAAAP,OAAA,EAApBA,EAAsBwB,iBAAkB,IAAO,GACtFrB,KAAkB,uBAUhChQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,2CAA0CF,SAAC,4BAIzDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EACpDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,wBAG/CI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,kCAAiCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,uCACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,oCACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,qCACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,6CAIRI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,oBAG/CI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,kCAAiCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,sCACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,2CACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,iCACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,2CAIRI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,uBAG/CI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,kCAAiCF,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,2BACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,cACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,4BACJK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,kCAKR,ECkpCV,EAz6CkBkT,KAAO,IAADC,EAAA7D,EACtB,MAAM,cACJY,EAAa,oBACbC,EAAmB,yBACnBiD,EAAwB,cACxBpS,EAAa,aACboP,EAAY,aACZiD,EAAY,WACZC,IACEC,EAAAA,EAAAA,YAAWC,EAAAA,KAERC,EAAWC,IAAgBnL,EAAAA,EAAAA,UAAS,YAGpCoL,EAAeC,IAAoBrL,EAAAA,EAAAA,WACR,QAAhC4K,EAAAjD,EAAc2D,0BAAkB,IAAAV,OAAA,EAAhCA,EAAkCQ,gBAAiB,KAqM/C,WAAEG,EAAU,iBAAE9Q,EAAgB,wBAAEC,GAxLV8Q,MAC1B,MAAMD,EAAa,IAGb,aAAEvC,EAAY,OAAEf,EAAM,SAAEwD,EAAQ,cAAEtD,GAAkBR,EAG1D,IAAI+D,EAAiB1C,EAAa0C,eAC9BC,EAAgB3C,EAAa4C,cAC7B7B,EAAaf,EAAaD,mBAAqB,EACnD,MAAM8C,EAAY7C,EAAa8C,SAASpC,KAClCqC,EAAa/C,EAAa8C,SAASnC,MAGzC,IAAIzB,EAAgBD,EAAOC,cAC3B,MAAMe,EAAUhB,EAAOgB,QAAU,IAC3BC,EAAkBjB,EAAOiB,gBAAkB,IAC3C8C,EAAkBvT,EAClBC,EAAcsQ,EAAaiD,iBAE3BC,EADqBlD,EAAamD,aAAe,IACN,GAGjD,IAAIC,EAAapD,EAAaqD,gBAAgB1C,MAC1C2C,EAAYtD,EAAaqD,gBAAgB3C,KAG7C,MAAM6C,EAAoBtE,EAAOsE,mBAAqB,IAGjDtE,EAAOsE,mBAAqBtE,EAAOuE,cACtCD,EAAkBzC,KAAK,CACrBH,MAAO1B,EAAOwE,sBACd/C,KAAMzB,EAAOyE,qBACbhL,UAAWuG,EAAOuE,eAKtB,MAAMG,EAAoB,IAAIJ,GAAmBK,MAAK,CAACC,EAAGC,IACpDD,EAAEnD,OAASoD,EAAEpD,KAAamD,EAAEnD,KAAOoD,EAAEpD,KAClCmD,EAAElD,MAAQmD,EAAEnD,QAIfoD,EAAgB5E,EAClB,IAAIA,GAAeyE,MAAK,CAACC,EAAGC,IACtBD,EAAEnD,OAASoD,EAAEpD,KAAamD,EAAEnD,KAAOoD,EAAEpD,KAClCmD,EAAElD,MAAQmD,EAAEnD,QAErB,GAGJ,IAAIlP,EAAmB,KACnBC,EAA0B,KAG9B,IAAK,IAAIiP,EAAQ,EAAGA,EAAQ,GAAIA,IAAS,CACvC,MAAMH,GAAiB4C,EAAazC,EAAQ,GAAK,GAAM,EACjDL,EACJgD,EAAY7N,KAAKuO,OAAOZ,EAAazC,EAAQ,GAAK,IAC9CsD,EAAe,GAAGnC,EAAatB,GAAc0D,UACjD,EACA,MACG5D,IAGL,IAAI6D,EAAW7D,EAAcuC,EACzBuB,EAAY5D,EAAeuC,EAC3BqB,EAAY,IACdD,IACAC,GAAa,IAEf,MAAMC,EAAS,GAAGF,MAAaC,KAG/B,IAAK,MAAME,KAAcX,EACvB,GACEnD,IAAiB8D,EAAW3D,OAC5BL,IAAgBgE,EAAW5D,KAC3B,CACAxB,EAAgBoF,EAAW5L,UAC3B,KACF,CAIF,MAAM6L,EAAkBrF,EAAgBe,EAClCuE,EAActF,EAAgBgB,EAC9B3J,EAAc2I,EAAgBqF,EAGpC,IAAIlN,EAAc,EACdoN,EAAmB,GAEvB,IAAK,MAAMvM,KAAS6L,EAEhBvD,IAAiBtI,EAAMyI,OACvBL,IAAgBpI,EAAMwI,OAEtBrJ,GAAea,EAAMiF,OACrBsH,EAAmBA,EACf,GAAGA,MAAqBvM,EAAMwM,cAC9BxM,EAAMwM,aAKd,IAAIC,EAAoBjV,EACpBkV,EAAmBjC,EAAgBO,EACnC2B,EAAmBpP,KAAKC,IAC1BiN,EACAjT,EAAckV,GAGZjC,GAAiB,GACnBiC,EAAmB,EACnBC,EAAmB,EACnBF,EAAoB,EACpBhC,EAAgB,GAEhBA,EAAgBlN,KAAKS,IAAI,EAAGyM,EAAgBkC,GAIxB,IAAlBlC,GAA4C,OAArBlR,IACzBA,EAAmBkP,GAIrB,MAAMmE,EACJvO,EAAcyM,EAAkB2B,EAAoBtN,EAGtD0J,GAAcwD,EAAkBC,EAChC9B,GAAkBoC,EAClB,MAAMC,EAAgBrC,EAAiB3B,EAAa4B,EAGhDD,GAAkB,KAAsC,OAA5BhR,IAC9BA,EAA0BiP,GAI5B4B,EAAWzB,KAAK,CACdH,MAAOA,EAAQ,EACfjN,KAAMuQ,EACNlP,IAAKsP,EACL9M,cAAe2H,EACf3I,YAAaA,EACbkM,SAAUO,EACVtT,YAAaiV,EACbhC,cAAeA,EACfmC,eAAgBA,EAChBzN,YAAaA,EACboN,iBAAkBA,EAClBF,gBAAiBA,EACjBS,wBAAyBR,EACzBS,qBAAsBV,EAAkBC,EACxCzD,WAAYA,EACZmE,YAAaxC,EACbqC,cAAeA,EACfI,UACExE,IAAUlP,EACN,gBACAkP,IAAUjP,EACV,yBACA2F,EAAc,EACdoN,EACA,MAEV,CAEA,MAAO,CACLlC,aACA9Q,iBACuB,OAArBA,EAA4B8Q,EAAW9Q,GAAoB,KAC7DC,wBAC8B,OAA5BA,EACI6Q,EAAW7Q,GACX,KACP,EAID8Q,GAGIhT,EAAc,IACfmP,EAAc8D,SAASzS,KAAKF,IAAO,CACpCC,KAAMD,EAAQC,KACdf,MAAOc,EAAQqN,WAEjB,CACEpN,KAAM,eACNf,MAAO2P,EAAcqB,aAAaiD,mBAKhCmC,EAAgB3T,EAClB,GAAGgE,KAAKuO,MAAMvS,EAAiBkP,MAAQ,aACrClP,EAAiBkP,MAAQ,YAE3B,wBAEE0E,EAAoB3T,EACtB,GAAG+D,KAAKuO,MAAMtS,EAAwBiP,MAAQ,aAC5CjP,EAAwBiP,MAAQ,YAElC,wBAGEzB,EAAgBP,EAAcM,OAAOC,cACrCqF,EACJrF,GAAiBP,EAAcM,OAAOgB,QAAU,KAG5C1J,GADaoI,EAAcM,OAAOiB,gBACpBhB,EAAgBqF,GAC9BvB,EAAkBvT,EAClBC,EAAciP,EAAcqB,aAAaiD,iBACzC6B,EAAiBvO,EAAcyM,EAAkBtT,EACjD4V,EAAcR,EAAiBvO,EAI/B+J,GAAc,IAAID,MAAOE,cAQzB/O,GAPwBmN,EAAcQ,eACxCR,EAAcQ,cACXtP,QAAQqI,GAAUA,EAAMwI,OAASJ,IACjCiF,QAAO,CAACC,EAAOtN,IAAUsN,EAAQtN,EAAMiF,QAAQ,GAIpCoF,EAAW1S,QAAO,CAAC4V,EAAMxV,IAAUA,EAAQ,IAAM,KAmB7DyV,GAhBa/G,EAAcqB,aAAa0C,eAC3B/D,EAAcqB,aAAaD,kBAevB,IAEjBS,GADQ,IAAIH,MACSI,WAAa,EAClCkF,EAAkB,CACtB,CAAEhF,MAAOH,EAAcE,KAAMJ,GAC7B,CACEK,MACEH,EAAe,EAAI,GACfA,EAAe,EAAI,GACnBA,EAAe,EACrBE,KAAMF,EAAe,EAAI,GAAKF,EAAc,EAAIA,GAElD,CACEK,MACEH,EAAe,EAAI,GACfA,EAAe,EAAI,GACnBA,EAAe,EACrBE,KAAMF,EAAe,EAAI,GAAKF,EAAc,EAAIA,IAKhD3B,EAAcM,OAAOsE,mBACvB5E,EAAcM,OAAOsE,kBAAkBqC,SAAStB,IAC3BqB,EAAgBE,MAChCC,GACCA,EAAOnF,QAAU2D,EAAW3D,OAC5BmF,EAAOpF,OAAS4D,EAAW5D,QAI7BgF,EAAe5E,KAAK,CAClB9N,KAAM,oBACNU,KAAM,GAAGoO,EAAawC,EAAW3D,UAC/B2D,EAAW5D,OAEbvD,OAAQmH,EAAW5L,UACnBgM,YAAa,qBAAqB3V,EAChCuV,EAAW5L,cAGjB,IAKAiG,EAAcQ,eAChBR,EAAcQ,cAAcyG,SAAS1N,IAChByN,EAAgBE,MAChCC,GACCA,EAAOnF,QAAUzI,EAAMyI,OAASmF,EAAOpF,OAASxI,EAAMwI,QAIxDgF,EAAe5E,KAAK,CAClB9N,KAAM,QACNU,KAAM,GAAGoO,EAAa5J,EAAMyI,UAAUzI,EAAMwI,OAC5CvD,OAAQjF,EAAMiF,OACduH,YAAaxM,EAAMwM,aAEvB,IAKJ,MAgBMqB,EAAkB/U,IAKjB,IALkB,MACvBhC,EAAK,WACLgX,EAAU,WACVC,EAAU,QACVC,GAAU,GACXlV,EACKyM,EAAQ,eAUZ,OARIyI,GACElX,EAAQgX,IAAYvI,EAAQ,iBAC5BzO,EAAQiX,IAAYxI,EAAQ,gBAE5BzO,EAAQgX,IAAYvI,EAAQ,iBAC5BzO,EAAQiX,IAAYxI,EAAQ,gBAIhC3O,EAAAA,EAAAA,KAAA,OAAKH,UAAU,oBAAmBF,UAChCK,EAAAA,EAAAA,KAAA,OAAKH,UAAW,wBAAwB8O,YACpC,EAIV,OACE5O,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAAyCF,SAAA,EAEtDK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sFAAqFF,UAClGK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,4CAA2CF,SAAC,oCAM5DI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iFAAgFF,SAAA,EAC7FK,EAAAA,EAAAA,KAAA,UACEH,UAAW,4EACK,YAAduT,EACI,sDACA,sDAENlI,QAASA,IAAMmI,EAAa,WAAW1T,SACxC,aAGDK,EAAAA,EAAAA,KAAA,UACEH,UAAW,4EACK,eAAduT,EACI,sDACA,sDAENlI,QAASA,IAAMmI,EAAa,cAAc1T,SAC3C,gBAGDK,EAAAA,EAAAA,KAAA,UACEH,UAAW,4EACK,WAAduT,EACI,sDACA,sDAENlI,QAASA,IAAMmI,EAAa,UAAU1T,SACvC,YAGDK,EAAAA,EAAAA,KAAA,UACEH,UAAW,4EACK,eAAduT,EACI,sDACA,sDAENlI,QAASA,IAAMmI,EAAa,cAAc1T,SAC3C,gBAGDK,EAAAA,EAAAA,KAAA,UACEH,UAAW,4EACK,QAAduT,EACI,sDACA,sDAENlI,QAASA,IAAMmI,EAAa,OAAO1T,SACpC,WAMY,YAAdyT,IACCrT,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EAExBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uDAAsDF,SAAA,EAEnEK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gEAA+DF,UAC5EI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCF,SAAA,EAC/CI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,iBAGrCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,oCAAmCF,SAC7CM,EACC4P,EAAcqB,aACX0C,mBAGP5T,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,8BAIvCK,EAAAA,EAAAA,KAACiX,EAAe,CACd/W,MACE2P,EAAcqB,aACX0C,eAELsD,WAAY,IACZC,WAAY,YAMlBnX,EAAAA,EAAAA,KAAA,OAAKH,UAAU,iEAAgEF,UAC7EK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mCAAkCF,UAC/CI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,iBAGrCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,qCAAoCF,SAC9CM,EACC4P,EAAcqB,aACXD,mBAAqB,MAG5BjR,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,oCAQ3CK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,8DAA6DF,UAC1EI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCF,SAAA,EAC/CI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,oBAGrCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,kCAAiCF,SAC3CM,EACC4P,EAAcqB,aACX4C,kBAGP9T,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAElC,0BADC2W,EAEG,eAAeA,IACf,uBAGRtW,EAAAA,EAAAA,KAACiX,EAAe,CACd/W,MACE2P,EAAcqB,aAAa4C,cAE7BoD,WAAY,IACZC,WAAY,IACZC,SAAS,UAMfrX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+DAA8DF,SAAA,EAC3EK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,qBAGrCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,mCAAkCF,SAC5CM,EACC4P,EAAcqB,aAAa0C,gBACxB/D,EAAcqB,aACZD,mBAAqB,GACxBpB,EAAcqB,aAAa4C,kBAGjC9T,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,oCAOzCI,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,oBAAoBE,WAAW,eAAcH,SAAA,EACvDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6CAA4CF,SAAA,EACzDI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BF,SAAA,EACxCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,oBAG/CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,mCAAkCF,SAC5CM,EAAewH,MAElBzH,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,gCAKvCI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2BAA0BF,SAAA,EACvCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gCAA+BF,SAAC,sBAG9CK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,kCAAiCF,SAC3CM,EACCiU,EAAkBtT,MAGtBZ,EAAAA,EAAAA,KAAA,KAAGH,UAAU,wBAAuBF,SAAC,+BAKvCI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6BAA4BF,SAAA,EACzCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAAC,qBAGhDK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,oCAAmCF,SAC7CM,EAAe+V,MAElBjW,EAAAA,EAAAA,MAAA,KAAGF,UAAU,wBAAuBF,SAAA,EZxkBtBO,EYykBGsW,EZxkBxB,IAAIrW,KAAKC,aAAa,QAAS,CACpCC,MAAO,UACPE,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAOP,IYokBkC,8BAOlCH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,4BAA2BF,SAAC,YAG5CK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,gBAAeF,SAC5BM,EAAewH,SAGpBzH,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDF,UAClEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaF,SAAA,EAC1BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,oBACVQ,MAAO,CACLgB,MACG6S,EACCzM,EACF,IAHK,KAMT7H,MAAM,qBAERI,EAAAA,EAAAA,KAAA,OACEH,UAAU,uBACVQ,MAAO,CACLgB,MACGT,EAAc6G,EACf,IAFK,KAKT7H,MAAM,kBAERI,EAAAA,EAAAA,KAAA,OACEH,UAAU,sBACVQ,MAAO,CACLgB,MACG2U,EAAiBvO,EAClB,IAFK,KAKT7H,MAAM,kBAIZG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,eAAcF,SAAA,CAAC,aAClBM,EAAeiU,OAE5BnU,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBF,SAAA,CAAC,SACzBM,EAAeW,OAExBb,EAAAA,EAAAA,MAAA,QAAMF,UAAU,iBAAgBF,SAAA,CAAC,YACrBM,EAAe+V,gBAOjChW,EAAAA,EAAAA,KAACqX,EAAgB,CACf3W,YAAaA,EACbC,cAAeA,EACfC,YAAaA,OAQJ,WAAdwS,IACCpT,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWF,UACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBF,SAAA,EAErCK,EAAAA,EAAAA,KAACsX,EAAa,CACZ5U,UAAWA,EACXC,iBAAkBA,EAClBC,wBAAyBA,KAI3B5C,EAAAA,EAAAA,KAACuX,EAAkB,CACjB7U,UAAWA,EACXE,wBAAyBA,KAI3B5C,EAAAA,EAAAA,KAACwX,EAAa,CAAC9U,UAAWA,SAMjB,eAAd0Q,IACCrT,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBK,EAAAA,EAAAA,KAACc,EAAI,CAAClB,MAAM,2BAA0BD,UACpCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiBF,UAC9BI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,sCAAqCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,SAAAL,UACEI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYF,SAAA,EACxBK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,eAG/FK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,UAG/FK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,qBAG/FK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,SAG/FK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iFAAgFF,SAAC,+BAKnGI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,oCAAmCF,SAAA,EAClDI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBF,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,8CAA6CF,SAAC,2BAG5DK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CgD,EACGA,EAAiBiC,KACjB,2BAEN5E,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5C2W,KAEHtW,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CgD,EACGA,EAAiBsD,IACjB,OAENjG,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CgD,EACG1C,EACE0C,EAAiByT,aAEnB,UAGRrW,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBF,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,8CAA6CF,SAAC,+BAG5DK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CiD,EACGA,EAAwBgC,KACxB,2BAEN5E,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5C4W,KAEHvW,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CiD,EACGA,EAAwBqD,IACxB,OAENjG,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CiD,EACG3C,EACE2C,EAAwBwT,aAE1B,SAKPvG,EAAcQ,eACbR,EAAcQ,cAAcnP,KAC1B,CAACkI,EAAOjI,KAEN,MAAMsW,EACJhE,EAAWiE,MAAMC,GACfA,EAAE/S,KAAKsF,SACL,GAAG8I,EACD5J,EAAMyI,OACNuD,UACA,EACA,MACGhM,EAAMwI,UAIjB,OAAK6F,GAGH1X,EAAAA,EAAAA,MAAA,MAEEF,UAAU,+BAA8BF,SAAA,EAExCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,8CAA6CF,SACxDyJ,EAAMwM,eAET5V,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5C8X,EAAW7S,QAEd7E,EAAAA,EAAAA,MAAA,MAAIF,UAAU,kCAAiCF,SAAA,CAC5CgH,KAAKuO,MACJuC,EAAW5F,MACT,IACD,IAAI,QACD,IACL4F,EAAW5F,MACV,GAAI,IAAI,aAGZ7R,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5C8X,EAAWxR,OAEdjG,EAAAA,EAAAA,KAAA,MAAIH,UAAU,kCAAiCF,SAC5CM,EACCmJ,EAAMiF,YAxBL,SAASlN,KAJM,IA+BjB,eASrBpB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCF,SAAA,EAEpDI,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,gCAA+BD,SAAA,CACxCgD,IACC5C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,iBACf,KACfK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAC1BM,EACC4P,EAAcqB,aACX4C,qBAIT/T,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,aACnB,KACXK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,6BAA4BF,SACzCM,EACC4P,EAAcqB,aACX4C,cAAgB,EACfL,EAAW,GACRI,cACH,YAKZ7T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDF,UAClEK,EAAAA,EAAAA,KAAA,OACEH,UAAU,qEACVQ,MAAO,CACLgB,MAAO,GAAGsF,KAAKS,IACb,EACAT,KAAKC,IACH,KACEiJ,EACCqB,aACA4C,cACDL,EAAW,GACRI,eACHhE,EACGqB,aACA4C,cACH,eAMZ9T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0DAAyDF,UACtEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBF,SAAA,EAC/BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,mDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,qDAGNvL,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BF,SAAA,CAAC,0CAE3B,KACbK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,YAAWF,SACxBgD,EAAiBiC,OACZ,IAAI,SACL,IACNjC,EAAiBsD,IAAI,QAExBlG,EAAAA,EAAAA,MAAA,KAAGF,UAAU,sBAAqBF,SAAA,CAAC,0BACT,IACvB2W,EAAc,QAAM,IACpBtD,EACCnD,EACGqB,aACAqD,gBACA1C,OACF,IAEDhC,EACGqB,aACAqD,gBACA3C,oBAQfjP,IACA5C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,iBACf,KACfK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAC1BM,EACC4P,EAAcqB,aACX4C,qBAIT/T,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,aACnB,KACXK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,2BAA0BF,SACvCM,EACCwT,EACEA,EAAWlR,OAAS,GACpBsR,wBAKV7T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDF,UAClEK,EAAAA,EAAAA,KAAA,OACEH,UAAU,oEACVQ,MAAO,CACLgB,MAAO,GAAGsF,KAAKS,IACb,EACAT,KAAKC,IACH,IASE,KARD,EACC6M,EACEA,EAAWlR,OACT,GACFsR,cACAhE,EACGqB,aACA4C,0BAOjB9T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wDAAuDF,UACpEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBF,SAAA,EAC/BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,kDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,iEAGNvL,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,4BAA2BF,SAAC,oGAMzCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,qBAAoBF,SAAC,wFAa9CI,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,sCAAqCD,SAAA,CAC9CiD,IACC7C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,iBACf,KACfK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAC1BM,EACC4P,EAAcqB,aACX0C,sBAIT7T,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,QACxB,KACNK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,6BAA4BF,SACzCM,EAAe,cAItBD,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDF,UAClEK,EAAAA,EAAAA,KAAA,OACEH,UAAU,qEACVQ,MAAO,CACLgB,MAAO,GAAGsF,KAAKC,IACb,IACCiJ,EAAcqB,aACZ0C,eACD,IACA,cAKV5T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0DAAyDF,UACtEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBF,SAAA,EAC/BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,mDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,qDAGNvL,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BF,SAAA,CAAC,4DAG7B,KACXK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,YAAWF,SAEvBiD,EAAwBgC,OAEpB,IAAI,SACL,IAELhC,EAAwBqD,IACzB,QAGHlG,EAAAA,EAAAA,MAAA,KAAGF,UAAU,sBAAqBF,SAAA,CAAC,wBACX,IACrB4W,EAAkB,QAAM,IACxBvD,EACCnD,EACGqB,aACAqD,gBACA1C,OACF,IAEDhC,EACGqB,aACAqD,gBACA3C,oBAQfhP,IACA7C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWF,SAAA,EACxBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCF,SAAA,EAChDI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,iBACf,KACfK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAC1BM,EACC4P,EAAcqB,aACX0C,sBAIT7T,EAAAA,EAAAA,MAAA,QAAMF,UAAU,gBAAeF,SAAA,CAAC,WACrB,KACTK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,4BAA2BF,SACxCM,EACCwT,EACEA,EAAWlR,OAAS,GACpB6T,sBAKVpW,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDF,UAClEK,EAAAA,EAAAA,KAAA,OACEH,UAAU,oEACVQ,MAAO,CACLgB,MAAO,GAAGsF,KAAKS,IACb,EACAT,KAAKC,IACH,IACCiJ,EACEqB,aACA0C,eACD,IACA,eAMZ5T,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wDAAuDF,UACpEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBF,SAAA,EAC/BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,kDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,iEAGNvL,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,4BAA2BF,SAAC,qHAMzCK,EAAAA,EAAAA,KAAA,KAAGH,UAAU,qBAAoBF,SAAC,iHAiBrC,eAAdyT,IACCrT,EAAAA,EAAAA,MAACe,EAAI,CAAClB,MAAM,+BAA8BD,SAAA,EAExCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wDAAuDF,UACpEI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8CAA6CF,SAAA,EAC1DI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBF,SAAA,EAChCK,EAAAA,EAAAA,KAAA,SACE4X,QAAQ,gBACR/X,UAAU,+CAA8CF,SACzD,wBAGDI,EAAAA,EAAAA,MAAA,UACE8X,GAAG,gBACH3X,MAAOoT,EACP/I,SAvoCmBK,IACjC,MAAM1K,EAAQ+K,SAASL,EAAEE,OAAO5K,OAChCqT,EAAiBrT,GACjB6S,EAAyB,CACvBO,cAAepT,GACf,EAmoCYL,UAAU,+IAA8IF,SAAA,EAExJK,EAAAA,EAAAA,KAAA,UAAQE,MAAO,GAAGP,SAAC,wBAGnBK,EAAAA,EAAAA,KAAA,UAAQE,MAAO,GAAGP,SAAC,yBAGnBK,EAAAA,EAAAA,KAAA,UAAQE,MAAO,GAAGP,SAAC,yBAGnBK,EAAAA,EAAAA,KAAA,UAAQE,MAAO,GAAGP,SAAC,yBAGnBK,EAAAA,EAAAA,KAAA,UAAQE,MAAO,GAAGP,SAAC,+BAKvBI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBF,SAAA,EAChCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,qCAAoCF,UACjDK,EAAAA,EAAAA,KAAA,OACEH,UAAU,UACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,mEAIRvL,EAAAA,EAAAA,MAAA,KAAGF,UAAU,wBAAuBF,SAAA,CAAC,WAC1B2T,EAAc,mDAO/BtT,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuBF,UACpCK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2CAA0CF,UACvDI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,sCAAqCF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,SAAAL,UACEI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYF,SAAA,EACxBK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,WAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,UAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,eAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,cAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,kBAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,oBAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,WAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,qBAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,kBAGjHK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,mGAAkGF,SAAC,sBAKrHK,EAAAA,EAAAA,KAAA,SAAOH,UAAU,oCAAmCF,SACjD8T,EACEzO,MAAM,EAAGsO,GACTpS,KAAI,CAAC2Q,EAAO1Q,KACXpB,EAAAA,EAAAA,MAAA,MAEEF,WACEgS,EAAMwE,UACF,cACAlV,EAAQ,IAAM,EACd,aACA,IALK,sCAM2BxB,SAAA,EAEtCK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,oDAAmDF,SAC9DkS,EAAMA,SAET7R,EAAAA,EAAAA,KAAA,MAAIH,UAAU,oDAAmDF,SAC9DkS,EAAMjN,QAET5E,EAAAA,EAAAA,KAAA,MAAIH,UAAU,+EAA8EF,SACzFM,EACC4R,EAAMpK,gBAGVzH,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gFAA+EF,SAC1FM,EACC4R,EAAM8B,aAGV3T,EAAAA,EAAAA,KAAA,MAAIH,UAAU,6EAA4EF,SACvFM,EACC4R,EAAMjR,gBAGVZ,EAAAA,EAAAA,KAAA,MAAIH,UAAU,6EAA4EF,SACvFM,EACC4R,EAAMgC,kBAGV7T,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gFAA+EF,SAC1FkS,EAAMtJ,YAAc,EACjBtI,EACE4R,EAAMtJ,aAER,OAENvI,EAAAA,EAAAA,KAAA,MAAIH,UAAU,+EAA8EF,SACzFM,EACC4R,EAAMmE,mBAGVhW,EAAAA,EAAAA,KAAA,MAAIH,UAAU,+EAA8EF,SACzFM,EACC4R,EAAMuE,gBAGVpW,EAAAA,EAAAA,KAAA,MAAIH,UAAU,gFAA+EF,SAC1FM,EACC4R,EAAMI,gBAtDL9Q,eAiEjBwB,GACAC,IAC2B,QAA3BqM,EAAAY,EAAcQ,qBAAa,IAAApB,OAAA,EAA3BA,EAA6B1M,QAAS,KACtCxC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wDAAuDF,SAAA,EACpEK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCF,SAAC,qBAG/CI,EAAAA,EAAAA,MAAA,MAAIF,UAAU,YAAWF,SAAA,CACtBgD,IACC5C,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBF,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,mDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,qDAGNvL,EAAAA,EAAAA,MAAA,QAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAAC,mBAEtB,IACPgD,EAAiBiC,KAAK,UAAQ,IAC9BjC,EAAiBkP,MAAM,UAI7BjP,IACC7C,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBF,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,mDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,qDAGNvL,EAAAA,EAAAA,MAAA,QAAAJ,SAAA,EACEK,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaF,SAAC,2BAEtB,IACPiD,EAAwBgC,KAAM,IAAI,SAC5B,IACNhC,EAAwBiP,MAAM,UAMpChC,EAAcQ,eACbR,EAAcQ,cAAcnP,KAC1B,CAACkI,EAAOjI,KAAW,IAAD2W,EAEhB,MAAMC,EASH,QATsBD,EACvBrE,EAAWiE,MAAMC,GACfA,EAAE/S,KAAKsF,SACL,GAAG8I,EACD5J,EAAMyI,OACNuD,UAAU,EAAG,MACbhM,EAAMwI,iBAGX,IAAAkG,OAAA,EARDA,EAQGlT,KAEL,OAAKmT,GAIHhY,EAAAA,EAAAA,MAAA,MAEEF,UAAU,mBAAkBF,SAAA,EAE5BK,EAAAA,EAAAA,KAAA,OACEH,UAAU,oDACVkC,KAAK,OACLoC,OAAO,eACPgH,QAAQ,YAAWxL,UAEnBK,EAAAA,EAAAA,KAAA,QACEoL,cAAc,QACdC,eAAe,QACf7G,YAAY,IACZ8G,EAAE,qDAGNvL,EAAAA,EAAAA,MAAA,QAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,QAAMF,UAAU,cAAaF,SAAA,CAC1ByJ,EAAMwM,YAAY,OACb,IACPmC,EAAoB,KAAG,IACvB9X,EACCmJ,EAAMiF,aAtBL,mBAAmBlN,KAJnB,IA6BF,aAWR,QAAdiS,IAAuBpT,EAAAA,EAAAA,KAAC+O,EAAY,OZj6Cb7O,KYk6CpB,C","sources":["components/common/Card/Card.js","components/common/Card/index.js","services/formatters/currencyFormatters.js","components/dashboard/ExpenseBreakdown/index.js","components/dashboard/ExpenseBreakdown/ExpenseBreakdown.js","components/dashboard/charts/NetWorthChart.js","components/dashboard/charts/SavingsGrowthChart.js","components/dashboard/charts/CashFlowChart.js","services/calculations/cpf/cpf-utilities.js","hooks/useCpfCalculator.js","components/CpfCalculator.js","hooks/useUIPreferences/index.js","components/dashboard/charts/CpfGrowthChart.js","components/CpfDashboard.js","pages/Dashboard.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Card component for consistent styling across the application\r\n * \r\n * @param {Object} props - Component props\r\n * @param {React.ReactNode} props.children - Child elements to render inside the card\r\n * @param {string} [props.title] - Optional card title\r\n * @param {string} [props.className=\"\"] - Additional CSS classes\r\n * @param {string} [props.titleColor=\"bg-blue-600\"] - Background color for the title area\r\n * @returns {JSX.Element}\r\n */\r\nconst Card = ({ children, title, className = \"\", titleColor = \"bg-blue-600\" }) => (\r\n  <div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}>\r\n    {title && (\r\n      <div className={`${titleColor} px-4 py-3`}>\r\n        <h2 className=\"text-lg font-semibold text-white\">{title}</h2>\r\n      </div>\r\n    )}\r\n    <div className=\"p-4\">{children}</div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n  className: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","import Card from './Card';\r\n\r\nexport default Card;\r\n","/**\r\n * Format a number as a currency string (SGD)\r\n * \r\n * @param {number} value - The number to format\r\n * @returns {string} - Formatted currency string\r\n */\r\nexport const formatCurrency = (value) => {\r\n  return new Intl.NumberFormat(\"en-SG\", {\r\n    style: \"currency\",\r\n    currency: \"SGD\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number as a percentage\r\n * \r\n * @param {number} value - The decimal value to format (e.g., 0.1 for 10%)\r\n * @returns {string} - Formatted percentage string\r\n */\r\nexport const formatPercent = (value) => {\r\n  return new Intl.NumberFormat(\"en-SG\", {\r\n    style: \"percent\",\r\n    minimumFractionDigits: 1,\r\n    maximumFractionDigits: 1,\r\n  }).format(value);\r\n};\r\n","import ExpenseBreakdown from './ExpenseBreakdown';\r\n\r\nexport default ExpenseBreakdown;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * ExpenseBreakdown Component\r\n * Displays a breakdown of monthly expenses with a table and pie chart visualization\r\n *\r\n * @param {Object} props - Component props\r\n * @param {Array} props.expenseData - Array of expense objects with name and value\r\n * @param {number} props.totalExpenses - Sum of all non-loan expenses\r\n * @param {number} props.loanPayment - Monthly loan payment amount\r\n * @returns {JSX.Element}\r\n */\r\nconst ExpenseBreakdown = ({ expenseData, totalExpenses, loanPayment }) => {\r\n  // Colors for pie chart\r\n  const COLORS = [\r\n    \"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\", \r\n    \"#82ca9d\", \"#ffc658\", \"#ff7300\", \"#ff0000\", \"#B10DC9\",\r\n    \"#FF851B\", \"#85144b\", \"#3D9970\", \"#2ECC40\", \"#01FF70\"\r\n  ];\r\n\r\n  return (\r\n    <Card title=\"Monthly Expense Breakdown\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        {/* Expense Table */}\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead>\r\n              <tr className=\"bg-gray-50\">\r\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Category\r\n                </th>\r\n                <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Amount\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {expenseData.filter(expense => expense.name !== \"Loan Payment\").map((expense, index) => (\r\n                <tr key={index} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                    {expense.name}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\r\n                    {formatCurrency(expense.value)}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              <tr className=\"hover:bg-gray-50\">\r\n                <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                  Loan Payment\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\r\n                  {formatCurrency(loanPayment)}\r\n                </td>\r\n              </tr>\r\n              <tr className=\"bg-blue-50\">\r\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700\">\r\n                  Total\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700 text-right\">\r\n                  {formatCurrency(totalExpenses + loanPayment)}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Expense Pie Chart */}\r\n        <div className=\"h-64 md:h-80\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart>\r\n              <Pie\r\n                data={expenseData}\r\n                dataKey=\"value\"\r\n                nameKey=\"name\"\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                outerRadius=\"70%\"\r\n                fill=\"#8884d8\"\r\n                labelLine={false}\r\n                label={({ name, percent }) =>\r\n                  `${name}: ${(percent * 100).toFixed(0)}%`\r\n                }\r\n              >\r\n                {expenseData.map((entry, index) => (\r\n                  <Cell\r\n                    key={`cell-${index}`}\r\n                    fill={COLORS[index % COLORS.length]}\r\n                  />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nExpenseBreakdown.propTypes = {\r\n  expenseData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  totalExpenses: PropTypes.number.isRequired,\r\n  loanPayment: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ExpenseBreakdown;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  ComposedChart,\r\n  Area,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * NetWorthChart Component\r\n * Displays a chart showing the growth of net worth over time, including cash savings,\r\n * CPF balance, and loan payoff progress\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @param {Object} props.loanPaidOffMonth - Month when loan is paid off (or null)\r\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\r\n * @returns {JSX.Element}\r\n */\r\nconst NetWorthChart = ({ chartData, loanPaidOffMonth, savingsGoalReachedMonth }) => {\r\n  return (\r\n    <Card title=\"Net Worth Growth\" titleColor=\"bg-blue-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <ComposedChart\r\n            data={chartData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              yAxisId=\"left\"\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n              label={{\r\n                value: \"Savings\",\r\n                angle: -90,\r\n                position: \"insideLeft\",\r\n                offset: 10,\r\n              }}\r\n            />\r\n            <YAxis\r\n              yAxisId=\"right\"\r\n              orientation=\"right\"\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n              label={{\r\n                value: \"Loan Remaining\",\r\n                angle: 90,\r\n                position: \"insideRight\",\r\n                offset: 10,\r\n              }}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Area\r\n              yAxisId=\"left\"\r\n              type=\"monotone\"\r\n              dataKey=\"cashSavings\"\r\n              name=\"Cash Savings\"\r\n              stroke=\"#2FD87B\"\r\n              fill=\"#2FD87B\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              yAxisId=\"left\"\r\n              type=\"monotone\"\r\n              dataKey=\"cpfBalance\"\r\n              name=\"CPF Balance (Locked)\"\r\n              stroke=\"#82ca9d\"\r\n              fill=\"#82ca9d\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Line\r\n              yAxisId=\"right\"\r\n              type=\"monotone\"\r\n              dataKey=\"loanRemaining\"\r\n              name=\"Remaining Loan\"\r\n              stroke=\"#ff7300\"\r\n              strokeWidth={2}\r\n              dot={{ r: 3 }}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            {loanPaidOffMonth && (\r\n              <ReferenceLine\r\n                yAxisId=\"right\"\r\n                x={loanPaidOffMonth.date}\r\n                stroke=\"green\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"Loan Paid Off\",\r\n                  position: \"top\",\r\n                  fill: \"green\",\r\n                }}\r\n              />\r\n            )}\r\n            {savingsGoalReachedMonth && (\r\n              <ReferenceLine\r\n                yAxisId=\"left\"\r\n                x={savingsGoalReachedMonth.date}\r\n                stroke=\"blue\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"$100K Savings\",\r\n                  position: \"top\",\r\n                  fill: \"blue\",\r\n                }}\r\n              />\r\n            )}\r\n          </ComposedChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n        <div className=\"bg-blue-50 p-3 rounded-lg\">\r\n          <h3 className=\"font-medium text-blue-800 mb-2\">\r\n            Savings Growth\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {savingsGoalReachedMonth\r\n              ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\r\n              : `Your cash savings will grow over the projection period`}\r\n          </p>\r\n        </div>\r\n        <div className=\"bg-orange-50 p-3 rounded-lg\">\r\n          <h3 className=\"font-medium text-orange-800 mb-2\">\r\n            Loan Repayment\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {loanPaidOffMonth\r\n              ? `You'll be debt-free by ${loanPaidOffMonth.date}`\r\n              : `Your loan will decrease over the projection period`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nNetWorthChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  loanPaidOffMonth: PropTypes.object,\r\n  savingsGoalReachedMonth: PropTypes.object\r\n};\r\n\r\nexport default NetWorthChart;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * SavingsGrowthChart Component\r\n * Displays a chart showing the growth of savings over time\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\r\n * @returns {JSX.Element}\r\n */\r\nconst SavingsGrowthChart = ({ chartData, savingsGoalReachedMonth }) => {\r\n  return (\r\n    <Card title=\"Savings Growth Projection\" titleColor=\"bg-green-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <AreaChart\r\n            data={chartData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"cashSavings\"\r\n              name=\"Cash Savings\"\r\n              stroke=\"#2FD87B\"\r\n              fill=\"#2FD87B\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"cpfBalance\"\r\n              name=\"CPF Balance\"\r\n              stroke=\"#8884d8\"\r\n              fill=\"#8884d8\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"totalNetWorth\"\r\n              name=\"Total Net Worth\"\r\n              stroke=\"#0088FE\"\r\n              fill=\"#0088FE\"\r\n              fillOpacity={0.1}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            {savingsGoalReachedMonth && (\r\n              <ReferenceLine\r\n                x={savingsGoalReachedMonth.date}\r\n                stroke=\"green\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"$100K Savings Goal\",\r\n                  position: \"top\",\r\n                  fill: \"green\",\r\n                }}\r\n              />\r\n            )}\r\n            <ReferenceLine\r\n              y={100000}\r\n              stroke=\"blue\"\r\n              strokeDasharray=\"3 3\"\r\n              label={{\r\n                value: \"$100K\",\r\n                position: \"right\",\r\n                fill: \"blue\",\r\n              }}\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\r\n        <h3 className=\"font-medium text-green-800 mb-2\">\r\n          Savings Milestone\r\n        </h3>\r\n        <p className=\"text-sm\">\r\n          {savingsGoalReachedMonth\r\n            ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\r\n            : `Keep working towards your $100K cash savings goal`}\r\n        </p>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nSavingsGrowthChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  savingsGoalReachedMonth: PropTypes.object\r\n};\r\n\r\nexport default SavingsGrowthChart;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * CashFlowChart Component\r\n * Displays a chart showing the monthly cash flow breakdown\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @returns {JSX.Element}\r\n */\r\nconst CashFlowChart = ({ chartData }) => {\r\n  // Use only the first 6 months of data for the bar chart\r\n  const limitedData = chartData.slice(0, 6);\r\n  \r\n  return (\r\n    <Card title=\"Monthly Cash Flow\" titleColor=\"bg-blue-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <BarChart\r\n            data={limitedData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Bar\r\n              dataKey=\"takeHomePay\"\r\n              name=\"Take-Home Pay\"\r\n              fill=\"#8884d8\"\r\n            />\r\n            <Bar\r\n              dataKey=\"expenses\"\r\n              name=\"Living Expenses\"\r\n              fill=\"#ff7300\"\r\n            />\r\n            <Bar\r\n              dataKey=\"loanPayment\"\r\n              name=\"Loan Payment\"\r\n              fill=\"#ff0000\"\r\n            />\r\n            <Bar\r\n              dataKey=\"monthlySavings\"\r\n              name=\"Cash Savings\"\r\n              fill=\"#82ca9d\"\r\n            />\r\n            <Bar\r\n              dataKey=\"totalCpfContribution\"\r\n              name=\"CPF Contributions\"\r\n              fill=\"#9370DB\"\r\n            />\r\n            <Bar\r\n              dataKey=\"bonusAmount\"\r\n              name=\"Bonuses\"\r\n              fill=\"#2ECC40\"\r\n            />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\r\n        <h3 className=\"font-medium text-blue-800 mb-2\">\r\n          Cash Flow Breakdown\r\n        </h3>\r\n        <p className=\"text-sm\">\r\n          This chart shows your monthly cash flow for the next 6 months, including income, expenses, and savings.\r\n        </p>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nCashFlowChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default CashFlowChart;","/**\r\n * CPF Calculation Utilities\r\n * \r\n * This module provides utilities for calculating CPF contributions based on\r\n * Singapore's CPF contribution rates as of 2025.\r\n */\r\n\r\n/**\r\n * Supported employee types for CPF calculations\r\n */\r\nexport const EMPLOYEE_TYPE = {\r\n  SINGAPOREAN: 'singaporean',\r\n  PR_FIRST_YEAR: 'pr_first_year',\r\n  PR_SECOND_YEAR: 'pr_second_year',\r\n  PR_THIRD_YEAR_ONWARDS: 'pr_third_year_onwards',\r\n};\r\n\r\n/**\r\n * CPF contribution rates for Singaporean Citizens based on age\r\n * \r\n * Format: [employeeContributionRate, employerContributionRate]\r\n */\r\nconst CITIZEN_RATES = {\r\n  '55_and_below': [0.20, 0.17],\r\n  '55_to_60': [0.15, 0.15],\r\n  '60_to_65': [0.105, 0.095],\r\n  '65_to_70': [0.075, 0.075],\r\n  'above_70': [0.05, 0.05],\r\n};\r\n\r\n/**\r\n * CPF contribution rates for 1st year Permanent Residents\r\n */\r\nconst PR_FIRST_YEAR_RATES = {\r\n  '55_and_below': [0.05, 0.15],\r\n  '55_to_60': [0.05, 0.15],\r\n  '60_to_65': [0.05, 0.085],\r\n  '65_to_70': [0.05, 0.065],\r\n  'above_70': [0.05, 0.045],\r\n};\r\n\r\n/**\r\n * CPF contribution rates for 2nd year Permanent Residents\r\n */\r\nconst PR_SECOND_YEAR_RATES = {\r\n  '55_and_below': [0.15, 0.15],\r\n  '55_to_60': [0.15, 0.15],\r\n  '60_to_65': [0.085, 0.085],\r\n  '65_to_70': [0.06, 0.065],\r\n  'above_70': [0.05, 0.045],\r\n};\r\n\r\n/**\r\n * CPF contribution rates for 3rd year onwards Permanent Residents\r\n */\r\nconst PR_THIRD_YEAR_ONWARDS_RATES = {\r\n  '55_and_below': [0.20, 0.17],\r\n  '55_to_60': [0.15, 0.15],\r\n  '60_to_65': [0.095, 0.095],\r\n  '65_to_70': [0.075, 0.075],\r\n  'above_70': [0.05, 0.05],\r\n};\r\n\r\n/**\r\n * CPF salary ceiling constants\r\n */\r\nconst OW_CEILING = 6000; // Ordinary Wage Ceiling\r\nconst AW_CEILING = 102000; // Additional Wage Ceiling\r\n\r\n/**\r\n * Get age bracket for CPF contribution rates\r\n * \r\n * @param {number} age - Employee's age\r\n * @returns {string} Age bracket key\r\n */\r\nexport const getAgeBracket = (age) => {\r\n  if (age <= 55) return '55_and_below';\r\n  if (age <= 60) return '55_to_60';\r\n  if (age <= 65) return '60_to_65';\r\n  if (age <= 70) return '65_to_70';\r\n  return 'above_70';\r\n};\r\n\r\n/**\r\n * Get CPF contribution rates based on employee type and age\r\n * \r\n * @param {string} employeeType - Type of employee (from EMPLOYEE_TYPE)\r\n * @param {number} age - Employee's age\r\n * @returns {Array} [employeeContributionRate, employerContributionRate]\r\n */\r\nexport const getCpfRates = (employeeType, age) => {\r\n  const ageBracket = getAgeBracket(age);\r\n  \r\n  switch (employeeType) {\r\n    case EMPLOYEE_TYPE.SINGAPOREAN:\r\n      return CITIZEN_RATES[ageBracket];\r\n    case EMPLOYEE_TYPE.PR_FIRST_YEAR:\r\n      return PR_FIRST_YEAR_RATES[ageBracket];\r\n    case EMPLOYEE_TYPE.PR_SECOND_YEAR:\r\n      return PR_SECOND_YEAR_RATES[ageBracket];\r\n    case EMPLOYEE_TYPE.PR_THIRD_YEAR_ONWARDS:\r\n      return PR_THIRD_YEAR_ONWARDS_RATES[ageBracket];\r\n    default:\r\n      throw new Error(`Invalid employee type: ${employeeType}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate CPF contribution amounts based on salary and employee details\r\n * \r\n * @param {number} salary - Monthly salary\r\n * @param {string} employeeType - Type of employee (from EMPLOYEE_TYPE)\r\n * @param {number} age - Employee's age\r\n * @param {number} additionalWage - Additional wage for the year (e.g., bonus)\r\n * @param {number} totalOrdinaryWageForYear - Total ordinary wage for the year so far\r\n * @returns {Object} Object containing employee and employer contributions\r\n */\r\nexport const calculateCpfContributions = (\r\n  salary,\r\n  employeeType = EMPLOYEE_TYPE.SINGAPOREAN,\r\n  age = 30,\r\n  additionalWage = 0,\r\n  totalOrdinaryWageForYear = 0\r\n) => {\r\n  try {\r\n    // Get applicable rates\r\n    const [employeeRate, employerRate] = getCpfRates(employeeType, age);\r\n    \r\n    // Apply wage ceiling for ordinary wage (monthly salary)\r\n    const cappedSalary = Math.min(salary, OW_CEILING);\r\n    \r\n    // Calculate ordinary wage contributions\r\n    const employeeContribution = Math.round(cappedSalary * employeeRate * 100) / 100;\r\n    const employerContribution = Math.round(cappedSalary * employerRate * 100) / 100;\r\n    \r\n    // Handle additional wage (e.g., bonus) if provided\r\n    let additionalEmployeeContribution = 0;\r\n    let additionalEmployerContribution = 0;\r\n    \r\n    if (additionalWage > 0) {\r\n      // Calculate remaining allowable additional wage for CPF\r\n      const yearToDateOW = totalOrdinaryWageForYear || (cappedSalary * 12);\r\n      const remainingAWCeiling = Math.max(0, AW_CEILING - yearToDateOW);\r\n      const cappedAdditionalWage = Math.min(additionalWage, remainingAWCeiling);\r\n      \r\n      // Calculate additional wage contributions\r\n      additionalEmployeeContribution = Math.round(cappedAdditionalWage * employeeRate * 100) / 100;\r\n      additionalEmployerContribution = Math.round(cappedAdditionalWage * employerRate * 100) / 100;\r\n    }\r\n    \r\n    // Total contributions\r\n    const totalEmployeeContribution = employeeContribution + additionalEmployeeContribution;\r\n    const totalEmployerContribution = employerContribution + additionalEmployerContribution;\r\n    const totalCpfContribution = totalEmployeeContribution + totalEmployerContribution;\r\n    \r\n    // Calculate take home pay\r\n    const takeHomePay = salary + additionalWage - totalEmployeeContribution;\r\n    \r\n    return {\r\n      employeeContribution: totalEmployeeContribution,\r\n      employerContribution: totalEmployerContribution,\r\n      totalContribution: totalCpfContribution,\r\n      takeHomePay,\r\n      // Include rate details for reference\r\n      rates: {\r\n        employeeRate,\r\n        employerRate\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Error calculating CPF contributions:', error);\r\n    return {\r\n      employeeContribution: 0,\r\n      employerContribution: 0,\r\n      totalContribution: 0,\r\n      takeHomePay: salary + additionalWage,\r\n      rates: {\r\n        employeeRate: 0,\r\n        employerRate: 0\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Estimate yearly CPF contributions based on monthly salary and bonus months\r\n * \r\n * @param {number} monthlySalary - Monthly salary\r\n * @param {string} employeeType - Type of employee (from EMPLOYEE_TYPE)\r\n * @param {number} age - Employee's age\r\n * @param {number} bonusMonths - Number of months for bonus\r\n * @returns {Object} Object containing yearly CPF contribution totals\r\n */\r\nexport const estimateYearlyCpfContributions = (\r\n  monthlySalary,\r\n  employeeType = EMPLOYEE_TYPE.SINGAPOREAN,\r\n  age = 30,\r\n  bonusMonths = 0\r\n) => {\r\n  // Calculate monthly CPF contribution\r\n  const monthlyContribution = calculateCpfContributions(\r\n    monthlySalary, \r\n    employeeType, \r\n    age\r\n  );\r\n  \r\n  // Calculate bonus contribution (if applicable)\r\n  let bonusContribution = { employeeContribution: 0, employerContribution: 0, totalContribution: 0 };\r\n  \r\n  if (bonusMonths > 0) {\r\n    const bonusSalary = monthlySalary * bonusMonths;\r\n    const yearToDateOW = Math.min(monthlySalary, OW_CEILING) * 12;\r\n    \r\n    bonusContribution = calculateCpfContributions(\r\n      0, // No ordinary wage\r\n      employeeType,\r\n      age,\r\n      bonusSalary,\r\n      yearToDateOW\r\n    );\r\n  }\r\n  \r\n  // Calculate yearly totals\r\n  const yearlyEmployeeContribution = (monthlyContribution.employeeContribution * 12) + \r\n    bonusContribution.employeeContribution;\r\n  \r\n  const yearlyEmployerContribution = (monthlyContribution.employerContribution * 12) + \r\n    bonusContribution.employerContribution;\r\n  \r\n  const yearlyTotalContribution = yearlyEmployeeContribution + yearlyEmployerContribution;\r\n  \r\n  return {\r\n    yearlyEmployeeContribution,\r\n    yearlyEmployerContribution,\r\n    yearlyTotalContribution,\r\n    monthlyDetails: monthlyContribution,\r\n    bonusDetails: bonusContribution\r\n  };\r\n};\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { \r\n  calculateCpfContributions, \r\n  estimateYearlyCpfContributions,\r\n  EMPLOYEE_TYPE \r\n} from '../services/calculations/cpf';\r\n\r\n/**\r\n * Custom hook for managing CPF-related calculations and state\r\n * \r\n * This hook provides CPF contribution calculations and management while\r\n * preventing render loops through careful state management and memoization.\r\n * \r\n * @param {Object} initialData - Initial financial data\r\n * @returns {Object} CPF state and utility functions\r\n */\r\nconst useCpfCalculator = (initialData = {}) => {\r\n  // Extract initial values with defaults\r\n  const {\r\n    salary = 0,\r\n    age = 30,\r\n    employeeType = EMPLOYEE_TYPE.SINGAPOREAN,\r\n    bonusMonths = 0,\r\n    annualBonusAmount = 0,\r\n  } = initialData;\r\n\r\n  // State management for input values\r\n  const [cpfInputs, setCpfInputs] = useState({\r\n    salary,\r\n    age,\r\n    employeeType,\r\n    bonusMonths,\r\n    annualBonusAmount\r\n  });\r\n\r\n  // Memoized CPF calculations to prevent unnecessary recalculations\r\n  const cpfResults = useMemo(() => {\r\n    const { salary, age, employeeType, bonusMonths, annualBonusAmount } = cpfInputs;\r\n    \r\n    // Calculate monthly CPF contributions\r\n    const monthlyCpf = calculateCpfContributions(\r\n      salary,\r\n      employeeType,\r\n      age\r\n    );\r\n    \r\n    // Calculate bonus CPF if applicable\r\n    let bonusCpf = { employeeContribution: 0, employerContribution: 0, totalContribution: 0 };\r\n    \r\n    if (annualBonusAmount > 0) {\r\n      const yearToDateOW = Math.min(salary, 6000) * 12;\r\n      bonusCpf = calculateCpfContributions(\r\n        0,\r\n        employeeType,\r\n        age,\r\n        annualBonusAmount,\r\n        yearToDateOW\r\n      );\r\n    } else if (bonusMonths > 0) {\r\n      // Use bonus months if specific bonus amount not provided\r\n      const bonusAmount = salary * bonusMonths;\r\n      const yearToDateOW = Math.min(salary, 6000) * 12;\r\n      \r\n      bonusCpf = calculateCpfContributions(\r\n        0, \r\n        employeeType, \r\n        age, \r\n        bonusAmount, \r\n        yearToDateOW\r\n      );\r\n    }\r\n    \r\n    // Calculate yearly estimates\r\n    const yearlyCpf = estimateYearlyCpfContributions(\r\n      salary,\r\n      employeeType,\r\n      age,\r\n      bonusMonths\r\n    );\r\n    \r\n    return {\r\n      monthly: monthlyCpf,\r\n      bonus: bonusCpf,\r\n      yearly: yearlyCpf,\r\n      takeHomePay: monthlyCpf.takeHomePay,\r\n      totalMonthlyContribution: monthlyCpf.totalContribution,\r\n      employeeContribution: monthlyCpf.employeeContribution,\r\n      employerContribution: monthlyCpf.employerContribution,\r\n      rates: monthlyCpf.rates\r\n    };\r\n  }, [cpfInputs]);\r\n\r\n  // Callback to update specific CPF input values\r\n  // Using callback to maintain reference stability\r\n  const updateCpfInput = useCallback((key, value) => {\r\n    if (typeof key === 'string' && key in cpfInputs) {\r\n      setCpfInputs(prev => ({\r\n        ...prev,\r\n        [key]: value\r\n      }));\r\n    } else if (typeof key === 'object') {\r\n      // Allow batch updates with an object\r\n      setCpfInputs(prev => ({\r\n        ...prev,\r\n        ...key\r\n      }));\r\n    }\r\n  }, [cpfInputs]);\r\n\r\n  // Helper to update salary (common operation)\r\n  const updateSalary = useCallback((newSalary) => {\r\n    updateCpfInput('salary', Number(newSalary));\r\n  }, [updateCpfInput]);\r\n\r\n  // Helper to update employee type\r\n  const updateEmployeeType = useCallback((newType) => {\r\n    if (Object.values(EMPLOYEE_TYPE).includes(newType)) {\r\n      updateCpfInput('employeeType', newType);\r\n    } else {\r\n      console.error(`Invalid employee type: ${newType}`);\r\n    }\r\n  }, [updateCpfInput]);\r\n\r\n  // Reset to initial values\r\n  const resetToDefaults = useCallback(() => {\r\n    setCpfInputs({\r\n      salary: initialData.salary || 0,\r\n      age: initialData.age || 30,\r\n      employeeType: initialData.employeeType || EMPLOYEE_TYPE.SINGAPOREAN,\r\n      bonusMonths: initialData.bonusMonths || 0,\r\n      annualBonusAmount: initialData.annualBonusAmount || 0\r\n    });\r\n  }, [initialData]);\r\n\r\n  // Effect to sync with external data changes\r\n  // Only runs when initialData reference changes to prevent loops\r\n  useEffect(() => {\r\n    if (initialData && typeof initialData === 'object') {\r\n      const updates = {};\r\n      let hasUpdates = false;\r\n\r\n      // Only update values that are provided and different\r\n      if ('salary' in initialData && initialData.salary !== cpfInputs.salary) {\r\n        updates.salary = initialData.salary;\r\n        hasUpdates = true;\r\n      }\r\n      \r\n      if ('age' in initialData && initialData.age !== cpfInputs.age) {\r\n        updates.age = initialData.age;\r\n        hasUpdates = true;\r\n      }\r\n      \r\n      if ('employeeType' in initialData && initialData.employeeType !== cpfInputs.employeeType) {\r\n        updates.employeeType = initialData.employeeType;\r\n        hasUpdates = true;\r\n      }\r\n      \r\n      if ('bonusMonths' in initialData && initialData.bonusMonths !== cpfInputs.bonusMonths) {\r\n        updates.bonusMonths = initialData.bonusMonths;\r\n        hasUpdates = true;\r\n      }\r\n      \r\n      if ('annualBonusAmount' in initialData && initialData.annualBonusAmount !== cpfInputs.annualBonusAmount) {\r\n        updates.annualBonusAmount = initialData.annualBonusAmount;\r\n        hasUpdates = true;\r\n      }\r\n\r\n      // Only update state if there are actual changes\r\n      if (hasUpdates) {\r\n        setCpfInputs(prev => ({\r\n          ...prev,\r\n          ...updates\r\n        }));\r\n      }\r\n    }\r\n  }, [initialData]);\r\n\r\n  return {\r\n    // Current state\r\n    cpfInputs,\r\n    cpfResults,\r\n    \r\n    // Getters for common values\r\n    employeeContribution: cpfResults.employeeContribution,\r\n    employerContribution: cpfResults.employerContribution,\r\n    totalContribution: cpfResults.totalMonthlyContribution,\r\n    takeHomePay: cpfResults.takeHomePay,\r\n    \r\n    // Monthly, bonus and yearly breakdowns\r\n    monthlyCpf: cpfResults.monthly,\r\n    bonusCpf: cpfResults.bonus,\r\n    yearlyCpf: cpfResults.yearly,\r\n    \r\n    // Rate information for display\r\n    employeeRate: cpfResults.rates.employeeRate,\r\n    employerRate: cpfResults.rates.employerRate,\r\n    \r\n    // Update functions\r\n    updateCpfInput,\r\n    updateSalary,\r\n    updateEmployeeType,\r\n    resetToDefaults,\r\n    \r\n    // Constants for reference\r\n    EMPLOYEE_TYPE,\r\n  };\r\n};\r\n\r\nexport default useCpfCalculator;","import React, { useState } from 'react';\r\nimport useCpfCalculator from '../hooks/useCpfCalculator';\r\n\r\n/**\r\n * CPF Calculator Component\r\n * \r\n * This component provides a user interface for calculating and displaying\r\n * CPF contributions based on salary and other parameters.\r\n */\r\nconst CpfCalculator = ({ initialData = {}, onChange }) => {\r\n  // Initialize with provided data or defaults\r\n  const {\r\n    cpfInputs,\r\n    cpfResults,\r\n    monthlyCpf,\r\n    bonusCpf,\r\n    yearlyCpf,\r\n    employeeRate,\r\n    employerRate,\r\n    updateCpfInput,\r\n    updateSalary,\r\n    updateEmployeeType,\r\n    EMPLOYEE_TYPE\r\n  } = useCpfCalculator(initialData);\r\n\r\n  // Local UI state\r\n  const [showAdvanced, setShowAdvanced] = useState(false);\r\n\r\n  // Handler for salary input change\r\n  const handleSalaryChange = (e) => {\r\n    const value = parseFloat(e.target.value) || 0;\r\n    updateSalary(value);\r\n    \r\n    // Notify parent component if needed\r\n    if (onChange && typeof onChange === 'function') {\r\n      onChange({\r\n        ...cpfInputs,\r\n        salary: value\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handler for age input change\r\n  const handleAgeChange = (e) => {\r\n    const value = parseInt(e.target.value) || 0;\r\n    updateCpfInput('age', value);\r\n    \r\n    // Notify parent component if needed\r\n    if (onChange && typeof onChange === 'function') {\r\n      onChange({\r\n        ...cpfInputs,\r\n        age: value\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handler for employee type change\r\n  const handleEmployeeTypeChange = (e) => {\r\n    const value = e.target.value;\r\n    updateEmployeeType(value);\r\n    \r\n    // Notify parent component if needed\r\n    if (onChange && typeof onChange === 'function') {\r\n      onChange({\r\n        ...cpfInputs,\r\n        employeeType: value\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handler for bonus months change\r\n  const handleBonusMonthsChange = (e) => {\r\n    const value = parseFloat(e.target.value) || 0;\r\n    updateCpfInput('bonusMonths', value);\r\n    \r\n    // Notify parent component if needed\r\n    if (onChange && typeof onChange === 'function') {\r\n      onChange({\r\n        ...cpfInputs,\r\n        bonusMonths: value\r\n      });\r\n    }\r\n  };\r\n\r\n  // Format currency values for display\r\n  const formatCurrency = (value) => {\r\n    return new Intl.NumberFormat('en-SG', {\r\n      style: 'currency',\r\n      currency: 'SGD',\r\n      minimumFractionDigits: 2\r\n    }).format(value);\r\n  };\r\n\r\n  // Format percentage values for display\r\n  const formatPercentage = (value) => {\r\n    return `${(value * 100).toFixed(1)}%`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-4 text-gray-800\">\r\n        CPF Calculator\r\n      </h2>\r\n      \r\n      {/* Input section */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Monthly Salary\r\n          </label>\r\n          <div className=\"relative rounded-md shadow-sm\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <span className=\"text-gray-500 sm:text-sm\">S$</span>\r\n            </div>\r\n            <input\r\n              type=\"number\"\r\n              value={cpfInputs.salary}\r\n              onChange={handleSalaryChange}\r\n              className=\"focus:ring-green-500 focus:border-green-500 block w-full pl-10 pr-3 py-2 sm:text-sm border-gray-300 rounded-md bg-white text-gray-900\"\r\n              placeholder=\"0.00\"\r\n              min=\"0\"\r\n              step=\"50\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Age\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={cpfInputs.age}\r\n            onChange={handleAgeChange}\r\n            className=\"focus:ring-green-500 focus:border-green-500 block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md bg-white text-gray-900\"\r\n            placeholder=\"30\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Employment Status\r\n          </label>\r\n          <select\r\n            value={cpfInputs.employeeType}\r\n            onChange={handleEmployeeTypeChange}\r\n            className=\"focus:ring-green-500 focus:border-green-500 block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md bg-white text-gray-900\"\r\n          >\r\n            <option value={EMPLOYEE_TYPE.SINGAPOREAN}>Singaporean Citizen</option>\r\n            <option value={EMPLOYEE_TYPE.PR_FIRST_YEAR}>PR (1st Year)</option>\r\n            <option value={EMPLOYEE_TYPE.PR_SECOND_YEAR}>PR (2nd Year)</option>\r\n            <option value={EMPLOYEE_TYPE.PR_THIRD_YEAR_ONWARDS}>PR (3rd Year+)</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Annual Bonus (Months)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={cpfInputs.bonusMonths}\r\n            onChange={handleBonusMonthsChange}\r\n            className=\"focus:ring-green-500 focus:border-green-500 block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md bg-white text-gray-900\"\r\n            placeholder=\"0\"\r\n            min=\"0\"\r\n            step=\"0.5\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Results section */}\r\n      <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\r\n        <h3 className=\"font-medium text-gray-900 mb-3\">\r\n          Monthly CPF Contributions\r\n        </h3>\r\n        \r\n        <div className=\"grid grid-cols-2 gap-y-2 text-sm\">\r\n          <div className=\"text-gray-600\">Your Contribution:</div>\r\n          <div className=\"text-gray-900 font-medium\">\r\n            {formatCurrency(monthlyCpf.employeeContribution)} ({formatPercentage(employeeRate)})\r\n          </div>\r\n          \r\n          <div className=\"text-gray-600\">Employer Contribution:</div>\r\n          <div className=\"text-gray-900 font-medium\">\r\n            {formatCurrency(monthlyCpf.employerContribution)} ({formatPercentage(employerRate)})\r\n          </div>\r\n          \r\n          <div className=\"text-gray-600\">Total CPF Contribution:</div>\r\n          <div className=\"text-gray-900 font-medium\">\r\n            {formatCurrency(monthlyCpf.totalContribution)}\r\n          </div>\r\n          \r\n          <div className=\"text-gray-600\">Take-Home Pay:</div>\r\n          <div className=\"text-gray-900 font-medium\">\r\n            {formatCurrency(monthlyCpf.takeHomePay)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Toggle for advanced details */}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setShowAdvanced(!showAdvanced)}\r\n        className=\"text-green-600 hover:text-green-800 text-sm font-medium flex items-center mb-4\"\r\n      >\r\n        {showAdvanced ? 'Hide' : 'Show'} Advanced Details\r\n        <svg \r\n          className={`ml-1 h-4 w-4 transition-transform ${showAdvanced ? 'transform rotate-180' : ''}`}\r\n          fill=\"none\" \r\n          viewBox=\"0 0 24 24\" \r\n          stroke=\"currentColor\"\r\n        >\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n        </svg>\r\n      </button>\r\n      \r\n      {/* Advanced details section */}\r\n      {showAdvanced && (\r\n        <>\r\n          {/* Yearly estimates */}\r\n          <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\r\n            <h3 className=\"font-medium text-gray-900 mb-3\">\r\n              Yearly Estimates\r\n            </h3>\r\n            \r\n            <div className=\"grid grid-cols-2 gap-y-2 text-sm\">\r\n              <div className=\"text-gray-600\">Your Yearly Contribution:</div>\r\n              <div className=\"text-gray-900 font-medium\">\r\n                {formatCurrency(yearlyCpf.yearlyEmployeeContribution)}\r\n              </div>\r\n              \r\n              <div className=\"text-gray-600\">Employer Yearly Contribution:</div>\r\n              <div className=\"text-gray-900 font-medium\">\r\n                {formatCurrency(yearlyCpf.yearlyEmployerContribution)}\r\n              </div>\r\n              \r\n              <div className=\"text-gray-600\">Total Yearly CPF:</div>\r\n              <div className=\"text-gray-900 font-medium\">\r\n                {formatCurrency(yearlyCpf.yearlyTotalContribution)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Bonus details (if applicable) */}\r\n          {cpfInputs.bonusMonths > 0 && (\r\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\r\n              <h3 className=\"font-medium text-gray-900 mb-3\">\r\n                Bonus CPF Contributions\r\n              </h3>\r\n              \r\n              <div className=\"grid grid-cols-2 gap-y-2 text-sm\">\r\n                <div className=\"text-gray-600\">Bonus Amount:</div>\r\n                <div className=\"text-gray-900 font-medium\">\r\n                  {formatCurrency(cpfInputs.salary * cpfInputs.bonusMonths)}\r\n                </div>\r\n                \r\n                <div className=\"text-gray-600\">Your Contribution:</div>\r\n                <div className=\"text-gray-900 font-medium\">\r\n                  {formatCurrency(bonusCpf.employeeContribution)}\r\n                </div>\r\n                \r\n                <div className=\"text-gray-600\">Employer Contribution:</div>\r\n                <div className=\"text-gray-900 font-medium\">\r\n                  {formatCurrency(bonusCpf.employerContribution)}\r\n                </div>\r\n                \r\n                <div className=\"text-gray-600\">Total Bonus CPF:</div>\r\n                <div className=\"text-gray-900 font-medium\">\r\n                  {formatCurrency(bonusCpf.totalContribution)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* CPF allocation information */}\r\n          <div className=\"bg-gray-50 rounded-lg p-4\">\r\n            <h3 className=\"font-medium text-gray-900 mb-3\">\r\n              CPF Allocation Information\r\n            </h3>\r\n            \r\n            <p className=\"text-xs text-gray-500 mb-2\">\r\n              Below age 55, CPF contributions are typically allocated to these accounts:\r\n            </p>\r\n            \r\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\r\n              <div className=\"bg-blue-100 p-2 rounded\">\r\n                <div className=\"font-medium text-blue-800\">Ordinary Account</div>\r\n                <div className=\"text-blue-600\">\r\n                  For housing, insurance, investment and education\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-green-100 p-2 rounded\">\r\n                <div className=\"font-medium text-green-800\">\r\n                  Special Account\r\n                </div>\r\n                <div className=\"text-green-600\">\r\n                  For retirement and investment in retirement-related financial products\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-purple-100 p-2 rounded\">\r\n                <div className=\"font-medium text-purple-800\">\r\n                  MediSave Account\r\n                </div>\r\n                <div className=\"text-purple-600\">\r\n                  For hospitalization expenses and approved medical insurance\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      \r\n      {/* Disclaimer */}\r\n      <div className=\"mt-4 text-xs text-gray-500\">\r\n        <p>\r\n          <strong>Disclaimer:</strong> This calculator provides estimates based on standard CPF \r\n          contribution rates. For the most accurate information, please refer to the \r\n          official CPF Board website.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CpfCalculator;","import { useState, useEffect, useCallback } from \"react\";\r\n\r\n/**\r\n * useUIPreferences hook\r\n * Manages UI preferences including theme, chart colors, and display settings\r\n * \r\n * @returns {Object} UI preferences and functions to update them\r\n */\r\nconst useUIPreferences = () => {\r\n  // Initialize from localStorage if available, otherwise use defaults\r\n  const [theme, setTheme] = useState(() => {\r\n    const savedTheme = localStorage.getItem(\"uiTheme\");\r\n    return savedTheme || \"light\";\r\n  });\r\n\r\n  const [chartColors, setChartColors] = useState(() => {\r\n    const savedColors = localStorage.getItem(\"chartColors\");\r\n    return savedColors \r\n      ? JSON.parse(savedColors) \r\n      : {\r\n          primary: \"#0088FE\",\r\n          secondary: \"#00C49F\",\r\n          tertiary: \"#FFBB28\",\r\n          quaternary: \"#FF8042\",\r\n          danger: \"#FF0000\",\r\n          success: \"#00C853\",\r\n          warning: \"#FFB300\"\r\n        };\r\n  });\r\n\r\n  const [compactMode, setCompactMode] = useState(() => {\r\n    const savedMode = localStorage.getItem(\"compactMode\");\r\n    return savedMode === \"true\";\r\n  });\r\n\r\n  const [currencyFormat, setCurrencyFormat] = useState(() => {\r\n    const savedFormat = localStorage.getItem(\"currencyFormat\");\r\n    return savedFormat || \"USD\";\r\n  });\r\n\r\n  const [dateFormat, setDateFormat] = useState(() => {\r\n    const savedFormat = localStorage.getItem(\"dateFormat\");\r\n    return savedFormat || \"MMM yyyy\"; // Default format (e.g., \"Jan 2023\")\r\n  });\r\n\r\n  // Update theme\r\n  const toggleTheme = useCallback(() => {\r\n    setTheme(prevTheme => {\r\n      const newTheme = prevTheme === \"light\" ? \"dark\" : \"light\";\r\n      localStorage.setItem(\"uiTheme\", newTheme);\r\n      return newTheme;\r\n    });\r\n  }, []);\r\n\r\n  // Update specific chart color\r\n  const updateChartColor = useCallback((colorKey, newColor) => {\r\n    setChartColors(prevColors => {\r\n      const updatedColors = { ...prevColors, [colorKey]: newColor };\r\n      localStorage.setItem(\"chartColors\", JSON.stringify(updatedColors));\r\n      return updatedColors;\r\n    });\r\n  }, []);\r\n\r\n  // Reset chart colors to defaults\r\n  const resetChartColors = useCallback(() => {\r\n    const defaultColors = {\r\n      primary: \"#0088FE\",\r\n      secondary: \"#00C49F\",\r\n      tertiary: \"#FFBB28\",\r\n      quaternary: \"#FF8042\",\r\n      danger: \"#FF0000\",\r\n      success: \"#00C853\",\r\n      warning: \"#FFB300\"\r\n    };\r\n    \r\n    setChartColors(defaultColors);\r\n    localStorage.setItem(\"chartColors\", JSON.stringify(defaultColors));\r\n  }, []);\r\n\r\n  // Toggle compact mode\r\n  const toggleCompactMode = useCallback(() => {\r\n    setCompactMode(prev => {\r\n      const newMode = !prev;\r\n      localStorage.setItem(\"compactMode\", String(newMode));\r\n      return newMode;\r\n    });\r\n  }, []);\r\n\r\n  // Update currency format\r\n  const updateCurrencyFormat = useCallback((format) => {\r\n    setCurrencyFormat(format);\r\n    localStorage.setItem(\"currencyFormat\", format);\r\n  }, []);\r\n\r\n  // Update date format\r\n  const updateDateFormat = useCallback((format) => {\r\n    setDateFormat(format);\r\n    localStorage.setItem(\"dateFormat\", format);\r\n  }, []);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    \r\n    // Apply additional CSS variables for theme colors\r\n    if (theme === 'dark') {\r\n      document.documentElement.style.setProperty('--bg-primary', '#121212');\r\n      document.documentElement.style.setProperty('--bg-secondary', '#1e1e1e');\r\n      document.documentElement.style.setProperty('--text-primary', '#ffffff');\r\n      document.documentElement.style.setProperty('--text-secondary', '#b3b3b3');\r\n    } else {\r\n      document.documentElement.style.setProperty('--bg-primary', '#ffffff');\r\n      document.documentElement.style.setProperty('--bg-secondary', '#f5f5f5');\r\n      document.documentElement.style.setProperty('--text-primary', '#333333');\r\n      document.documentElement.style.setProperty('--text-secondary', '#666666');\r\n    }\r\n  }, [theme]);\r\n\r\n  // Get color palette for charts based on current theme and preferences\r\n  const getChartColorPalette = useCallback(() => {\r\n    // Create an array of colors for charts\r\n    const baseColors = [\r\n      chartColors.primary,\r\n      chartColors.secondary,\r\n      chartColors.tertiary,\r\n      chartColors.quaternary,\r\n      // Add additional colors based on theme\r\n      theme === 'dark' ? '#9370DB' : '#8884d8',\r\n      theme === 'dark' ? '#20B2AA' : '#82ca9d', \r\n      theme === 'dark' ? '#CD853F' : '#ffc658',\r\n      theme === 'dark' ? '#4682B4' : '#8dd1e1'\r\n    ];\r\n    \r\n    return baseColors;\r\n  }, [theme, chartColors]);\r\n\r\n  // Format currency based on current preferences\r\n  const formatCurrency = useCallback((amount) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currencyFormat,\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount);\r\n  }, [currencyFormat]);\r\n\r\n  return {\r\n    theme,\r\n    chartColors,\r\n    compactMode,\r\n    currencyFormat,\r\n    dateFormat,\r\n    toggleTheme,\r\n    updateChartColor,\r\n    resetChartColors,\r\n    toggleCompactMode,\r\n    updateCurrencyFormat,\r\n    updateDateFormat,\r\n    getChartColorPalette,\r\n    formatCurrency,\r\n    isDarkMode: theme === 'dark'\r\n  };\r\n};\r\n\r\nexport default useUIPreferences;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from \"recharts\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\nimport useUIPreferences from \"../../../hooks/useUIPreferences\";\r\n\r\n/**\r\n * CpfGrowthChart Component\r\n * Displays a chart showing the growth of CPF savings over time\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @param {Object} props.cpfMilestone - Month when CPF milestone is reached (optional)\r\n * @returns {JSX.Element}\r\n */\r\nconst CpfGrowthChart = ({ chartData, cpfMilestone }) => {\r\n  const { getChartColorPalette } = useUIPreferences();\r\n  const colors = getChartColorPalette();\r\n  \r\n  // Use the secondary color from the palette for CPF\r\n  const cpfColor = colors[1]; // Using the secondary color from the palette\r\n  \r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow\">\r\n      <div className=\"bg-green-600 px-4 py-3\">\r\n        <h2 className=\"text-lg font-semibold text-white\">Projected CPF Growth</h2>\r\n      </div>\r\n      <div className=\"p-4\">\r\n        <div className=\"h-80\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <AreaChart\r\n              data={chartData}\r\n              margin={{\r\n                top: 10,\r\n                right: 10,\r\n                left: 0,\r\n                bottom: 20,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis\r\n                dataKey=\"date\"\r\n                angle={-45}\r\n                textAnchor=\"end\"\r\n                height={60}\r\n                tick={{ fontSize: 12, fill: '#374151' }}\r\n              />\r\n              <YAxis\r\n                tickFormatter={(value) => formatCurrency(value)}\r\n                width={70}\r\n                tick={{ fill: '#374151' }}\r\n              />\r\n              <Tooltip \r\n                formatter={(value) => formatCurrency(value)}\r\n                contentStyle={{ \r\n                  backgroundColor: '#ffffff',\r\n                  color: '#374151',\r\n                  border: '1px solid #e5e7eb'\r\n                }}\r\n                labelStyle={{\r\n                  color: '#374151'\r\n                }}\r\n              />\r\n              <Legend\r\n                wrapperStyle={{\r\n                  color: '#374151'\r\n                }}\r\n              />\r\n              <Area\r\n                type=\"monotone\"\r\n                dataKey=\"cpfBalance\"\r\n                name=\"CPF Balance\"\r\n                stroke={cpfColor}\r\n                fill={cpfColor}\r\n                fillOpacity={0.3}\r\n                activeDot={{ r: 6 }}\r\n              />\r\n              {cpfMilestone && (\r\n                <ReferenceLine\r\n                  x={cpfMilestone.date}\r\n                  stroke=\"green\"\r\n                  strokeDasharray=\"3 3\"\r\n                  label={{\r\n                    value: `CPF ${formatCurrency(cpfMilestone.amount)}`,\r\n                    position: \"top\",\r\n                    fill: 'green',\r\n                  }}\r\n                />\r\n              )}\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div className=\"mt-4 bg-green-50 p-3 rounded-lg\">\r\n          <h3 className=\"font-medium text-green-800 mb-2\">\r\n            CPF Growth\r\n          </h3>\r\n          <p className=\"text-sm text-green-600\">\r\n            {cpfMilestone\r\n              ? `Your CPF savings are projected to reach ${formatCurrency(cpfMilestone.amount)} by ${cpfMilestone.date}`\r\n              : `Your CPF savings will continue to grow with regular contributions and interest`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCpfGrowthChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  cpfMilestone: PropTypes.object\r\n};\r\n\r\nexport default CpfGrowthChart;","import React, { useState, useEffect } from 'react';\r\nimport { useFinancial } from '../context/FinancialContext';\r\nimport CpfCalculator from '../components/CpfCalculator';\r\nimport { EMPLOYEE_TYPE } from '../services/calculations/cpf';\r\nimport useUIPreferences from '../hooks/useUIPreferences';\r\nimport CpfGrowthChart from './dashboard/charts/CpfGrowthChart';\r\n\r\n/**\r\n * CPF Dashboard Tab Component\r\n * \r\n * This component integrates the CPF calculator with the rest of the\r\n * financial dashboard application.\r\n */\r\nconst CpfDashboard = () => {\r\n  const { \r\n    financialData, \r\n    updateFinancialData,\r\n    calculateAge\r\n  } = useFinancial();\r\n  \r\n  const { getChartColorPalette } = useUIPreferences();\r\n  \r\n  // Local state to track changes before committing to global state\r\n  const [localCpfData, setLocalCpfData] = useState({\r\n    salary: financialData.income?.currentSalary || 0,\r\n    age: calculateAge() || 30,\r\n    employeeType: EMPLOYEE_TYPE.SINGAPOREAN,\r\n    bonusMonths: financialData.yearlyBonuses?.length || 0\r\n  });\r\n\r\n  // Generate projection data for the CPF growth chart\r\n  const [projectionData, setProjectionData] = useState([]);\r\n  \r\n  // Effect to update local state when financial data changes\r\n  useEffect(() => {\r\n    if (financialData) {\r\n      setLocalCpfData(prevData => ({\r\n        ...prevData,\r\n        salary: financialData.income?.currentSalary || prevData.salary,\r\n        age: calculateAge() || prevData.age,\r\n        bonusMonths: financialData.yearlyBonuses?.length || prevData.bonusMonths\r\n      }));\r\n      \r\n      // Generate projection data for the chart\r\n      generateProjectionData();\r\n    }\r\n  }, [financialData, calculateAge]);\r\n\r\n  // Generate projection data for the CPF growth chart\r\n  const generateProjectionData = () => {\r\n    const currentCpfBalance = financialData.personalInfo?.currentCpfBalance || 0;\r\n    const monthlyContribution = (\r\n      (financialData.income?.currentSalary * financialData.income?.cpfRate / 100) +\r\n      (financialData.income?.currentSalary * financialData.income?.employerCpfRate / 100)\r\n    );\r\n    const annualInterestRate = 0.04; // 4% average annual interest rate\r\n    \r\n    const projectionYears = 10;\r\n    const data = [];\r\n    \r\n    let projectedBalance = currentCpfBalance;\r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    const currentMonth = currentDate.getMonth();\r\n    \r\n    // Generate projection points\r\n    for (let year = 0; year <= projectionYears; year++) {\r\n      for (let month = 0; month < 12; month++) {\r\n        // Skip past months in the current year\r\n        if (year === 0 && month < currentMonth) continue;\r\n        \r\n        // Add monthly contribution\r\n        projectedBalance += monthlyContribution;\r\n        \r\n        // Add monthly interest (compounded)\r\n        projectedBalance *= (1 + (annualInterestRate / 12));\r\n        \r\n        // Add to data array (one point per quarter to keep chart clean)\r\n        if (month % 3 === 0) {\r\n          const date = new Date(currentYear + year, month, 1);\r\n          const formattedDate = date.toLocaleDateString('en-US', { \r\n            year: 'numeric', \r\n            month: 'short'\r\n          });\r\n          \r\n          data.push({\r\n            date: formattedDate,\r\n            cpfBalance: Math.round(projectedBalance)\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    setProjectionData(data);\r\n  };\r\n  \r\n  // Handle changes in the calculator\r\n  const handleCpfCalculatorChange = (updatedData) => {\r\n    setLocalCpfData(updatedData);\r\n  };\r\n  \r\n  // Save changes to global financial context\r\n  const handleSaveChanges = () => {\r\n    // Update income data\r\n    updateFinancialData({\r\n      income: {\r\n        ...financialData.income,\r\n        currentSalary: localCpfData.salary,\r\n        cpfRate: localCpfData.employeeRate * 100 || financialData.income?.cpfRate,\r\n        employerCpfRate: localCpfData.employerRate * 100 || financialData.income?.employerCpfRate,\r\n      }\r\n    });\r\n    \r\n    // Regenerate projection data with the new values\r\n    generateProjectionData();\r\n  };\r\n\r\n  // Calculate projected CPF at age 55\r\n  const calculateProjectedCpfAt55 = (currentCpfBalance, yearlyContribution, currentAge) => {\r\n    // Number of years until age 55\r\n    const yearsToAge55 = Math.max(0, 55 - currentAge);\r\n    \r\n    // Simplified annual growth rate (includes both contributions and interest)\r\n    const annualInterestRate = 0.04; // 4% average annual interest rate\r\n    \r\n    let projectedBalance = currentCpfBalance;\r\n    \r\n    // Simple compound interest calculation with annual contributions\r\n    for (let i = 0; i < yearsToAge55; i++) {\r\n      // Add yearly contribution\r\n      projectedBalance += yearlyContribution;\r\n      \r\n      // Add interest\r\n      projectedBalance *= (1 + annualInterestRate);\r\n    }\r\n    \r\n    return Math.round(projectedBalance);\r\n  };\r\n  \r\n  // Format currency \r\n  const formatCurrency = (value) => {\r\n    return new Intl.NumberFormat('en-SG', {\r\n      style: 'currency',\r\n      currency: 'SGD',\r\n      minimumFractionDigits: 2\r\n    }).format(value);\r\n  };\r\n  \r\n  // Define CPF milestone for chart\r\n  const cpfMilestone = {\r\n    date: new Date(new Date().getFullYear() + 5, 0, 1).toLocaleDateString('en-US', { \r\n      year: 'numeric', \r\n      month: 'short'\r\n    }),\r\n    amount: 100000\r\n  };\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"text-2xl font-bold text-gray-900\">\r\n          CPF Calculator & Analysis\r\n        </h2>\r\n        \r\n        {/* Only show save button if there are changes */}\r\n        {(localCpfData.salary !== financialData.income?.currentSalary) && (\r\n          <button\r\n            onClick={handleSaveChanges}\r\n            className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n          >\r\n            Save Changes\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      <p className=\"text-gray-600\">\r\n        Calculate your CPF contributions based on your salary and personal details.\r\n        Changes made here will update your financial projections.\r\n      </p>\r\n      \r\n      {/* CPF Calculator Component */}\r\n      <CpfCalculator \r\n        initialData={localCpfData}\r\n        onChange={handleCpfCalculatorChange}\r\n      />\r\n      \r\n      {/* CPF Impact Analysis */}\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">\r\n          CPF Impact Analysis\r\n        </h3>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          {/* CPF Growth Projection */}\r\n          <div className=\"bg-gray-50 rounded-lg p-4\">\r\n            <CpfGrowthChart \r\n              chartData={projectionData}\r\n              cpfMilestone={cpfMilestone}\r\n            />\r\n          </div>\r\n          \r\n          {/* Retirement Readiness */}\r\n          <div className=\"bg-gray-50 rounded-lg p-4\">\r\n            <h4 className=\"font-medium text-gray-900 mb-3\">\r\n              Retirement Readiness\r\n            </h4>\r\n            \r\n            <p className=\"text-gray-600 text-sm mb-4\">\r\n              Evaluate how your current CPF savings and contribution rate\r\n              align with your retirement goals.\r\n            </p>\r\n            \r\n            {/* Retirement readiness indicators */}\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-600\">\r\n                  Current CPF Balance\r\n                </span>\r\n                <span className=\"font-medium text-gray-900\">\r\n                  {formatCurrency(financialData.personalInfo?.currentCpfBalance || 0)}\r\n                </span>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-600\">\r\n                  Yearly CPF Contribution\r\n                </span>\r\n                <span className=\"font-medium text-gray-900\">\r\n                  {formatCurrency((\r\n                    (financialData.income?.currentSalary * financialData.income?.cpfRate / 100) +\r\n                    (financialData.income?.currentSalary * financialData.income?.employerCpfRate / 100)\r\n                  ) * 12)}\r\n                </span>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-600\">\r\n                  Projected at Age 55\r\n                </span>\r\n                <span className=\"font-medium text-gray-900\">\r\n                  {formatCurrency(calculateProjectedCpfAt55(\r\n                    financialData.personalInfo?.currentCpfBalance || 0,\r\n                    (financialData.income?.currentSalary * financialData.income?.cpfRate / 100) +\r\n                    (financialData.income?.currentSalary * financialData.income?.employerCpfRate / 100) * 12,\r\n                    calculateAge() || 30\r\n                  ))}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* CPF Tips and Information */}\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">\r\n          CPF Tips & Information\r\n        </h3>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div className=\"border border-gray-200 rounded-lg p-4\">\r\n            <h4 className=\"font-medium text-gray-900 mb-2\">\r\n              CPF Interest Rates\r\n            </h4>\r\n            <ul className=\"text-sm text-gray-600 space-y-1\">\r\n              <li>Ordinary Account: Up to 3.5% p.a.</li>\r\n              <li>Special Account: Up to 5% p.a.</li>\r\n              <li>MediSave Account: Up to 5% p.a.</li>\r\n              <li>Retirement Account: Up to 5% p.a.</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"border border-gray-200 rounded-lg p-4\">\r\n            <h4 className=\"font-medium text-gray-900 mb-2\">\r\n              Maximizing CPF\r\n            </h4>\r\n            <ul className=\"text-sm text-gray-600 space-y-1\">\r\n              <li>Consider voluntary contributions</li>\r\n              <li>Transfer OA to SA for higher interest</li>\r\n              <li>Use CPF for property wisely</li>\r\n              <li>Consider CPF investment options</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"border border-gray-200 rounded-lg p-4\">\r\n            <h4 className=\"font-medium text-gray-900 mb-2\">\r\n              Important Schemes\r\n            </h4>\r\n            <ul className=\"text-sm text-gray-600 space-y-1\">\r\n              <li>Retirement Sum Scheme</li>\r\n              <li>CPF LIFE</li>\r\n              <li>Home Protection Scheme</li>\r\n              <li>MediShield Life</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CpfDashboard;","import React, { useContext, useState } from \"react\";\r\nimport { FinancialContext } from \"../context/FinancialContext\";\r\nimport ExpenseBreakdown from \"../components/dashboard/ExpenseBreakdown\";\r\nimport { \r\n  NetWorthChart, \r\n  SavingsGrowthChart, \r\n  CashFlowChart \r\n} from \"../components/dashboard/charts\";\r\nimport Card from \"../components/common/Card\";\r\nimport { formatCurrency, formatPercent } from \"../services/formatters/currencyFormatters\";\r\nimport CpfDashboard from \"../components/CpfDashboard\";\r\n\r\n/**\r\n * Dashboard Page Component\r\n * Main financial dashboard showing financial summary, charts, and projections\r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst Dashboard = () => {\r\n  const {\r\n    financialData,\r\n    updateFinancialData,\r\n    updateProjectionSettings,\r\n    totalExpenses,\r\n    calculateAge,\r\n    getMonthName,\r\n    formatDate,\r\n  } = useContext(FinancialContext);\r\n\r\n  const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n  // State for projection rows to display\r\n  const [rowsToDisplay, setRowsToDisplay] = useState(\r\n    financialData.projectionSettings?.rowsToDisplay || 36\r\n  );\r\n\r\n  // Handle changing the number of rows to display\r\n  const handleRowsToDisplayChange = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    setRowsToDisplay(value);\r\n    updateProjectionSettings({\r\n      rowsToDisplay: value,\r\n    });\r\n  };\r\n\r\n  // Calculate financial projection\r\n  const calculateProjection = () => {\r\n    const projection = [];\r\n\r\n    // Extract values from context\r\n    const { personalInfo, income, expenses, yearlyBonuses } = financialData;\r\n\r\n    // Initial values\r\n    let currentSavings = personalInfo.currentSavings;\r\n    let loanRemaining = personalInfo.remainingLoan;\r\n    let cpfBalance = personalInfo.currentCpfBalance || 0; // Use user-provided CPF balance\r\n    const birthYear = personalInfo.birthday.year;\r\n    const birthMonth = personalInfo.birthday.month;\r\n\r\n    // Parameters\r\n    let currentSalary = income.currentSalary;\r\n    const cpfRate = income.cpfRate / 100;\r\n    const employerCpfRate = income.employerCpfRate / 100;\r\n    const monthlyExpenses = totalExpenses;\r\n    const loanPayment = personalInfo.monthlyRepayment;\r\n    const annualInterestRate = personalInfo.interestRate / 100;\r\n    const monthlyInterestRate = annualInterestRate / 12;\r\n\r\n    // Calculate months\r\n    let startMonth = personalInfo.projectionStart.month;\r\n    let startYear = personalInfo.projectionStart.year;\r\n\r\n    // Get salary adjustments if available, or create from legacy data\r\n    const salaryAdjustments = income.salaryAdjustments || [];\r\n\r\n    // If using legacy format, convert to array format for compatibility\r\n    if (!income.salaryAdjustments && income.futureSalary) {\r\n      salaryAdjustments.push({\r\n        month: income.salaryAdjustmentMonth,\r\n        year: income.salaryAdjustmentYear,\r\n        newSalary: income.futureSalary,\r\n      });\r\n    }\r\n\r\n    // Sort salary adjustments by date\r\n    const sortedAdjustments = [...salaryAdjustments].sort((a, b) => {\r\n      if (a.year !== b.year) return a.year - b.year;\r\n      return a.month - b.month;\r\n    });\r\n\r\n    // Get yearly bonuses\r\n    const sortedBonuses = yearlyBonuses\r\n      ? [...yearlyBonuses].sort((a, b) => {\r\n          if (a.year !== b.year) return a.year - b.year;\r\n          return a.month - b.month;\r\n        })\r\n      : [];\r\n\r\n    // Track milestones\r\n    let loanPaidOffMonth = null;\r\n    let savingsGoalReachedMonth = null; // This will now track only cash savings (excluding CPF)\r\n\r\n    // Generate projection for 60 months (5 years)\r\n    for (let month = 0; month < 60; month++) {\r\n      const currentMonth = ((startMonth + month - 1) % 12) + 1;\r\n      const currentYear =\r\n        startYear + Math.floor((startMonth + month - 1) / 12);\r\n      const monthYearStr = `${getMonthName(currentMonth).substring(\r\n        0,\r\n        3\r\n      )} ${currentYear}`;\r\n\r\n      // Calculate age\r\n      let ageYears = currentYear - birthYear;\r\n      let ageMonths = currentMonth - birthMonth;\r\n      if (ageMonths < 0) {\r\n        ageYears--;\r\n        ageMonths += 12;\r\n      }\r\n      const ageStr = `${ageYears}y ${ageMonths}m`;\r\n\r\n      // Check for salary adjustments\r\n      for (const adjustment of sortedAdjustments) {\r\n        if (\r\n          currentMonth === adjustment.month &&\r\n          currentYear === adjustment.year\r\n        ) {\r\n          currentSalary = adjustment.newSalary;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Calculate take-home pay\r\n      const cpfContribution = currentSalary * cpfRate;\r\n      const employerCpf = currentSalary * employerCpfRate;\r\n      const takeHomePay = currentSalary - cpfContribution;\r\n\r\n      // Check for yearly bonuses in this month\r\n      let bonusAmount = 0;\r\n      let bonusDescription = \"\";\r\n\r\n      for (const bonus of sortedBonuses) {\r\n        if (\r\n          currentMonth === bonus.month &&\r\n          currentYear === bonus.year\r\n        ) {\r\n          bonusAmount += bonus.amount;\r\n          bonusDescription = bonusDescription\r\n            ? `${bonusDescription}, ${bonus.description}`\r\n            : bonus.description;\r\n        }\r\n      }\r\n\r\n      // Calculate loan payment and remaining balance\r\n      let actualLoanPayment = loanPayment;\r\n      let interestForMonth = loanRemaining * monthlyInterestRate;\r\n      let principalPayment = Math.min(\r\n        loanRemaining,\r\n        loanPayment - interestForMonth\r\n      );\r\n\r\n      if (loanRemaining <= 0) {\r\n        interestForMonth = 0;\r\n        principalPayment = 0;\r\n        actualLoanPayment = 0;\r\n        loanRemaining = 0;\r\n      } else {\r\n        loanRemaining = Math.max(0, loanRemaining - principalPayment);\r\n      }\r\n\r\n      // Record loan paid off milestone\r\n      if (loanRemaining === 0 && loanPaidOffMonth === null) {\r\n        loanPaidOffMonth = month;\r\n      }\r\n\r\n      // Calculate monthly savings (including any bonuses)\r\n      const monthlySavings =\r\n        takeHomePay - monthlyExpenses - actualLoanPayment + bonusAmount;\r\n\r\n      // Update balances\r\n      cpfBalance += cpfContribution + employerCpf;\r\n      currentSavings += monthlySavings;\r\n      const totalNetWorth = currentSavings + cpfBalance - loanRemaining;\r\n\r\n      // Record savings goal milestone - now only for cash savings (excluding CPF)\r\n      if (currentSavings >= 100000 && savingsGoalReachedMonth === null) {\r\n        savingsGoalReachedMonth = month;\r\n      }\r\n\r\n      // Create data point\r\n      projection.push({\r\n        month: month + 1,\r\n        date: monthYearStr,\r\n        age: ageStr,\r\n        monthlySalary: currentSalary,\r\n        takeHomePay: takeHomePay,\r\n        expenses: monthlyExpenses,\r\n        loanPayment: actualLoanPayment,\r\n        loanRemaining: loanRemaining,\r\n        monthlySavings: monthlySavings,\r\n        bonusAmount: bonusAmount,\r\n        bonusDescription: bonusDescription,\r\n        cpfContribution: cpfContribution,\r\n        employerCpfContribution: employerCpf,\r\n        totalCpfContribution: cpfContribution + employerCpf,\r\n        cpfBalance: cpfBalance,\r\n        cashSavings: currentSavings,\r\n        totalNetWorth: totalNetWorth,\r\n        milestone:\r\n          month === loanPaidOffMonth\r\n            ? \"Loan Paid Off\"\r\n            : month === savingsGoalReachedMonth\r\n            ? \"100K Cash Savings Goal\"\r\n            : bonusAmount > 0\r\n            ? bonusDescription\r\n            : null,\r\n      });\r\n    }\r\n\r\n    return {\r\n      projection,\r\n      loanPaidOffMonth:\r\n        loanPaidOffMonth !== null ? projection[loanPaidOffMonth] : null,\r\n      savingsGoalReachedMonth:\r\n        savingsGoalReachedMonth !== null\r\n          ? projection[savingsGoalReachedMonth]\r\n          : null,\r\n    };\r\n  };\r\n\r\n  const { projection, loanPaidOffMonth, savingsGoalReachedMonth } =\r\n    calculateProjection();\r\n\r\n  // Expense breakdown for pie chart\r\n  const expenseData = [\r\n    ...financialData.expenses.map((expense) => ({\r\n      name: expense.name,\r\n      value: expense.amount,\r\n    })),\r\n    {\r\n      name: \"Loan Payment\",\r\n      value: financialData.personalInfo.monthlyRepayment,\r\n    },\r\n  ];\r\n\r\n  // Extract summary data\r\n  const timeToPayLoan = loanPaidOffMonth\r\n    ? `${Math.floor(loanPaidOffMonth.month / 12)} years ${\r\n        loanPaidOffMonth.month % 12\r\n      } months`\r\n    : \"Not within projection\";\r\n\r\n  const timeToSavingsGoal = savingsGoalReachedMonth\r\n    ? `${Math.floor(savingsGoalReachedMonth.month / 12)} years ${\r\n        savingsGoalReachedMonth.month % 12\r\n      } months`\r\n    : \"Not within projection\";\r\n\r\n  // Current monthly income & expenses breakdown\r\n  const currentSalary = financialData.income.currentSalary;\r\n  const cpfContribution =\r\n    currentSalary * (financialData.income.cpfRate / 100);\r\n  const employerCpfContribution =\r\n    currentSalary * (financialData.income.employerCpfRate / 100);\r\n  const takeHomePay = currentSalary - cpfContribution;\r\n  const monthlyExpenses = totalExpenses;\r\n  const loanPayment = financialData.personalInfo.monthlyRepayment;\r\n  const monthlySavings = takeHomePay - monthlyExpenses - loanPayment;\r\n  const savingsRate = monthlySavings / takeHomePay;\r\n  const totalMonthlyIncome = currentSalary + employerCpfContribution;\r\n\r\n  // Calculate total yearly bonuses for current year\r\n  const currentYear = new Date().getFullYear();\r\n  const yearlyBonusesThisYear = financialData.yearlyBonuses\r\n    ? financialData.yearlyBonuses\r\n        .filter((bonus) => bonus.year === currentYear)\r\n        .reduce((total, bonus) => total + bonus.amount, 0)\r\n    : 0;\r\n\r\n  // Filtered data for charts (every 3 months)\r\n  const chartData = projection.filter((item, index) => index % 3 === 0);\r\n\r\n  // Calculate asset allocation percentages\r\n  const liquidCash = financialData.personalInfo.currentSavings;\r\n  const cpfSavings = financialData.personalInfo.currentCpfBalance || 0;\r\n  const totalAssets = liquidCash + cpfSavings;\r\n\r\n  const liquidCashPercentage =\r\n    totalAssets > 0 ? (liquidCash / totalAssets) * 100 : 0;\r\n  const cpfPercentage =\r\n    totalAssets > 0 ? (cpfSavings / totalAssets) * 100 : 0;\r\n\r\n  // Asset allocation data for pie chart\r\n  const assetAllocationData = [\r\n    { name: \"Liquid Cash\", value: liquidCash },\r\n    { name: \"CPF (Locked)\", value: cpfSavings },\r\n  ];\r\n\r\n  // Calculate upcoming financial events (next 3 months)\r\n  const upcomingEvents = [];\r\n  const today = new Date();\r\n  const currentMonth = today.getMonth() + 1;\r\n  const nextThreeMonths = [\r\n    { month: currentMonth, year: currentYear },\r\n    {\r\n      month:\r\n        currentMonth + 1 > 12\r\n          ? currentMonth + 1 - 12\r\n          : currentMonth + 1,\r\n      year: currentMonth + 1 > 12 ? currentYear + 1 : currentYear,\r\n    },\r\n    {\r\n      month:\r\n        currentMonth + 2 > 12\r\n          ? currentMonth + 2 - 12\r\n          : currentMonth + 2,\r\n      year: currentMonth + 2 > 12 ? currentYear + 1 : currentYear,\r\n    },\r\n  ];\r\n\r\n  // Find salary adjustments in next 3 months\r\n  if (financialData.income.salaryAdjustments) {\r\n    financialData.income.salaryAdjustments.forEach((adjustment) => {\r\n      const isUpcoming = nextThreeMonths.some(\r\n        (period) =>\r\n          period.month === adjustment.month &&\r\n          period.year === adjustment.year\r\n      );\r\n\r\n      if (isUpcoming) {\r\n        upcomingEvents.push({\r\n          type: \"Salary Adjustment\",\r\n          date: `${getMonthName(adjustment.month)} ${\r\n            adjustment.year\r\n          }`,\r\n          amount: adjustment.newSalary,\r\n          description: `Salary changes to ${formatCurrency(\r\n            adjustment.newSalary\r\n          )}`,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Find bonuses in next 3 months\r\n  if (financialData.yearlyBonuses) {\r\n    financialData.yearlyBonuses.forEach((bonus) => {\r\n      const isUpcoming = nextThreeMonths.some(\r\n        (period) =>\r\n          period.month === bonus.month && period.year === bonus.year\r\n      );\r\n\r\n      if (isUpcoming) {\r\n        upcomingEvents.push({\r\n          type: \"Bonus\",\r\n          date: `${getMonthName(bonus.month)} ${bonus.year}`,\r\n          amount: bonus.amount,\r\n          description: bonus.description,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // InfoItem component for consistent display of key-value pairs\r\n  const InfoItem = ({ label, value, highlighted = false }) => (\r\n    <div\r\n      className={`py-2 flex justify-between items-center border-b ${\r\n        highlighted ? \"bg-blue-50\" : \"\"\r\n      }`}\r\n    >\r\n      <span className=\"text-gray-700\">{label}</span>\r\n      <span\r\n        className={`font-medium ${highlighted ? \"text-blue-700\" : \"\"}`}\r\n      >\r\n        {value}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  // Status indicator component\r\n  const StatusIndicator = ({\r\n    value,\r\n    threshold1,\r\n    threshold2,\r\n    reverse = false,\r\n  }) => {\r\n    let color = \"bg-green-500\";\r\n\r\n    if (reverse) {\r\n      if (value > threshold1) color = \"bg-yellow-500\";\r\n      if (value > threshold2) color = \"bg-red-500\";\r\n    } else {\r\n      if (value < threshold1) color = \"bg-yellow-500\";\r\n      if (value < threshold2) color = \"bg-red-500\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"flex items-center\">\r\n        <div className={`w-3 h-3 rounded-full ${color} mr-2`}></div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-50 rounded-lg max-w-6xl mx-auto\">\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-blue-700 to-blue-500 text-white p-4 rounded-lg mb-6 shadow-md\">\r\n        <h1 className=\"text-xl md:text-2xl font-bold text-center\">\r\n          PERSONAL FINANCIAL DASHBOARD\r\n        </h1>\r\n      </div>\r\n\r\n      {/* Mobile-friendly Navigation Tabs */}\r\n      <div className=\"flex overflow-x-auto mb-6 bg-white rounded-lg shadow-sm border border-gray-200\">\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"summary\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"summary\")}\r\n        >\r\n          Summary\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"milestones\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"milestones\")}\r\n        >\r\n          Milestones\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"charts\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"charts\")}\r\n        >\r\n          Charts\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"projection\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"projection\")}\r\n        >\r\n          Projection\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"cpf\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"cpf\")}\r\n        >\r\n          CPF\r\n        </button>\r\n      </div>\r\n\r\n      {/* Summary Tab */}\r\n      {activeTab === \"summary\" && (\r\n        <div className=\"space-y-6\">\r\n          {/* Financial Snapshot Cards */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {/* Liquid Cash Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-green-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Liquid Cash\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-green-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .currentSavings\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    Immediately available\r\n                  </p>\r\n                </div>\r\n                <StatusIndicator\r\n                  value={\r\n                    financialData.personalInfo\r\n                      .currentSavings\r\n                  }\r\n                  threshold1={5000}\r\n                  threshold2={2000}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* CPF Balance Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-purple-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    CPF Balance\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-purple-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .currentCpfBalance || 0\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    Locked until retirement\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Remaining Loan Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-red-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Remaining Loan\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-red-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .remainingLoan\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    {timeToPayLoan !==\r\n                    \"Not within projection\"\r\n                      ? `Paid off in ${timeToPayLoan}`\r\n                      : \"Long-term loan\"}\r\n                  </p>\r\n                </div>\r\n                <StatusIndicator\r\n                  value={\r\n                    financialData.personalInfo.remainingLoan\r\n                  }\r\n                  threshold1={20000}\r\n                  threshold2={40000}\r\n                  reverse={true}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Net Worth Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-blue-500\">\r\n              <p className=\"text-sm text-gray-500\">\r\n                Total Net Worth\r\n              </p>\r\n              <p className=\"text-2xl font-bold text-blue-700\">\r\n                {formatCurrency(\r\n                  financialData.personalInfo.currentSavings +\r\n                    (financialData.personalInfo\r\n                      .currentCpfBalance || 0) -\r\n                    financialData.personalInfo.remainingLoan\r\n                )}\r\n              </p>\r\n              <p className=\"text-xs text-gray-500\">\r\n                Assets minus liabilities\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Monthly Overview Card */}\r\n          <Card title=\"Monthly Cash Flow\" titleColor=\"bg-green-600\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n              <div className=\"bg-blue-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-blue-800 mb-2\">\r\n                  Monthly Income\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-blue-700\">\r\n                  {formatCurrency(takeHomePay)}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Take-home pay after CPF\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"bg-red-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-red-800 mb-2\">\r\n                  Monthly Expenses\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-red-700\">\r\n                  {formatCurrency(\r\n                    monthlyExpenses + loanPayment\r\n                  )}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Including loan payment\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"bg-green-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-green-800 mb-2\">\r\n                  Monthly Savings\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-green-700\">\r\n                  {formatCurrency(monthlySavings)}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {formatPercent(savingsRate)} of take-home\r\n                  pay\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Cash Flow Progress Bar */}\r\n            <div className=\"mt-2 mb-6\">\r\n              <div className=\"flex justify-between text-sm mb-1\">\r\n                <span className=\"text-blue-600 font-medium\">\r\n                  Income\r\n                </span>\r\n                <span className=\"text-gray-600\">\r\n                  {formatCurrency(takeHomePay)}\r\n                </span>\r\n              </div>\r\n              <div className=\"w-full h-6 bg-gray-200 rounded-full overflow-hidden\">\r\n                <div className=\"flex h-full\">\r\n                  <div\r\n                    className=\"bg-red-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (monthlyExpenses /\r\n                          takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Living Expenses\"\r\n                  ></div>\r\n                  <div\r\n                    className=\"bg-orange-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (loanPayment / takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Loan Payment\"\r\n                  ></div>\r\n                  <div\r\n                    className=\"bg-green-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (monthlySavings / takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Savings\"\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex text-xs mt-1 justify-between\">\r\n                <span className=\"text-red-600\">\r\n                  Expenses: {formatCurrency(monthlyExpenses)}\r\n                </span>\r\n                <span className=\"text-orange-600\">\r\n                  Loan: {formatCurrency(loanPayment)}\r\n                </span>\r\n                <span className=\"text-green-600\">\r\n                  Savings: {formatCurrency(monthlySavings)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Expense Breakdown (Using our new component) */}\r\n          <ExpenseBreakdown \r\n            expenseData={expenseData} \r\n            totalExpenses={totalExpenses} \r\n            loanPayment={loanPayment} \r\n          />\r\n\r\n          {/* More cards and content... */}\r\n        </div>\r\n      )}\r\n\r\n      {/* Charts Tab */}\r\n      {activeTab === \"charts\" && (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 gap-6\">\r\n            {/* Net Worth Chart */}\r\n            <NetWorthChart \r\n              chartData={chartData} \r\n              loanPaidOffMonth={loanPaidOffMonth} \r\n              savingsGoalReachedMonth={savingsGoalReachedMonth} \r\n            />\r\n\r\n            {/* Savings Growth Chart */}\r\n            <SavingsGrowthChart \r\n              chartData={chartData} \r\n              savingsGoalReachedMonth={savingsGoalReachedMonth} \r\n            />\r\n\r\n            {/* Cash Flow Chart */}\r\n            <CashFlowChart chartData={chartData} />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Milestones Tab */}\r\n      {activeTab === \"milestones\" && (\r\n        <div className=\"space-y-6\">\r\n          <Card title=\"Key Financial Milestones\">\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-50\">\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Milestone\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Date\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Time to Achieve\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Age\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Savings at Milestone\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  <tr className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                      Student Loan Paid Off\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? loanPaidOffMonth.date\r\n                        : \"Not within projection\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {timeToPayLoan}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? loanPaidOffMonth.age\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? formatCurrency(\r\n                            loanPaidOffMonth.cashSavings\r\n                          )\r\n                        : \"-\"}\r\n                    </td>\r\n                  </tr>\r\n                  <tr className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                      $100,000 Savings Achieved\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? savingsGoalReachedMonth.date\r\n                        : \"Not within projection\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {timeToSavingsGoal}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? savingsGoalReachedMonth.age\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? formatCurrency(\r\n                            savingsGoalReachedMonth.cashSavings\r\n                          )\r\n                        : \"-\"}\r\n                    </td>\r\n                  </tr>\r\n\r\n                  {/* Yearly Bonuses as Milestones */}\r\n                  {financialData.yearlyBonuses &&\r\n                    financialData.yearlyBonuses.map(\r\n                      (bonus, index) => {\r\n                        // Find projection entry for this bonus\r\n                        const bonusMonth =\r\n                          projection.find((p) =>\r\n                            p.date.includes(\r\n                              `${getMonthName(\r\n                                bonus.month\r\n                              ).substring(\r\n                                0,\r\n                                3\r\n                              )} ${bonus.year}`\r\n                            )\r\n                          );\r\n\r\n                        if (!bonusMonth) return null;\r\n\r\n                        return (\r\n                          <tr\r\n                            key={`bonus-${index}`}\r\n                            className=\"hover:bg-gray-50 bg-green-50\"\r\n                          >\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                              {bonus.description}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {bonusMonth.date}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {Math.floor(\r\n                                bonusMonth.month /\r\n                                  12\r\n                              )}{\" \"}\r\n                              years{\" \"}\r\n                              {bonusMonth.month %\r\n                                12}{\" \"}\r\n                              months\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {bonusMonth.age}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {formatCurrency(\r\n                                bonus.amount\r\n                              )}\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      }\r\n                    )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Card>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Progress Towards Loan Payment */}\r\n            <Card title=\"Progress Towards Loan Payment\">\r\n              {loanPaidOffMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Original Loan:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Remaining:{\" \"}\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan > 0\r\n                            ? projection[0]\r\n                                .loanRemaining\r\n                            : 0\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            ((financialData\r\n                              .personalInfo\r\n                              .remainingLoan -\r\n                              projection[0]\r\n                                .loanRemaining) /\r\n                              financialData\r\n                                .personalInfo\r\n                                .remainingLoan) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-green-800 font-medium\">\r\n                          Congratulations! You'll be\r\n                          debt-free by{\" \"}\r\n                          <span className=\"font-bold\">\r\n                            {loanPaidOffMonth.date}\r\n                          </span>{\" \"}\r\n                          at age{\" \"}\r\n                          {loanPaidOffMonth.age}.\r\n                        </p>\r\n                        <p className=\"mt-1 text-green-700\">\r\n                          Total repayment period:{\" \"}\r\n                          {timeToPayLoan} from{\" \"}\r\n                          {getMonthName(\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .month\r\n                          )}{\" \"}\r\n                          {\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .year\r\n                          }\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {!loanPaidOffMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Original Loan:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Remaining:{\" \"}\r\n                      <span className=\"font-medium text-red-600\">\r\n                        {formatCurrency(\r\n                          projection[\r\n                            projection.length - 1\r\n                          ].loanRemaining\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            (1 -\r\n                              projection[\r\n                                projection.length -\r\n                                  1\r\n                              ].loanRemaining /\r\n                                financialData\r\n                                  .personalInfo\r\n                                  .remainingLoan) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-blue-800 font-medium\">\r\n                          You're making progress, but\r\n                          your loan won't be fully\r\n                          paid within the 5-year\r\n                          projection period.\r\n                        </p>\r\n                        <p className=\"mt-1 text-blue-700\">\r\n                          Consider increasing your\r\n                          monthly payments to\r\n                          accelerate debt payoff.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n\r\n            {/* Progress Towards Savings Goal */}\r\n            <Card title=\"Progress Towards $100K Cash Savings\">\r\n              {savingsGoalReachedMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Starting Cash:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .currentSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Goal:{\" \"}\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {formatCurrency(100000)}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.min(\r\n                          100,\r\n                          (financialData.personalInfo\r\n                            .currentSavings /\r\n                            100000) *\r\n                            100\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-green-800 font-medium\">\r\n                          Congratulations! You'll\r\n                          reach $100,000 in cash\r\n                          savings by{\" \"}\r\n                          <span className=\"font-bold\">\r\n                            {\r\n                              savingsGoalReachedMonth.date\r\n                            }\r\n                          </span>{\" \"}\r\n                          at age{\" \"}\r\n                          {\r\n                            savingsGoalReachedMonth.age\r\n                          }\r\n                          .\r\n                        </p>\r\n                        <p className=\"mt-1 text-green-700\">\r\n                          Total savings period:{\" \"}\r\n                          {timeToSavingsGoal} from{\" \"}\r\n                          {getMonthName(\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .month\r\n                          )}{\" \"}\r\n                          {\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .year\r\n                          }\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {!savingsGoalReachedMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Starting Cash:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .currentSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Current:{\" \"}\r\n                      <span className=\"font-medium text-blue-600\">\r\n                        {formatCurrency(\r\n                          projection[\r\n                            projection.length - 1\r\n                          ].cashSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            (financialData\r\n                              .personalInfo\r\n                              .currentSavings /\r\n                              100000) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-blue-800 font-medium\">\r\n                          You're making progress, but\r\n                          you won't reach the $100,000\r\n                          cash savings goal within the\r\n                          5-year projection period.\r\n                        </p>\r\n                        <p className=\"mt-1 text-blue-700\">\r\n                          Consider increasing your\r\n                          savings rate after paying\r\n                          off your loan to accelerate\r\n                          progress.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Projection Table Tab */}\r\n      {activeTab === \"projection\" && (\r\n        <Card title=\"Monthly Financial Projection\">\r\n          {/* Rows to Display Control */}\r\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n            <div className=\"flex flex-wrap items-center justify-between\">\r\n              <div className=\"mr-4 mb-2 sm:mb-0\">\r\n                <label\r\n                  htmlFor=\"rowsToDisplay\"\r\n                  className=\"block text-sm font-medium text-blue-700 mb-1\"\r\n                >\r\n                  Months to Display:\r\n                </label>\r\n                <select\r\n                  id=\"rowsToDisplay\"\r\n                  value={rowsToDisplay}\r\n                  onChange={handleRowsToDisplayChange}\r\n                  className=\"w-32 px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                >\r\n                  <option value={12}>\r\n                    12 months (1 year)\r\n                  </option>\r\n                  <option value={24}>\r\n                    24 months (2 years)\r\n                  </option>\r\n                  <option value={36}>\r\n                    36 months (3 years)\r\n                  </option>\r\n                  <option value={48}>\r\n                    48 months (4 years)\r\n                  </option>\r\n                  <option value={60}>\r\n                    60 months (5 years)\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div className=\"hidden sm:block text-blue-700 mr-2\">\r\n                  <svg\r\n                    className=\"w-5 h-5\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                    ></path>\r\n                  </svg>\r\n                </div>\r\n                <p className=\"text-sm text-blue-700\">\r\n                  Showing {rowsToDisplay} months of financial\r\n                  projection data\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"overflow-x-auto -mx-4\">\r\n            <div className=\"inline-block min-w-full align-middle p-4\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-50\">\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Month\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Date\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Take-Home\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Expenses\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Loan Payment\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Loan Remaining\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Bonus\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Monthly Savings\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Cash Savings\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      CPF Balance\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {projection\r\n                    .slice(0, rowsToDisplay)\r\n                    .map((month, index) => (\r\n                      <tr\r\n                        key={index}\r\n                        className={`${\r\n                          month.milestone\r\n                            ? \"bg-green-50\"\r\n                            : index % 2 === 0\r\n                            ? \"bg-gray-50\"\r\n                            : \"\"\r\n                        } hover:bg-blue-50 transition-colors`}\r\n                      >\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\r\n                          {month.month}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\r\n                          {month.date}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.takeHomePay\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-orange-600\">\r\n                          {formatCurrency(\r\n                            month.expenses\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\r\n                          {formatCurrency(\r\n                            month.loanPayment\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\r\n                          {formatCurrency(\r\n                            month.loanRemaining\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\r\n                          {month.bonusAmount > 0\r\n                            ? formatCurrency(\r\n                                month.bonusAmount\r\n                              )\r\n                            : \"-\"}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.monthlySavings\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.cashSavings\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\r\n                          {formatCurrency(\r\n                            month.cpfBalance\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Show milestone information if available */}\r\n          {(loanPaidOffMonth ||\r\n            savingsGoalReachedMonth ||\r\n            financialData.yearlyBonuses?.length > 0) && (\r\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n              <h3 className=\"font-medium text-blue-700 mb-2\">\r\n                Key Milestones:\r\n              </h3>\r\n              <ul className=\"space-y-2\">\r\n                {loanPaidOffMonth && (\r\n                  <li className=\"flex items-start\">\r\n                    <svg\r\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span>\r\n                      <span className=\"font-medium\">\r\n                        Loan Paid Off:\r\n                      </span>{\" \"}\r\n                      {loanPaidOffMonth.date} (Month{\" \"}\r\n                      {loanPaidOffMonth.month})\r\n                    </span>\r\n                  </li>\r\n                )}\r\n                {savingsGoalReachedMonth && (\r\n                  <li className=\"flex items-start\">\r\n                    <svg\r\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span>\r\n                      <span className=\"font-medium\">\r\n                        $100K Savings Reached:\r\n                      </span>{\" \"}\r\n                      {savingsGoalReachedMonth.date}{\" \"}\r\n                      (Month{\" \"}\r\n                      {savingsGoalReachedMonth.month})\r\n                    </span>\r\n                  </li>\r\n                )}\r\n\r\n                {/* List bonuses as milestones */}\r\n                {financialData.yearlyBonuses &&\r\n                  financialData.yearlyBonuses.map(\r\n                    (bonus, index) => {\r\n                      // Find date for this bonus\r\n                      const bonusProjectionDate =\r\n                        projection.find((p) =>\r\n                          p.date.includes(\r\n                            `${getMonthName(\r\n                              bonus.month\r\n                            ).substring(0, 3)} ${\r\n                              bonus.year\r\n                            }`\r\n                          )\r\n                        )?.date;\r\n\r\n                      if (!bonusProjectionDate)\r\n                        return null;\r\n\r\n                      return (\r\n                        <li\r\n                          key={`bonus-milestone-${index}`}\r\n                          className=\"flex items-start\"\r\n                        >\r\n                          <svg\r\n                            className=\"h-5 w-5 text-purple-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                          >\r\n                            <path\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                              strokeWidth=\"2\"\r\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                            ></path>\r\n                          </svg>\r\n                          <span>\r\n                            <span className=\"font-medium\">\r\n                              {bonus.description}:\r\n                            </span>{\" \"}\r\n                            {bonusProjectionDate} -{\" \"}\r\n                            {formatCurrency(\r\n                              bonus.amount\r\n                            )}\r\n                          </span>\r\n                        </li>\r\n                      );\r\n                    }\r\n                  )}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      )}\r\n\r\n      {/* CPF Tab */}\r\n      {activeTab === \"cpf\" && <CpfDashboard />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"names":["_ref","children","title","className","titleColor","_jsxs","_jsx","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","expenseData","totalExpenses","loanPayment","COLORS","Card","filter","expense","name","map","index","ResponsiveContainer","width","height","PieChart","Pie","data","dataKey","nameKey","cx","cy","outerRadius","fill","labelLine","label","_ref2","percent","toFixed","entry","Cell","length","Tooltip","formatter","chartData","loanPaidOffMonth","savingsGoalReachedMonth","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","angle","textAnchor","tick","fontSize","YAxis","yAxisId","tickFormatter","position","offset","orientation","Legend","Area","type","stroke","fillOpacity","activeDot","r","Line","strokeWidth","dot","ReferenceLine","x","date","AreaChart","y","limitedData","slice","BarChart","Bar","EMPLOYEE_TYPE","SINGAPOREAN","PR_FIRST_YEAR","PR_SECOND_YEAR","PR_THIRD_YEAR_ONWARDS","CITIZEN_RATES","PR_FIRST_YEAR_RATES","PR_SECOND_YEAR_RATES","PR_THIRD_YEAR_ONWARDS_RATES","calculateCpfContributions","salary","employeeType","arguments","undefined","age","additionalWage","totalOrdinaryWageForYear","employeeRate","employerRate","getCpfRates","ageBracket","getAgeBracket","Error","cappedSalary","Math","min","employeeContribution","round","employerContribution","additionalEmployeeContribution","additionalEmployerContribution","yearToDateOW","remainingAWCeiling","max","cappedAdditionalWage","totalEmployeeContribution","totalEmployerContribution","totalContribution","takeHomePay","rates","error","console","initialData","bonusMonths","annualBonusAmount","cpfInputs","setCpfInputs","useState","cpfResults","useMemo","monthlyCpf","bonusCpf","bonusAmount","yearlyCpf","monthlySalary","monthlyContribution","bonusContribution","bonusSalary","yearlyEmployeeContribution","yearlyEmployerContribution","yearlyTotalContribution","monthlyDetails","bonusDetails","estimateYearlyCpfContributions","monthly","bonus","yearly","totalMonthlyContribution","updateCpfInput","useCallback","key","prev","updateSalary","newSalary","Number","updateEmployeeType","newType","Object","values","includes","resetToDefaults","useEffect","updates","hasUpdates","onChange","useCpfCalculator","showAdvanced","setShowAdvanced","formatPercentage","e","parseFloat","target","placeholder","step","parseInt","onClick","viewBox","strokeLinecap","strokeLinejoin","d","_Fragment","useUIPreferences","theme","setTheme","localStorage","getItem","chartColors","setChartColors","savedColors","JSON","parse","primary","secondary","tertiary","quaternary","danger","success","warning","compactMode","setCompactMode","currencyFormat","setCurrencyFormat","dateFormat","setDateFormat","toggleTheme","prevTheme","newTheme","setItem","updateChartColor","colorKey","newColor","prevColors","updatedColors","stringify","resetChartColors","defaultColors","toggleCompactMode","newMode","String","updateCurrencyFormat","updateDateFormat","document","documentElement","setAttribute","setProperty","getChartColorPalette","amount","isDarkMode","cpfMilestone","cpfColor","contentStyle","backgroundColor","color","border","labelStyle","wrapperStyle","CpfDashboard","_financialData$income","_financialData$yearly","_financialData$income9","_financialData$person2","_financialData$income10","_financialData$income11","_financialData$income12","_financialData$income13","_financialData$person3","_financialData$income14","_financialData$income15","_financialData$income16","_financialData$income17","financialData","updateFinancialData","calculateAge","useFinancial","localCpfData","setLocalCpfData","income","currentSalary","yearlyBonuses","projectionData","setProjectionData","prevData","_financialData$income2","_financialData$yearly2","generateProjectionData","_financialData$person","_financialData$income3","_financialData$income4","_financialData$income5","_financialData$income6","currentCpfBalance","personalInfo","cpfRate","employerCpfRate","projectedBalance","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","year","month","formattedDate","toLocaleDateString","push","cpfBalance","handleSaveChanges","_financialData$income7","_financialData$income8","CpfCalculator","updatedData","CpfGrowthChart","calculateProjectedCpfAt55","yearlyContribution","currentAge","yearsToAge55","i","Dashboard","_financialData$projec","updateProjectionSettings","getMonthName","formatDate","useContext","FinancialContext","activeTab","setActiveTab","rowsToDisplay","setRowsToDisplay","projectionSettings","projection","calculateProjection","expenses","currentSavings","loanRemaining","remainingLoan","birthYear","birthday","birthMonth","monthlyExpenses","monthlyRepayment","monthlyInterestRate","interestRate","startMonth","projectionStart","startYear","salaryAdjustments","futureSalary","salaryAdjustmentMonth","salaryAdjustmentYear","sortedAdjustments","sort","a","b","sortedBonuses","floor","monthYearStr","substring","ageYears","ageMonths","ageStr","adjustment","cpfContribution","employerCpf","bonusDescription","description","actualLoanPayment","interestForMonth","principalPayment","monthlySavings","totalNetWorth","employerCpfContribution","totalCpfContribution","cashSavings","milestone","timeToPayLoan","timeToSavingsGoal","savingsRate","reduce","total","item","upcomingEvents","nextThreeMonths","forEach","some","period","StatusIndicator","threshold1","threshold2","reverse","ExpenseBreakdown","NetWorthChart","SavingsGrowthChart","CashFlowChart","bonusMonth","find","p","htmlFor","id","_projection$find","bonusProjectionDate"],"sourceRoot":""}