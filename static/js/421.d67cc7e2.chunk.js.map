{"version":3,"file":"static/js/421.d67cc7e2.chunk.js","mappings":"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","sources":["components/common/Card/Card.js","components/common/Card/index.js","services/formatters/currencyFormatters.js","components/dashboard/ExpenseBreakdown/index.js","components/dashboard/ExpenseBreakdown/ExpenseBreakdown.js","components/dashboard/charts/NetWorthChart.js","components/dashboard/charts/SavingsGrowthChart.js","components/dashboard/charts/CashFlowChart.js","pages/Dashboard.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Card component for consistent styling across the application\n * \n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child elements to render inside the card\n * @param {string} [props.title] - Optional card title\n * @param {string} [props.className=\"\"] - Additional CSS classes\n * @param {string} [props.titleColor=\"bg-blue-600\"] - Background color for the title area\n * @returns {JSX.Element}\n */\nconst Card = ({ children, title, className = \"\", titleColor = \"bg-blue-600\" }) => (\n  <div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}>\n    {title && (\n      <div className={`${titleColor} px-4 py-3`}>\n        <h2 className=\"text-lg font-semibold text-white\">{title}</h2>\n      </div>\n    )}\n    <div className=\"p-4\">{children}</div>\n  </div>\n);\n\nCard.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n  className: PropTypes.string,\n  titleColor: PropTypes.string,\n};\n\nexport default Card;\n","import Card from './Card';\n\nexport default Card;\n","/**\n * Format a number as a currency string (SGD)\n * \n * @param {number} value - The number to format\n * @returns {string} - Formatted currency string\n */\nexport const formatCurrency = (value) => {\n  return new Intl.NumberFormat(\"en-SG\", {\n    style: \"currency\",\n    currency: \"SGD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n};\n\n/**\n * Format a number as a percentage\n * \n * @param {number} value - The decimal value to format (e.g., 0.1 for 10%)\n * @returns {string} - Formatted percentage string\n */\nexport const formatPercent = (value) => {\n  return new Intl.NumberFormat(\"en-SG\", {\n    style: \"percent\",\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n  }).format(value);\n};\n","import ExpenseBreakdown from './ExpenseBreakdown';\n\nexport default ExpenseBreakdown;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from \"recharts\";\nimport Card from \"../../common/Card\";\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\n\n/**\n * ExpenseBreakdown Component\n * Displays a breakdown of monthly expenses with a table and pie chart visualization\n *\n * @param {Object} props - Component props\n * @param {Array} props.expenseData - Array of expense objects with name and value\n * @param {number} props.totalExpenses - Sum of all non-loan expenses\n * @param {number} props.loanPayment - Monthly loan payment amount\n * @returns {JSX.Element}\n */\nconst ExpenseBreakdown = ({ expenseData, totalExpenses, loanPayment }) => {\n  // Colors for pie chart\n  const COLORS = [\n    \"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\", \n    \"#82ca9d\", \"#ffc658\", \"#ff7300\", \"#ff0000\", \"#B10DC9\",\n    \"#FF851B\", \"#85144b\", \"#3D9970\", \"#2ECC40\", \"#01FF70\"\n  ];\n\n  return (\n    <Card title=\"Monthly Expense Breakdown\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Expense Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-50\">\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Category\n                </th>\n                <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Amount\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {expenseData.filter(expense => expense.name !== \"Loan Payment\").map((expense, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"px-4 py-3 text-sm text-gray-700\">\n                    {expense.name}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\n                    {formatCurrency(expense.value)}\n                  </td>\n                </tr>\n              ))}\n              <tr className=\"hover:bg-gray-50\">\n                <td className=\"px-4 py-3 text-sm text-gray-700\">\n                  Loan Payment\n                </td>\n                <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\n                  {formatCurrency(loanPayment)}\n                </td>\n              </tr>\n              <tr className=\"bg-blue-50\">\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700\">\n                  Total\n                </td>\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700 text-right\">\n                  {formatCurrency(totalExpenses + loanPayment)}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Expense Pie Chart */}\n        <div className=\"h-64 md:h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={expenseData}\n                dataKey=\"value\"\n                nameKey=\"name\"\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius=\"70%\"\n                fill=\"#8884d8\"\n                labelLine={false}\n                label={({ name, percent }) =>\n                  `${name}: ${(percent * 100).toFixed(0)}%`\n                }\n              >\n                {expenseData.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={COLORS[index % COLORS.length]}\n                  />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => formatCurrency(value)} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nExpenseBreakdown.propTypes = {\n  expenseData: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired\n    })\n  ).isRequired,\n  totalExpenses: PropTypes.number.isRequired,\n  loanPayment: PropTypes.number.isRequired\n};\n\nexport default ExpenseBreakdown;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine\n} from \"recharts\";\nimport Card from \"../../common/Card\";\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\n\n/**\n * NetWorthChart Component\n * Displays a chart showing the growth of net worth over time, including cash savings,\n * CPF balance, and loan payoff progress\n * \n * @param {Object} props - Component props\n * @param {Array} props.chartData - Filtered projection data points for the chart\n * @param {Object} props.loanPaidOffMonth - Month when loan is paid off (or null)\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\n * @returns {JSX.Element}\n */\nconst NetWorthChart = ({ chartData, loanPaidOffMonth, savingsGoalReachedMonth }) => {\n  return (\n    <Card title=\"Net Worth Growth\" titleColor=\"bg-blue-600\">\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ComposedChart\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 10,\n              left: 0,\n              bottom: 20,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis\n              yAxisId=\"left\"\n              tickFormatter={(value) => formatCurrency(value)}\n              width={70}\n              label={{\n                value: \"Savings\",\n                angle: -90,\n                position: \"insideLeft\",\n                offset: 10,\n              }}\n            />\n            <YAxis\n              yAxisId=\"right\"\n              orientation=\"right\"\n              tickFormatter={(value) => formatCurrency(value)}\n              width={70}\n              label={{\n                value: \"Loan Remaining\",\n                angle: 90,\n                position: \"insideRight\",\n                offset: 10,\n              }}\n            />\n            <Tooltip formatter={(value) => formatCurrency(value)} />\n            <Legend />\n            <Area\n              yAxisId=\"left\"\n              type=\"monotone\"\n              dataKey=\"cashSavings\"\n              name=\"Cash Savings\"\n              stroke=\"#2FD87B\"\n              fill=\"#2FD87B\"\n              fillOpacity={0.3}\n              activeDot={{ r: 6 }}\n            />\n            <Area\n              yAxisId=\"left\"\n              type=\"monotone\"\n              dataKey=\"cpfBalance\"\n              name=\"CPF Balance (Locked)\"\n              stroke=\"#82ca9d\"\n              fill=\"#82ca9d\"\n              fillOpacity={0.3}\n              activeDot={{ r: 6 }}\n            />\n            <Line\n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"loanRemaining\"\n              name=\"Remaining Loan\"\n              stroke=\"#ff7300\"\n              strokeWidth={2}\n              dot={{ r: 3 }}\n              activeDot={{ r: 6 }}\n            />\n            {loanPaidOffMonth && (\n              <ReferenceLine\n                yAxisId=\"right\"\n                x={loanPaidOffMonth.date}\n                stroke=\"green\"\n                strokeDasharray=\"3 3\"\n                label={{\n                  value: \"Loan Paid Off\",\n                  position: \"top\",\n                  fill: \"green\",\n                }}\n              />\n            )}\n            {savingsGoalReachedMonth && (\n              <ReferenceLine\n                yAxisId=\"left\"\n                x={savingsGoalReachedMonth.date}\n                stroke=\"blue\"\n                strokeDasharray=\"3 3\"\n                label={{\n                  value: \"$100K Savings\",\n                  position: \"top\",\n                  fill: \"blue\",\n                }}\n              />\n            )}\n          </ComposedChart>\n        </ResponsiveContainer>\n      </div>\n      <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4\">\n        <div className=\"bg-blue-50 p-3 rounded-lg\">\n          <h3 className=\"font-medium text-blue-800 mb-2\">\n            Savings Growth\n          </h3>\n          <p className=\"text-sm\">\n            {savingsGoalReachedMonth\n              ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\n              : `Your cash savings will grow over the projection period`}\n          </p>\n        </div>\n        <div className=\"bg-orange-50 p-3 rounded-lg\">\n          <h3 className=\"font-medium text-orange-800 mb-2\">\n            Loan Repayment\n          </h3>\n          <p className=\"text-sm\">\n            {loanPaidOffMonth\n              ? `You'll be debt-free by ${loanPaidOffMonth.date}`\n              : `Your loan will decrease over the projection period`}\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nNetWorthChart.propTypes = {\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loanPaidOffMonth: PropTypes.object,\n  savingsGoalReachedMonth: PropTypes.object\n};\n\nexport default NetWorthChart;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine\n} from \"recharts\";\nimport Card from \"../../common/Card\";\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\n\n/**\n * SavingsGrowthChart Component\n * Displays a chart showing the growth of savings over time\n * \n * @param {Object} props - Component props\n * @param {Array} props.chartData - Filtered projection data points for the chart\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\n * @returns {JSX.Element}\n */\nconst SavingsGrowthChart = ({ chartData, savingsGoalReachedMonth }) => {\n  return (\n    <Card title=\"Savings Growth Projection\" titleColor=\"bg-green-600\">\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 10,\n              left: 0,\n              bottom: 20,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis\n              tickFormatter={(value) => formatCurrency(value)}\n              width={70}\n            />\n            <Tooltip formatter={(value) => formatCurrency(value)} />\n            <Legend />\n            <Area\n              type=\"monotone\"\n              dataKey=\"cashSavings\"\n              name=\"Cash Savings\"\n              stroke=\"#2FD87B\"\n              fill=\"#2FD87B\"\n              fillOpacity={0.3}\n              activeDot={{ r: 6 }}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"cpfBalance\"\n              name=\"CPF Balance\"\n              stroke=\"#8884d8\"\n              fill=\"#8884d8\"\n              fillOpacity={0.3}\n              activeDot={{ r: 6 }}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"totalNetWorth\"\n              name=\"Total Net Worth\"\n              stroke=\"#0088FE\"\n              fill=\"#0088FE\"\n              fillOpacity={0.1}\n              activeDot={{ r: 6 }}\n            />\n            {savingsGoalReachedMonth && (\n              <ReferenceLine\n                x={savingsGoalReachedMonth.date}\n                stroke=\"green\"\n                strokeDasharray=\"3 3\"\n                label={{\n                  value: \"$100K Savings Goal\",\n                  position: \"top\",\n                  fill: \"green\",\n                }}\n              />\n            )}\n            <ReferenceLine\n              y={100000}\n              stroke=\"blue\"\n              strokeDasharray=\"3 3\"\n              label={{\n                value: \"$100K\",\n                position: \"right\",\n                fill: \"blue\",\n              }}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n      <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n        <h3 className=\"font-medium text-green-800 mb-2\">\n          Savings Milestone\n        </h3>\n        <p className=\"text-sm\">\n          {savingsGoalReachedMonth\n            ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\n            : `Keep working towards your $100K cash savings goal`}\n        </p>\n      </div>\n    </Card>\n  );\n};\n\nSavingsGrowthChart.propTypes = {\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  savingsGoalReachedMonth: PropTypes.object\n};\n\nexport default SavingsGrowthChart;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\nimport Card from \"../../common/Card\";\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\n\n/**\n * CashFlowChart Component\n * Displays a chart showing the monthly cash flow breakdown\n * \n * @param {Object} props - Component props\n * @param {Array} props.chartData - Filtered projection data points for the chart\n * @returns {JSX.Element}\n */\nconst CashFlowChart = ({ chartData }) => {\n  // Use only the first 6 months of data for the bar chart\n  const limitedData = chartData.slice(0, 6);\n  \n  return (\n    <Card title=\"Monthly Cash Flow\" titleColor=\"bg-blue-600\">\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            data={limitedData}\n            margin={{\n              top: 10,\n              right: 10,\n              left: 0,\n              bottom: 20,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis\n              tickFormatter={(value) => formatCurrency(value)}\n              width={70}\n            />\n            <Tooltip formatter={(value) => formatCurrency(value)} />\n            <Legend />\n            <Bar\n              dataKey=\"takeHomePay\"\n              name=\"Take-Home Pay\"\n              fill=\"#8884d8\"\n            />\n            <Bar\n              dataKey=\"expenses\"\n              name=\"Living Expenses\"\n              fill=\"#ff7300\"\n            />\n            <Bar\n              dataKey=\"loanPayment\"\n              name=\"Loan Payment\"\n              fill=\"#ff0000\"\n            />\n            <Bar\n              dataKey=\"monthlySavings\"\n              name=\"Cash Savings\"\n              fill=\"#82ca9d\"\n            />\n            <Bar\n              dataKey=\"totalCpfContribution\"\n              name=\"CPF Contributions\"\n              fill=\"#9370DB\"\n            />\n            <Bar\n              dataKey=\"bonusAmount\"\n              name=\"Bonuses\"\n              fill=\"#2ECC40\"\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n      <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n        <h3 className=\"font-medium text-blue-800 mb-2\">\n          Cash Flow Breakdown\n        </h3>\n        <p className=\"text-sm\">\n          This chart shows your monthly cash flow for the next 6 months, including income, expenses, and savings.\n        </p>\n      </div>\n    </Card>\n  );\n};\n\nCashFlowChart.propTypes = {\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default CashFlowChart;","import React, { useContext, useState } from \"react\";\nimport { FinancialContext } from \"../context/FinancialContext\";\nimport ExpenseBreakdown from \"../components/dashboard/ExpenseBreakdown\";\nimport { \n  NetWorthChart, \n  SavingsGrowthChart, \n  CashFlowChart \n} from \"../components/dashboard/charts\";\nimport Card from \"../components/common/Card\";\nimport { formatCurrency, formatPercent } from \"../services/formatters/currencyFormatters\";\n\n/**\n * Dashboard Page Component\n * Main financial dashboard showing financial summary, charts, and projections\n * \n * @returns {JSX.Element}\n */\nconst Dashboard = () => {\n  const {\n    financialData,\n    updateFinancialData,\n    updateProjectionSettings,\n    totalExpenses,\n    calculateAge,\n    getMonthName,\n    formatDate,\n  } = useContext(FinancialContext);\n\n  const [activeTab, setActiveTab] = useState(\"summary\");\n\n  // State for projection rows to display\n  const [rowsToDisplay, setRowsToDisplay] = useState(\n    financialData.projectionSettings?.rowsToDisplay || 36\n  );\n\n  // Handle changing the number of rows to display\n  const handleRowsToDisplayChange = (e) => {\n    const value = parseInt(e.target.value);\n    setRowsToDisplay(value);\n    updateProjectionSettings({\n      rowsToDisplay: value,\n    });\n  };\n\n  // Calculate financial projection\n  const calculateProjection = () => {\n    const projection = [];\n\n    // Extract values from context\n    const { personalInfo, income, expenses, yearlyBonuses } = financialData;\n\n    // Initial values\n    let currentSavings = personalInfo.currentSavings;\n    let loanRemaining = personalInfo.remainingLoan;\n    let cpfBalance = personalInfo.currentCpfBalance || 0; // Use user-provided CPF balance\n    const birthYear = personalInfo.birthday.year;\n    const birthMonth = personalInfo.birthday.month;\n\n    // Parameters\n    let currentSalary = income.currentSalary;\n    const cpfRate = income.cpfRate / 100;\n    const employerCpfRate = income.employerCpfRate / 100;\n    const monthlyExpenses = totalExpenses;\n    const loanPayment = personalInfo.monthlyRepayment;\n    const annualInterestRate = personalInfo.interestRate / 100;\n    const monthlyInterestRate = annualInterestRate / 12;\n\n    // Calculate months\n    let startMonth = personalInfo.projectionStart.month;\n    let startYear = personalInfo.projectionStart.year;\n\n    // Get salary adjustments if available, or create from legacy data\n    const salaryAdjustments = income.salaryAdjustments || [];\n\n    // If using legacy format, convert to array format for compatibility\n    if (!income.salaryAdjustments && income.futureSalary) {\n      salaryAdjustments.push({\n        month: income.salaryAdjustmentMonth,\n        year: income.salaryAdjustmentYear,\n        newSalary: income.futureSalary,\n      });\n    }\n\n    // Sort salary adjustments by date\n    const sortedAdjustments = [...salaryAdjustments].sort((a, b) => {\n      if (a.year !== b.year) return a.year - b.year;\n      return a.month - b.month;\n    });\n\n    // Get yearly bonuses\n    const sortedBonuses = yearlyBonuses\n      ? [...yearlyBonuses].sort((a, b) => {\n          if (a.year !== b.year) return a.year - b.year;\n          return a.month - b.month;\n        })\n      : [];\n\n    // Track milestones\n    let loanPaidOffMonth = null;\n    let savingsGoalReachedMonth = null; // This will now track only cash savings (excluding CPF)\n\n    // Generate projection for 60 months (5 years)\n    for (let month = 0; month < 60; month++) {\n      const currentMonth = ((startMonth + month - 1) % 12) + 1;\n      const currentYear =\n        startYear + Math.floor((startMonth + month - 1) / 12);\n      const monthYearStr = `${getMonthName(currentMonth).substring(\n        0,\n        3\n      )} ${currentYear}`;\n\n      // Calculate age\n      let ageYears = currentYear - birthYear;\n      let ageMonths = currentMonth - birthMonth;\n      if (ageMonths < 0) {\n        ageYears--;\n        ageMonths += 12;\n      }\n      const ageStr = `${ageYears}y ${ageMonths}m`;\n\n      // Check for salary adjustments\n      for (const adjustment of sortedAdjustments) {\n        if (\n          currentMonth === adjustment.month &&\n          currentYear === adjustment.year\n        ) {\n          currentSalary = adjustment.newSalary;\n          break;\n        }\n      }\n\n      // Calculate take-home pay\n      const cpfContribution = currentSalary * cpfRate;\n      const employerCpf = currentSalary * employerCpfRate;\n      const takeHomePay = currentSalary - cpfContribution;\n\n      // Check for yearly bonuses in this month\n      let bonusAmount = 0;\n      let bonusDescription = \"\";\n\n      for (const bonus of sortedBonuses) {\n        if (\n          currentMonth === bonus.month &&\n          currentYear === bonus.year\n        ) {\n          bonusAmount += bonus.amount;\n          bonusDescription = bonusDescription\n            ? `${bonusDescription}, ${bonus.description}`\n            : bonus.description;\n        }\n      }\n\n      // Calculate loan payment and remaining balance\n      let actualLoanPayment = loanPayment;\n      let interestForMonth = loanRemaining * monthlyInterestRate;\n      let principalPayment = Math.min(\n        loanRemaining,\n        loanPayment - interestForMonth\n      );\n\n      if (loanRemaining <= 0) {\n        interestForMonth = 0;\n        principalPayment = 0;\n        actualLoanPayment = 0;\n        loanRemaining = 0;\n      } else {\n        loanRemaining = Math.max(0, loanRemaining - principalPayment);\n      }\n\n      // Record loan paid off milestone\n      if (loanRemaining === 0 && loanPaidOffMonth === null) {\n        loanPaidOffMonth = month;\n      }\n\n      // Calculate monthly savings (including any bonuses)\n      const monthlySavings =\n        takeHomePay - monthlyExpenses - actualLoanPayment + bonusAmount;\n\n      // Update balances\n      cpfBalance += cpfContribution + employerCpf;\n      currentSavings += monthlySavings;\n      const totalNetWorth = currentSavings + cpfBalance - loanRemaining;\n\n      // Record savings goal milestone - now only for cash savings (excluding CPF)\n      if (currentSavings >= 100000 && savingsGoalReachedMonth === null) {\n        savingsGoalReachedMonth = month;\n      }\n\n      // Create data point\n      projection.push({\n        month: month + 1,\n        date: monthYearStr,\n        age: ageStr,\n        monthlySalary: currentSalary,\n        takeHomePay: takeHomePay,\n        expenses: monthlyExpenses,\n        loanPayment: actualLoanPayment,\n        loanRemaining: loanRemaining,\n        monthlySavings: monthlySavings,\n        bonusAmount: bonusAmount,\n        bonusDescription: bonusDescription,\n        cpfContribution: cpfContribution,\n        employerCpfContribution: employerCpf,\n        totalCpfContribution: cpfContribution + employerCpf,\n        cpfBalance: cpfBalance,\n        cashSavings: currentSavings,\n        totalNetWorth: totalNetWorth,\n        milestone:\n          month === loanPaidOffMonth\n            ? \"Loan Paid Off\"\n            : month === savingsGoalReachedMonth\n            ? \"100K Cash Savings Goal\"\n            : bonusAmount > 0\n            ? bonusDescription\n            : null,\n      });\n    }\n\n    return {\n      projection,\n      loanPaidOffMonth:\n        loanPaidOffMonth !== null ? projection[loanPaidOffMonth] : null,\n      savingsGoalReachedMonth:\n        savingsGoalReachedMonth !== null\n          ? projection[savingsGoalReachedMonth]\n          : null,\n    };\n  };\n\n  const { projection, loanPaidOffMonth, savingsGoalReachedMonth } =\n    calculateProjection();\n\n  // Expense breakdown for pie chart\n  const expenseData = [\n    ...financialData.expenses.map((expense) => ({\n      name: expense.name,\n      value: expense.amount,\n    })),\n    {\n      name: \"Loan Payment\",\n      value: financialData.personalInfo.monthlyRepayment,\n    },\n  ];\n\n  // Extract summary data\n  const timeToPayLoan = loanPaidOffMonth\n    ? `${Math.floor(loanPaidOffMonth.month / 12)} years ${\n        loanPaidOffMonth.month % 12\n      } months`\n    : \"Not within projection\";\n\n  const timeToSavingsGoal = savingsGoalReachedMonth\n    ? `${Math.floor(savingsGoalReachedMonth.month / 12)} years ${\n        savingsGoalReachedMonth.month % 12\n      } months`\n    : \"Not within projection\";\n\n  // Current monthly income & expenses breakdown\n  const currentSalary = financialData.income.currentSalary;\n  const cpfContribution =\n    currentSalary * (financialData.income.cpfRate / 100);\n  const employerCpfContribution =\n    currentSalary * (financialData.income.employerCpfRate / 100);\n  const takeHomePay = currentSalary - cpfContribution;\n  const monthlyExpenses = totalExpenses;\n  const loanPayment = financialData.personalInfo.monthlyRepayment;\n  const monthlySavings = takeHomePay - monthlyExpenses - loanPayment;\n  const savingsRate = monthlySavings / takeHomePay;\n  const totalMonthlyIncome = currentSalary + employerCpfContribution;\n\n  // Calculate total yearly bonuses for current year\n  const currentYear = new Date().getFullYear();\n  const yearlyBonusesThisYear = financialData.yearlyBonuses\n    ? financialData.yearlyBonuses\n        .filter((bonus) => bonus.year === currentYear)\n        .reduce((total, bonus) => total + bonus.amount, 0)\n    : 0;\n\n  // Filtered data for charts (every 3 months)\n  const chartData = projection.filter((item, index) => index % 3 === 0);\n\n  // Calculate asset allocation percentages\n  const liquidCash = financialData.personalInfo.currentSavings;\n  const cpfSavings = financialData.personalInfo.currentCpfBalance || 0;\n  const totalAssets = liquidCash + cpfSavings;\n\n  const liquidCashPercentage =\n    totalAssets > 0 ? (liquidCash / totalAssets) * 100 : 0;\n  const cpfPercentage =\n    totalAssets > 0 ? (cpfSavings / totalAssets) * 100 : 0;\n\n  // Asset allocation data for pie chart\n  const assetAllocationData = [\n    { name: \"Liquid Cash\", value: liquidCash },\n    { name: \"CPF (Locked)\", value: cpfSavings },\n  ];\n\n  // Calculate upcoming financial events (next 3 months)\n  const upcomingEvents = [];\n  const today = new Date();\n  const currentMonth = today.getMonth() + 1;\n  const nextThreeMonths = [\n    { month: currentMonth, year: currentYear },\n    {\n      month:\n        currentMonth + 1 > 12\n          ? currentMonth + 1 - 12\n          : currentMonth + 1,\n      year: currentMonth + 1 > 12 ? currentYear + 1 : currentYear,\n    },\n    {\n      month:\n        currentMonth + 2 > 12\n          ? currentMonth + 2 - 12\n          : currentMonth + 2,\n      year: currentMonth + 2 > 12 ? currentYear + 1 : currentYear,\n    },\n  ];\n\n  // Find salary adjustments in next 3 months\n  if (financialData.income.salaryAdjustments) {\n    financialData.income.salaryAdjustments.forEach((adjustment) => {\n      const isUpcoming = nextThreeMonths.some(\n        (period) =>\n          period.month === adjustment.month &&\n          period.year === adjustment.year\n      );\n\n      if (isUpcoming) {\n        upcomingEvents.push({\n          type: \"Salary Adjustment\",\n          date: `${getMonthName(adjustment.month)} ${\n            adjustment.year\n          }`,\n          amount: adjustment.newSalary,\n          description: `Salary changes to ${formatCurrency(\n            adjustment.newSalary\n          )}`,\n        });\n      }\n    });\n  }\n\n  // Find bonuses in next 3 months\n  if (financialData.yearlyBonuses) {\n    financialData.yearlyBonuses.forEach((bonus) => {\n      const isUpcoming = nextThreeMonths.some(\n        (period) =>\n          period.month === bonus.month && period.year === bonus.year\n      );\n\n      if (isUpcoming) {\n        upcomingEvents.push({\n          type: \"Bonus\",\n          date: `${getMonthName(bonus.month)} ${bonus.year}`,\n          amount: bonus.amount,\n          description: bonus.description,\n        });\n      }\n    });\n  }\n\n  // InfoItem component for consistent display of key-value pairs\n  const InfoItem = ({ label, value, highlighted = false }) => (\n    <div\n      className={`py-2 flex justify-between items-center border-b ${\n        highlighted ? \"bg-blue-50\" : \"\"\n      }`}\n    >\n      <span className=\"text-gray-700\">{label}</span>\n      <span\n        className={`font-medium ${highlighted ? \"text-blue-700\" : \"\"}`}\n      >\n        {value}\n      </span>\n    </div>\n  );\n\n  // Status indicator component\n  const StatusIndicator = ({\n    value,\n    threshold1,\n    threshold2,\n    reverse = false,\n  }) => {\n    let color = \"bg-green-500\";\n\n    if (reverse) {\n      if (value > threshold1) color = \"bg-yellow-500\";\n      if (value > threshold2) color = \"bg-red-500\";\n    } else {\n      if (value < threshold1) color = \"bg-yellow-500\";\n      if (value < threshold2) color = \"bg-red-500\";\n    }\n\n    return (\n      <div className=\"flex items-center\">\n        <div className={`w-3 h-3 rounded-full ${color} mr-2`}></div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded-lg max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-700 to-blue-500 text-white p-4 rounded-lg mb-6 shadow-md\">\n        <h1 className=\"text-xl md:text-2xl font-bold text-center\">\n          PERSONAL FINANCIAL DASHBOARD\n        </h1>\n      </div>\n\n      {/* Mobile-friendly Navigation Tabs */}\n      <div className=\"flex overflow-x-auto mb-6 bg-white rounded-lg shadow-sm border border-gray-200\">\n        <button\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\n            activeTab === \"summary\"\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\n          }`}\n          onClick={() => setActiveTab(\"summary\")}\n        >\n          Summary\n        </button>\n        <button\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\n            activeTab === \"milestones\"\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\n          }`}\n          onClick={() => setActiveTab(\"milestones\")}\n        >\n          Milestones\n        </button>\n        <button\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\n            activeTab === \"charts\"\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\n          }`}\n          onClick={() => setActiveTab(\"charts\")}\n        >\n          Charts\n        </button>\n        <button\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\n            activeTab === \"projection\"\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\n          }`}\n          onClick={() => setActiveTab(\"projection\")}\n        >\n          Projection\n        </button>\n      </div>\n\n      {/* Summary Tab */}\n      {activeTab === \"summary\" && (\n        <div className=\"space-y-6\">\n          {/* Financial Snapshot Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Liquid Cash Card */}\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-green-500\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">\n                    Liquid Cash\n                  </p>\n                  <p className=\"text-2xl font-bold text-green-700\">\n                    {formatCurrency(\n                      financialData.personalInfo\n                        .currentSavings\n                    )}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Immediately available\n                  </p>\n                </div>\n                <StatusIndicator\n                  value={\n                    financialData.personalInfo\n                      .currentSavings\n                  }\n                  threshold1={5000}\n                  threshold2={2000}\n                />\n              </div>\n            </div>\n\n            {/* CPF Balance Card */}\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-purple-500\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">\n                    CPF Balance\n                  </p>\n                  <p className=\"text-2xl font-bold text-purple-700\">\n                    {formatCurrency(\n                      financialData.personalInfo\n                        .currentCpfBalance || 0\n                    )}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Locked until retirement\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Remaining Loan Card */}\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-red-500\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">\n                    Remaining Loan\n                  </p>\n                  <p className=\"text-2xl font-bold text-red-700\">\n                    {formatCurrency(\n                      financialData.personalInfo\n                        .remainingLoan\n                    )}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {timeToPayLoan !==\n                    \"Not within projection\"\n                      ? `Paid off in ${timeToPayLoan}`\n                      : \"Long-term loan\"}\n                  </p>\n                </div>\n                <StatusIndicator\n                  value={\n                    financialData.personalInfo.remainingLoan\n                  }\n                  threshold1={20000}\n                  threshold2={40000}\n                  reverse={true}\n                />\n              </div>\n            </div>\n\n            {/* Net Worth Card */}\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-blue-500\">\n              <p className=\"text-sm text-gray-500\">\n                Total Net Worth\n              </p>\n              <p className=\"text-2xl font-bold text-blue-700\">\n                {formatCurrency(\n                  financialData.personalInfo.currentSavings +\n                    (financialData.personalInfo\n                      .currentCpfBalance || 0) -\n                    financialData.personalInfo.remainingLoan\n                )}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Assets minus liabilities\n              </p>\n            </div>\n          </div>\n\n          {/* Monthly Overview Card */}\n          <Card title=\"Monthly Cash Flow\" titleColor=\"bg-green-600\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              <div className=\"bg-blue-50 p-3 rounded-lg\">\n                <h3 className=\"font-medium text-blue-800 mb-2\">\n                  Monthly Income\n                </h3>\n                <p className=\"text-2xl font-bold text-blue-700\">\n                  {formatCurrency(takeHomePay)}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  Take-home pay after CPF\n                </p>\n              </div>\n\n              <div className=\"bg-red-50 p-3 rounded-lg\">\n                <h3 className=\"font-medium text-red-800 mb-2\">\n                  Monthly Expenses\n                </h3>\n                <p className=\"text-2xl font-bold text-red-700\">\n                  {formatCurrency(\n                    monthlyExpenses + loanPayment\n                  )}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  Including loan payment\n                </p>\n              </div>\n\n              <div className=\"bg-green-50 p-3 rounded-lg\">\n                <h3 className=\"font-medium text-green-800 mb-2\">\n                  Monthly Savings\n                </h3>\n                <p className=\"text-2xl font-bold text-green-700\">\n                  {formatCurrency(monthlySavings)}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {formatPercent(savingsRate)} of take-home\n                  pay\n                </p>\n              </div>\n            </div>\n\n            {/* Cash Flow Progress Bar */}\n            <div className=\"mt-2 mb-6\">\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-blue-600 font-medium\">\n                  Income\n                </span>\n                <span className=\"text-gray-600\">\n                  {formatCurrency(takeHomePay)}\n                </span>\n              </div>\n              <div className=\"w-full h-6 bg-gray-200 rounded-full overflow-hidden\">\n                <div className=\"flex h-full\">\n                  <div\n                    className=\"bg-red-500 h-full\"\n                    style={{\n                      width: `${\n                        (monthlyExpenses /\n                          takeHomePay) *\n                        100\n                      }%`,\n                    }}\n                    title=\"Living Expenses\"\n                  ></div>\n                  <div\n                    className=\"bg-orange-500 h-full\"\n                    style={{\n                      width: `${\n                        (loanPayment / takeHomePay) *\n                        100\n                      }%`,\n                    }}\n                    title=\"Loan Payment\"\n                  ></div>\n                  <div\n                    className=\"bg-green-500 h-full\"\n                    style={{\n                      width: `${\n                        (monthlySavings / takeHomePay) *\n                        100\n                      }%`,\n                    }}\n                    title=\"Savings\"\n                  ></div>\n                </div>\n              </div>\n              <div className=\"flex text-xs mt-1 justify-between\">\n                <span className=\"text-red-600\">\n                  Expenses: {formatCurrency(monthlyExpenses)}\n                </span>\n                <span className=\"text-orange-600\">\n                  Loan: {formatCurrency(loanPayment)}\n                </span>\n                <span className=\"text-green-600\">\n                  Savings: {formatCurrency(monthlySavings)}\n                </span>\n              </div>\n            </div>\n          </Card>\n\n          {/* Expense Breakdown (Using our new component) */}\n          <ExpenseBreakdown \n            expenseData={expenseData} \n            totalExpenses={totalExpenses} \n            loanPayment={loanPayment} \n          />\n\n          {/* More cards and content... */}\n        </div>\n      )}\n\n      {/* Charts Tab */}\n      {activeTab === \"charts\" && (\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Net Worth Chart */}\n            <NetWorthChart \n              chartData={chartData} \n              loanPaidOffMonth={loanPaidOffMonth} \n              savingsGoalReachedMonth={savingsGoalReachedMonth} \n            />\n\n            {/* Savings Growth Chart */}\n            <SavingsGrowthChart \n              chartData={chartData} \n              savingsGoalReachedMonth={savingsGoalReachedMonth} \n            />\n\n            {/* Cash Flow Chart */}\n            <CashFlowChart chartData={chartData} />\n          </div>\n        </div>\n      )}\n\n      {/* Milestones Tab */}\n      {activeTab === \"milestones\" && (\n        <div className=\"space-y-6\">\n          <Card title=\"Key Financial Milestones\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Milestone\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Time to Achieve\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Age\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Savings at Milestone\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\n                      Student Loan Paid Off\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {loanPaidOffMonth\n                        ? loanPaidOffMonth.date\n                        : \"Not within projection\"}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {timeToPayLoan}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {loanPaidOffMonth\n                        ? loanPaidOffMonth.age\n                        : \"-\"}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {loanPaidOffMonth\n                        ? formatCurrency(\n                            loanPaidOffMonth.cashSavings\n                          )\n                        : \"-\"}\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\n                      $100,000 Savings Achieved\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {savingsGoalReachedMonth\n                        ? savingsGoalReachedMonth.date\n                        : \"Not within projection\"}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {timeToSavingsGoal}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {savingsGoalReachedMonth\n                        ? savingsGoalReachedMonth.age\n                        : \"-\"}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\n                      {savingsGoalReachedMonth\n                        ? formatCurrency(\n                            savingsGoalReachedMonth.cashSavings\n                          )\n                        : \"-\"}\n                    </td>\n                  </tr>\n\n                  {/* Yearly Bonuses as Milestones */}\n                  {financialData.yearlyBonuses &&\n                    financialData.yearlyBonuses.map(\n                      (bonus, index) => {\n                        // Find projection entry for this bonus\n                        const bonusMonth =\n                          projection.find((p) =>\n                            p.date.includes(\n                              `${getMonthName(\n                                bonus.month\n                              ).substring(\n                                0,\n                                3\n                              )} ${bonus.year}`\n                            )\n                          );\n\n                        if (!bonusMonth) return null;\n\n                        return (\n                          <tr\n                            key={`bonus-${index}`}\n                            className=\"hover:bg-gray-50 bg-green-50\"\n                          >\n                            <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\n                              {bonus.description}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\n                              {bonusMonth.date}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\n                              {Math.floor(\n                                bonusMonth.month /\n                                  12\n                              )}{\" \"}\n                              years{\" \"}\n                              {bonusMonth.month %\n                                12}{\" \"}\n                              months\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\n                              {bonusMonth.age}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\n                              {formatCurrency(\n                                bonus.amount\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      }\n                    )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Progress Towards Loan Payment */}\n            <Card title=\"Progress Towards Loan Payment\">\n              {loanPaidOffMonth && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">\n                      Original Loan:{\" \"}\n                      <span className=\"font-medium\">\n                        {formatCurrency(\n                          financialData.personalInfo\n                            .remainingLoan\n                        )}\n                      </span>\n                    </span>\n                    <span className=\"text-gray-600\">\n                      Remaining:{\" \"}\n                      <span className=\"font-medium text-green-600\">\n                        {formatCurrency(\n                          financialData.personalInfo\n                            .remainingLoan > 0\n                            ? projection[0]\n                                .loanRemaining\n                            : 0\n                        )}\n                      </span>\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\n                    <div\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\n                      style={{\n                        width: `${Math.max(\n                          0,\n                          Math.min(\n                            100,\n                            ((financialData\n                              .personalInfo\n                              .remainingLoan -\n                              projection[0]\n                                .loanRemaining) /\n                              financialData\n                                .personalInfo\n                                .remainingLoan) *\n                              100\n                          )\n                        )}%`,\n                      }}\n                    ></div>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\n                    <div className=\"flex items-start\">\n                      <svg\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        ></path>\n                      </svg>\n                      <div>\n                        <p className=\"text-green-800 font-medium\">\n                          Congratulations! You'll be\n                          debt-free by{\" \"}\n                          <span className=\"font-bold\">\n                            {loanPaidOffMonth.date}\n                          </span>{\" \"}\n                          at age{\" \"}\n                          {loanPaidOffMonth.age}.\n                        </p>\n                        <p className=\"mt-1 text-green-700\">\n                          Total repayment period:{\" \"}\n                          {timeToPayLoan} from{\" \"}\n                          {getMonthName(\n                            financialData\n                              .personalInfo\n                              .projectionStart\n                              .month\n                          )}{\" \"}\n                          {\n                            financialData\n                              .personalInfo\n                              .projectionStart\n                              .year\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {!loanPaidOffMonth && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">\n                      Original Loan:{\" \"}\n                      <span className=\"font-medium\">\n                        {formatCurrency(\n                          financialData.personalInfo\n                            .remainingLoan\n                        )}\n                      </span>\n                    </span>\n                    <span className=\"text-gray-600\">\n                      Remaining:{\" \"}\n                      <span className=\"font-medium text-red-600\">\n                        {formatCurrency(\n                          projection[\n                            projection.length - 1\n                          ].loanRemaining\n                        )}\n                      </span>\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\n                    <div\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\n                      style={{\n                        width: `${Math.max(\n                          0,\n                          Math.min(\n                            100,\n                            (1 -\n                              projection[\n                                projection.length -\n                                  1\n                              ].loanRemaining /\n                                financialData\n                                  .personalInfo\n                                  .remainingLoan) *\n                              100\n                          )\n                        )}%`,\n                      }}\n                    ></div>\n                  </div>\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\n                    <div className=\"flex items-start\">\n                      <svg\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        ></path>\n                      </svg>\n                      <div>\n                        <p className=\"text-blue-800 font-medium\">\n                          You're making progress, but\n                          your loan won't be fully\n                          paid within the 5-year\n                          projection period.\n                        </p>\n                        <p className=\"mt-1 text-blue-700\">\n                          Consider increasing your\n                          monthly payments to\n                          accelerate debt payoff.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Card>\n\n            {/* Progress Towards Savings Goal */}\n            <Card title=\"Progress Towards $100K Cash Savings\">\n              {savingsGoalReachedMonth && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">\n                      Starting Cash:{\" \"}\n                      <span className=\"font-medium\">\n                        {formatCurrency(\n                          financialData.personalInfo\n                            .currentSavings\n                        )}\n                      </span>\n                    </span>\n                    <span className=\"text-gray-600\">\n                      Goal:{\" \"}\n                      <span className=\"font-medium text-green-600\">\n                        {formatCurrency(100000)}\n                      </span>\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\n                    <div\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\n                      style={{\n                        width: `${Math.min(\n                          100,\n                          (financialData.personalInfo\n                            .currentSavings /\n                            100000) *\n                            100\n                        )}%`,\n                      }}\n                    ></div>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\n                    <div className=\"flex items-start\">\n                      <svg\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        ></path>\n                      </svg>\n                      <div>\n                        <p className=\"text-green-800 font-medium\">\n                          Congratulations! You'll\n                          reach $100,000 in cash\n                          savings by{\" \"}\n                          <span className=\"font-bold\">\n                            {\n                              savingsGoalReachedMonth.date\n                            }\n                          </span>{\" \"}\n                          at age{\" \"}\n                          {\n                            savingsGoalReachedMonth.age\n                          }\n                          .\n                        </p>\n                        <p className=\"mt-1 text-green-700\">\n                          Total savings period:{\" \"}\n                          {timeToSavingsGoal} from{\" \"}\n                          {getMonthName(\n                            financialData\n                              .personalInfo\n                              .projectionStart\n                              .month\n                          )}{\" \"}\n                          {\n                            financialData\n                              .personalInfo\n                              .projectionStart\n                              .year\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {!savingsGoalReachedMonth && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">\n                      Starting Cash:{\" \"}\n                      <span className=\"font-medium\">\n                        {formatCurrency(\n                          financialData.personalInfo\n                            .currentSavings\n                        )}\n                      </span>\n                    </span>\n                    <span className=\"text-gray-600\">\n                      Current:{\" \"}\n                      <span className=\"font-medium text-blue-600\">\n                        {formatCurrency(\n                          projection[\n                            projection.length - 1\n                          ].cashSavings\n                        )}\n                      </span>\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\n                    <div\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\n                      style={{\n                        width: `${Math.max(\n                          0,\n                          Math.min(\n                            100,\n                            (financialData\n                              .personalInfo\n                              .currentSavings /\n                              100000) *\n                              100\n                          )\n                        )}%`,\n                      }}\n                    ></div>\n                  </div>\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\n                    <div className=\"flex items-start\">\n                      <svg\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        ></path>\n                      </svg>\n                      <div>\n                        <p className=\"text-blue-800 font-medium\">\n                          You're making progress, but\n                          you won't reach the $100,000\n                          cash savings goal within the\n                          5-year projection period.\n                        </p>\n                        <p className=\"mt-1 text-blue-700\">\n                          Consider increasing your\n                          savings rate after paying\n                          off your loan to accelerate\n                          progress.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Card>\n          </div>\n        </div>\n      )}\n\n      {/* Projection Table Tab */}\n      {activeTab === \"projection\" && (\n        <Card title=\"Monthly Financial Projection\">\n          {/* Rows to Display Control */}\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex flex-wrap items-center justify-between\">\n              <div className=\"mr-4 mb-2 sm:mb-0\">\n                <label\n                  htmlFor=\"rowsToDisplay\"\n                  className=\"block text-sm font-medium text-blue-700 mb-1\"\n                >\n                  Months to Display:\n                </label>\n                <select\n                  id=\"rowsToDisplay\"\n                  value={rowsToDisplay}\n                  onChange={handleRowsToDisplayChange}\n                  className=\"w-32 px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                >\n                  <option value={12}>\n                    12 months (1 year)\n                  </option>\n                  <option value={24}>\n                    24 months (2 years)\n                  </option>\n                  <option value={36}>\n                    36 months (3 years)\n                  </option>\n                  <option value={48}>\n                    48 months (4 years)\n                  </option>\n                  <option value={60}>\n                    60 months (5 years)\n                  </option>\n                </select>\n              </div>\n              <div className=\"flex items-center\">\n                <div className=\"hidden sm:block text-blue-700 mr-2\">\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    ></path>\n                  </svg>\n                </div>\n                <p className=\"text-sm text-blue-700\">\n                  Showing {rowsToDisplay} months of financial\n                  projection data\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto -mx-4\">\n            <div className=\"inline-block min-w-full align-middle p-4\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Month\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Date\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Take-Home\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Expenses\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Loan Payment\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Loan Remaining\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Bonus\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Monthly Savings\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      Cash Savings\n                    </th>\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      CPF Balance\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {projection\n                    .slice(0, rowsToDisplay)\n                    .map((month, index) => (\n                      <tr\n                        key={index}\n                        className={`${\n                          month.milestone\n                            ? \"bg-green-50\"\n                            : index % 2 === 0\n                            ? \"bg-gray-50\"\n                            : \"\"\n                        } hover:bg-blue-50 transition-colors`}\n                      >\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\n                          {month.month}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\n                          {month.date}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\n                          {formatCurrency(\n                            month.takeHomePay\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-orange-600\">\n                          {formatCurrency(\n                            month.expenses\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\n                          {formatCurrency(\n                            month.loanPayment\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\n                          {formatCurrency(\n                            month.loanRemaining\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\n                          {month.bonusAmount > 0\n                            ? formatCurrency(\n                                month.bonusAmount\n                              )\n                            : \"-\"}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\n                          {formatCurrency(\n                            month.monthlySavings\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\n                          {formatCurrency(\n                            month.cashSavings\n                          )}\n                        </td>\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\n                          {formatCurrency(\n                            month.cpfBalance\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Show milestone information if available */}\n          {(loanPaidOffMonth ||\n            savingsGoalReachedMonth ||\n            financialData.yearlyBonuses?.length > 0) && (\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n              <h3 className=\"font-medium text-blue-700 mb-2\">\n                Key Milestones:\n              </h3>\n              <ul className=\"space-y-2\">\n                {loanPaidOffMonth && (\n                  <li className=\"flex items-start\">\n                    <svg\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                      ></path>\n                    </svg>\n                    <span>\n                      <span className=\"font-medium\">\n                        Loan Paid Off:\n                      </span>{\" \"}\n                      {loanPaidOffMonth.date} (Month{\" \"}\n                      {loanPaidOffMonth.month})\n                    </span>\n                  </li>\n                )}\n                {savingsGoalReachedMonth && (\n                  <li className=\"flex items-start\">\n                    <svg\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                      ></path>\n                    </svg>\n                    <span>\n                      <span className=\"font-medium\">\n                        $100K Savings Reached:\n                      </span>{\" \"}\n                      {savingsGoalReachedMonth.date}{\" \"}\n                      (Month{\" \"}\n                      {savingsGoalReachedMonth.month})\n                    </span>\n                  </li>\n                )}\n\n                {/* List bonuses as milestones */}\n                {financialData.yearlyBonuses &&\n                  financialData.yearlyBonuses.map(\n                    (bonus, index) => {\n                      // Find date for this bonus\n                      const bonusProjectionDate =\n                        projection.find((p) =>\n                          p.date.includes(\n                            `${getMonthName(\n                              bonus.month\n                            ).substring(0, 3)} ${\n                              bonus.year\n                            }`\n                          )\n                        )?.date;\n\n                      if (!bonusProjectionDate)\n                        return null;\n\n                      return (\n                        <li\n                          key={`bonus-milestone-${index}`}\n                          className=\"flex items-start\"\n                        >\n                          <svg\n                            className=\"h-5 w-5 text-purple-500 mr-2 mt-0.5 flex-shrink-0\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                            ></path>\n                          </svg>\n                          <span>\n                            <span className=\"font-medium\">\n                              {bonus.description}:\n                            </span>{\" \"}\n                            {bonusProjectionDate} -{\" \"}\n                            {formatCurrency(\n                              bonus.amount\n                            )}\n                          </span>\n                        </li>\n                      );\n                    }\n                  )}\n              </ul>\n            </div>\n          )}\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"names":["_ref","children","title","className","titleColor","_jsxs","_jsx","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","expenseData","totalExpenses","loanPayment","COLORS","Card","filter","expense","name","map","index","ResponsiveContainer","width","height","PieChart","Pie","data","dataKey","nameKey","cx","cy","outerRadius","fill","labelLine","label","_ref2","percent","toFixed","entry","Cell","length","Tooltip","formatter","chartData","loanPaidOffMonth","savingsGoalReachedMonth","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","angle","textAnchor","tick","fontSize","YAxis","yAxisId","tickFormatter","position","offset","orientation","Legend","Area","type","stroke","fillOpacity","activeDot","r","Line","strokeWidth","dot","ReferenceLine","x","date","AreaChart","y","limitedData","slice","BarChart","Bar","Dashboard","_financialData$projec","_financialData$yearly","financialData","updateFinancialData","updateProjectionSettings","calculateAge","getMonthName","formatDate","useContext","FinancialContext","activeTab","setActiveTab","useState","rowsToDisplay","setRowsToDisplay","projectionSettings","projection","calculateProjection","personalInfo","income","expenses","yearlyBonuses","currentSavings","loanRemaining","remainingLoan","cpfBalance","currentCpfBalance","birthYear","birthday","year","birthMonth","month","currentSalary","cpfRate","employerCpfRate","monthlyExpenses","monthlyRepayment","monthlyInterestRate","interestRate","startMonth","projectionStart","startYear","salaryAdjustments","futureSalary","push","salaryAdjustmentMonth","salaryAdjustmentYear","newSalary","sortedAdjustments","sort","a","b","sortedBonuses","currentMonth","currentYear","Math","floor","monthYearStr","substring","ageYears","ageMonths","ageStr","adjustment","cpfContribution","employerCpf","takeHomePay","bonusAmount","bonusDescription","bonus","amount","description","actualLoanPayment","interestForMonth","principalPayment","min","max","monthlySavings","totalNetWorth","age","monthlySalary","employerCpfContribution","totalCpfContribution","cashSavings","milestone","timeToPayLoan","timeToSavingsGoal","savingsRate","Date","getFullYear","reduce","total","item","upcomingEvents","getMonth","nextThreeMonths","forEach","some","period","StatusIndicator","threshold1","threshold2","reverse","color","onClick","ExpenseBreakdown","NetWorthChart","SavingsGrowthChart","CashFlowChart","bonusMonth","find","p","includes","viewBox","strokeLinecap","strokeLinejoin","d","htmlFor","id","onChange","e","parseInt","target","_projection$find","bonusProjectionDate"],"sourceRoot":""}