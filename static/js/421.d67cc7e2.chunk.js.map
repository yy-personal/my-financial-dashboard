{"version":3,"file":"static/js/421.d67cc7e2.chunk.js","mappings":"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","sources":["components/common/Card/Card.js","components/common/Card/index.js","services/formatters/currencyFormatters.js","components/dashboard/ExpenseBreakdown/index.js","components/dashboard/ExpenseBreakdown/ExpenseBreakdown.js","components/dashboard/charts/NetWorthChart.js","components/dashboard/charts/SavingsGrowthChart.js","components/dashboard/charts/CashFlowChart.js","pages/Dashboard.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Card component for consistent styling across the application\r\n * \r\n * @param {Object} props - Component props\r\n * @param {React.ReactNode} props.children - Child elements to render inside the card\r\n * @param {string} [props.title] - Optional card title\r\n * @param {string} [props.className=\"\"] - Additional CSS classes\r\n * @param {string} [props.titleColor=\"bg-blue-600\"] - Background color for the title area\r\n * @returns {JSX.Element}\r\n */\r\nconst Card = ({ children, title, className = \"\", titleColor = \"bg-blue-600\" }) => (\r\n  <div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}>\r\n    {title && (\r\n      <div className={`${titleColor} px-4 py-3`}>\r\n        <h2 className=\"text-lg font-semibold text-white\">{title}</h2>\r\n      </div>\r\n    )}\r\n    <div className=\"p-4\">{children}</div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n  className: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","import Card from './Card';\r\n\r\nexport default Card;\r\n","/**\r\n * Format a number as a currency string (SGD)\r\n * \r\n * @param {number} value - The number to format\r\n * @returns {string} - Formatted currency string\r\n */\r\nexport const formatCurrency = (value) => {\r\n  return new Intl.NumberFormat(\"en-SG\", {\r\n    style: \"currency\",\r\n    currency: \"SGD\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Format a number as a percentage\r\n * \r\n * @param {number} value - The decimal value to format (e.g., 0.1 for 10%)\r\n * @returns {string} - Formatted percentage string\r\n */\r\nexport const formatPercent = (value) => {\r\n  return new Intl.NumberFormat(\"en-SG\", {\r\n    style: \"percent\",\r\n    minimumFractionDigits: 1,\r\n    maximumFractionDigits: 1,\r\n  }).format(value);\r\n};\r\n","import ExpenseBreakdown from './ExpenseBreakdown';\r\n\r\nexport default ExpenseBreakdown;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * ExpenseBreakdown Component\r\n * Displays a breakdown of monthly expenses with a table and pie chart visualization\r\n *\r\n * @param {Object} props - Component props\r\n * @param {Array} props.expenseData - Array of expense objects with name and value\r\n * @param {number} props.totalExpenses - Sum of all non-loan expenses\r\n * @param {number} props.loanPayment - Monthly loan payment amount\r\n * @returns {JSX.Element}\r\n */\r\nconst ExpenseBreakdown = ({ expenseData, totalExpenses, loanPayment }) => {\r\n  // Colors for pie chart\r\n  const COLORS = [\r\n    \"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\", \r\n    \"#82ca9d\", \"#ffc658\", \"#ff7300\", \"#ff0000\", \"#B10DC9\",\r\n    \"#FF851B\", \"#85144b\", \"#3D9970\", \"#2ECC40\", \"#01FF70\"\r\n  ];\r\n\r\n  return (\r\n    <Card title=\"Monthly Expense Breakdown\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        {/* Expense Table */}\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead>\r\n              <tr className=\"bg-gray-50\">\r\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Category\r\n                </th>\r\n                <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Amount\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {expenseData.filter(expense => expense.name !== \"Loan Payment\").map((expense, index) => (\r\n                <tr key={index} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                    {expense.name}\r\n                  </td>\r\n                  <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\r\n                    {formatCurrency(expense.value)}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              <tr className=\"hover:bg-gray-50\">\r\n                <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                  Loan Payment\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm text-gray-700 text-right\">\r\n                  {formatCurrency(loanPayment)}\r\n                </td>\r\n              </tr>\r\n              <tr className=\"bg-blue-50\">\r\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700\">\r\n                  Total\r\n                </td>\r\n                <td className=\"px-4 py-3 text-sm font-medium text-blue-700 text-right\">\r\n                  {formatCurrency(totalExpenses + loanPayment)}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Expense Pie Chart */}\r\n        <div className=\"h-64 md:h-80\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart>\r\n              <Pie\r\n                data={expenseData}\r\n                dataKey=\"value\"\r\n                nameKey=\"name\"\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                outerRadius=\"70%\"\r\n                fill=\"#8884d8\"\r\n                labelLine={false}\r\n                label={({ name, percent }) =>\r\n                  `${name}: ${(percent * 100).toFixed(0)}%`\r\n                }\r\n              >\r\n                {expenseData.map((entry, index) => (\r\n                  <Cell\r\n                    key={`cell-${index}`}\r\n                    fill={COLORS[index % COLORS.length]}\r\n                  />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nExpenseBreakdown.propTypes = {\r\n  expenseData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  totalExpenses: PropTypes.number.isRequired,\r\n  loanPayment: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ExpenseBreakdown;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  ComposedChart,\r\n  Area,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * NetWorthChart Component\r\n * Displays a chart showing the growth of net worth over time, including cash savings,\r\n * CPF balance, and loan payoff progress\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @param {Object} props.loanPaidOffMonth - Month when loan is paid off (or null)\r\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\r\n * @returns {JSX.Element}\r\n */\r\nconst NetWorthChart = ({ chartData, loanPaidOffMonth, savingsGoalReachedMonth }) => {\r\n  return (\r\n    <Card title=\"Net Worth Growth\" titleColor=\"bg-blue-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <ComposedChart\r\n            data={chartData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              yAxisId=\"left\"\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n              label={{\r\n                value: \"Savings\",\r\n                angle: -90,\r\n                position: \"insideLeft\",\r\n                offset: 10,\r\n              }}\r\n            />\r\n            <YAxis\r\n              yAxisId=\"right\"\r\n              orientation=\"right\"\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n              label={{\r\n                value: \"Loan Remaining\",\r\n                angle: 90,\r\n                position: \"insideRight\",\r\n                offset: 10,\r\n              }}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Area\r\n              yAxisId=\"left\"\r\n              type=\"monotone\"\r\n              dataKey=\"cashSavings\"\r\n              name=\"Cash Savings\"\r\n              stroke=\"#2FD87B\"\r\n              fill=\"#2FD87B\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              yAxisId=\"left\"\r\n              type=\"monotone\"\r\n              dataKey=\"cpfBalance\"\r\n              name=\"CPF Balance (Locked)\"\r\n              stroke=\"#82ca9d\"\r\n              fill=\"#82ca9d\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Line\r\n              yAxisId=\"right\"\r\n              type=\"monotone\"\r\n              dataKey=\"loanRemaining\"\r\n              name=\"Remaining Loan\"\r\n              stroke=\"#ff7300\"\r\n              strokeWidth={2}\r\n              dot={{ r: 3 }}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            {loanPaidOffMonth && (\r\n              <ReferenceLine\r\n                yAxisId=\"right\"\r\n                x={loanPaidOffMonth.date}\r\n                stroke=\"green\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"Loan Paid Off\",\r\n                  position: \"top\",\r\n                  fill: \"green\",\r\n                }}\r\n              />\r\n            )}\r\n            {savingsGoalReachedMonth && (\r\n              <ReferenceLine\r\n                yAxisId=\"left\"\r\n                x={savingsGoalReachedMonth.date}\r\n                stroke=\"blue\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"$100K Savings\",\r\n                  position: \"top\",\r\n                  fill: \"blue\",\r\n                }}\r\n              />\r\n            )}\r\n          </ComposedChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n        <div className=\"bg-blue-50 p-3 rounded-lg\">\r\n          <h3 className=\"font-medium text-blue-800 mb-2\">\r\n            Savings Growth\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {savingsGoalReachedMonth\r\n              ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\r\n              : `Your cash savings will grow over the projection period`}\r\n          </p>\r\n        </div>\r\n        <div className=\"bg-orange-50 p-3 rounded-lg\">\r\n          <h3 className=\"font-medium text-orange-800 mb-2\">\r\n            Loan Repayment\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {loanPaidOffMonth\r\n              ? `You'll be debt-free by ${loanPaidOffMonth.date}`\r\n              : `Your loan will decrease over the projection period`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nNetWorthChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  loanPaidOffMonth: PropTypes.object,\r\n  savingsGoalReachedMonth: PropTypes.object\r\n};\r\n\r\nexport default NetWorthChart;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * SavingsGrowthChart Component\r\n * Displays a chart showing the growth of savings over time\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @param {Object} props.savingsGoalReachedMonth - Month when 100K savings goal is reached (or null)\r\n * @returns {JSX.Element}\r\n */\r\nconst SavingsGrowthChart = ({ chartData, savingsGoalReachedMonth }) => {\r\n  return (\r\n    <Card title=\"Savings Growth Projection\" titleColor=\"bg-green-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <AreaChart\r\n            data={chartData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"cashSavings\"\r\n              name=\"Cash Savings\"\r\n              stroke=\"#2FD87B\"\r\n              fill=\"#2FD87B\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"cpfBalance\"\r\n              name=\"CPF Balance\"\r\n              stroke=\"#8884d8\"\r\n              fill=\"#8884d8\"\r\n              fillOpacity={0.3}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"totalNetWorth\"\r\n              name=\"Total Net Worth\"\r\n              stroke=\"#0088FE\"\r\n              fill=\"#0088FE\"\r\n              fillOpacity={0.1}\r\n              activeDot={{ r: 6 }}\r\n            />\r\n            {savingsGoalReachedMonth && (\r\n              <ReferenceLine\r\n                x={savingsGoalReachedMonth.date}\r\n                stroke=\"green\"\r\n                strokeDasharray=\"3 3\"\r\n                label={{\r\n                  value: \"$100K Savings Goal\",\r\n                  position: \"top\",\r\n                  fill: \"green\",\r\n                }}\r\n              />\r\n            )}\r\n            <ReferenceLine\r\n              y={100000}\r\n              stroke=\"blue\"\r\n              strokeDasharray=\"3 3\"\r\n              label={{\r\n                value: \"$100K\",\r\n                position: \"right\",\r\n                fill: \"blue\",\r\n              }}\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\r\n        <h3 className=\"font-medium text-green-800 mb-2\">\r\n          Savings Milestone\r\n        </h3>\r\n        <p className=\"text-sm\">\r\n          {savingsGoalReachedMonth\r\n            ? `You'll reach $100K in cash savings by ${savingsGoalReachedMonth.date}`\r\n            : `Keep working towards your $100K cash savings goal`}\r\n        </p>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nSavingsGrowthChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  savingsGoalReachedMonth: PropTypes.object\r\n};\r\n\r\nexport default SavingsGrowthChart;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport Card from \"../../common/Card\";\r\nimport { formatCurrency } from \"../../../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * CashFlowChart Component\r\n * Displays a chart showing the monthly cash flow breakdown\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Array} props.chartData - Filtered projection data points for the chart\r\n * @returns {JSX.Element}\r\n */\r\nconst CashFlowChart = ({ chartData }) => {\r\n  // Use only the first 6 months of data for the bar chart\r\n  const limitedData = chartData.slice(0, 6);\r\n  \r\n  return (\r\n    <Card title=\"Monthly Cash Flow\" titleColor=\"bg-blue-600\">\r\n      <div className=\"h-80\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <BarChart\r\n            data={limitedData}\r\n            margin={{\r\n              top: 10,\r\n              right: 10,\r\n              left: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              angle={-45}\r\n              textAnchor=\"end\"\r\n              height={60}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              width={70}\r\n            />\r\n            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n            <Legend />\r\n            <Bar\r\n              dataKey=\"takeHomePay\"\r\n              name=\"Take-Home Pay\"\r\n              fill=\"#8884d8\"\r\n            />\r\n            <Bar\r\n              dataKey=\"expenses\"\r\n              name=\"Living Expenses\"\r\n              fill=\"#ff7300\"\r\n            />\r\n            <Bar\r\n              dataKey=\"loanPayment\"\r\n              name=\"Loan Payment\"\r\n              fill=\"#ff0000\"\r\n            />\r\n            <Bar\r\n              dataKey=\"monthlySavings\"\r\n              name=\"Cash Savings\"\r\n              fill=\"#82ca9d\"\r\n            />\r\n            <Bar\r\n              dataKey=\"totalCpfContribution\"\r\n              name=\"CPF Contributions\"\r\n              fill=\"#9370DB\"\r\n            />\r\n            <Bar\r\n              dataKey=\"bonusAmount\"\r\n              name=\"Bonuses\"\r\n              fill=\"#2ECC40\"\r\n            />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\r\n        <h3 className=\"font-medium text-blue-800 mb-2\">\r\n          Cash Flow Breakdown\r\n        </h3>\r\n        <p className=\"text-sm\">\r\n          This chart shows your monthly cash flow for the next 6 months, including income, expenses, and savings.\r\n        </p>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nCashFlowChart.propTypes = {\r\n  chartData: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default CashFlowChart;","import React, { useContext, useState } from \"react\";\r\nimport { FinancialContext } from \"../context/FinancialContext\";\r\nimport ExpenseBreakdown from \"../components/dashboard/ExpenseBreakdown\";\r\nimport { \r\n  NetWorthChart, \r\n  SavingsGrowthChart, \r\n  CashFlowChart \r\n} from \"../components/dashboard/charts\";\r\nimport Card from \"../components/common/Card\";\r\nimport { formatCurrency, formatPercent } from \"../services/formatters/currencyFormatters\";\r\n\r\n/**\r\n * Dashboard Page Component\r\n * Main financial dashboard showing financial summary, charts, and projections\r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst Dashboard = () => {\r\n  const {\r\n    financialData,\r\n    updateFinancialData,\r\n    updateProjectionSettings,\r\n    totalExpenses,\r\n    calculateAge,\r\n    getMonthName,\r\n    formatDate,\r\n  } = useContext(FinancialContext);\r\n\r\n  const [activeTab, setActiveTab] = useState(\"summary\");\r\n\r\n  // State for projection rows to display\r\n  const [rowsToDisplay, setRowsToDisplay] = useState(\r\n    financialData.projectionSettings?.rowsToDisplay || 36\r\n  );\r\n\r\n  // Handle changing the number of rows to display\r\n  const handleRowsToDisplayChange = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    setRowsToDisplay(value);\r\n    updateProjectionSettings({\r\n      rowsToDisplay: value,\r\n    });\r\n  };\r\n\r\n  // Calculate financial projection\r\n  const calculateProjection = () => {\r\n    const projection = [];\r\n\r\n    // Extract values from context\r\n    const { personalInfo, income, expenses, yearlyBonuses } = financialData;\r\n\r\n    // Initial values\r\n    let currentSavings = personalInfo.currentSavings;\r\n    let loanRemaining = personalInfo.remainingLoan;\r\n    let cpfBalance = personalInfo.currentCpfBalance || 0; // Use user-provided CPF balance\r\n    const birthYear = personalInfo.birthday.year;\r\n    const birthMonth = personalInfo.birthday.month;\r\n\r\n    // Parameters\r\n    let currentSalary = income.currentSalary;\r\n    const cpfRate = income.cpfRate / 100;\r\n    const employerCpfRate = income.employerCpfRate / 100;\r\n    const monthlyExpenses = totalExpenses;\r\n    const loanPayment = personalInfo.monthlyRepayment;\r\n    const annualInterestRate = personalInfo.interestRate / 100;\r\n    const monthlyInterestRate = annualInterestRate / 12;\r\n\r\n    // Calculate months\r\n    let startMonth = personalInfo.projectionStart.month;\r\n    let startYear = personalInfo.projectionStart.year;\r\n\r\n    // Get salary adjustments if available, or create from legacy data\r\n    const salaryAdjustments = income.salaryAdjustments || [];\r\n\r\n    // If using legacy format, convert to array format for compatibility\r\n    if (!income.salaryAdjustments && income.futureSalary) {\r\n      salaryAdjustments.push({\r\n        month: income.salaryAdjustmentMonth,\r\n        year: income.salaryAdjustmentYear,\r\n        newSalary: income.futureSalary,\r\n      });\r\n    }\r\n\r\n    // Sort salary adjustments by date\r\n    const sortedAdjustments = [...salaryAdjustments].sort((a, b) => {\r\n      if (a.year !== b.year) return a.year - b.year;\r\n      return a.month - b.month;\r\n    });\r\n\r\n    // Get yearly bonuses\r\n    const sortedBonuses = yearlyBonuses\r\n      ? [...yearlyBonuses].sort((a, b) => {\r\n          if (a.year !== b.year) return a.year - b.year;\r\n          return a.month - b.month;\r\n        })\r\n      : [];\r\n\r\n    // Track milestones\r\n    let loanPaidOffMonth = null;\r\n    let savingsGoalReachedMonth = null; // This will now track only cash savings (excluding CPF)\r\n\r\n    // Generate projection for 60 months (5 years)\r\n    for (let month = 0; month < 60; month++) {\r\n      const currentMonth = ((startMonth + month - 1) % 12) + 1;\r\n      const currentYear =\r\n        startYear + Math.floor((startMonth + month - 1) / 12);\r\n      const monthYearStr = `${getMonthName(currentMonth).substring(\r\n        0,\r\n        3\r\n      )} ${currentYear}`;\r\n\r\n      // Calculate age\r\n      let ageYears = currentYear - birthYear;\r\n      let ageMonths = currentMonth - birthMonth;\r\n      if (ageMonths < 0) {\r\n        ageYears--;\r\n        ageMonths += 12;\r\n      }\r\n      const ageStr = `${ageYears}y ${ageMonths}m`;\r\n\r\n      // Check for salary adjustments\r\n      for (const adjustment of sortedAdjustments) {\r\n        if (\r\n          currentMonth === adjustment.month &&\r\n          currentYear === adjustment.year\r\n        ) {\r\n          currentSalary = adjustment.newSalary;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Calculate take-home pay\r\n      const cpfContribution = currentSalary * cpfRate;\r\n      const employerCpf = currentSalary * employerCpfRate;\r\n      const takeHomePay = currentSalary - cpfContribution;\r\n\r\n      // Check for yearly bonuses in this month\r\n      let bonusAmount = 0;\r\n      let bonusDescription = \"\";\r\n\r\n      for (const bonus of sortedBonuses) {\r\n        if (\r\n          currentMonth === bonus.month &&\r\n          currentYear === bonus.year\r\n        ) {\r\n          bonusAmount += bonus.amount;\r\n          bonusDescription = bonusDescription\r\n            ? `${bonusDescription}, ${bonus.description}`\r\n            : bonus.description;\r\n        }\r\n      }\r\n\r\n      // Calculate loan payment and remaining balance\r\n      let actualLoanPayment = loanPayment;\r\n      let interestForMonth = loanRemaining * monthlyInterestRate;\r\n      let principalPayment = Math.min(\r\n        loanRemaining,\r\n        loanPayment - interestForMonth\r\n      );\r\n\r\n      if (loanRemaining <= 0) {\r\n        interestForMonth = 0;\r\n        principalPayment = 0;\r\n        actualLoanPayment = 0;\r\n        loanRemaining = 0;\r\n      } else {\r\n        loanRemaining = Math.max(0, loanRemaining - principalPayment);\r\n      }\r\n\r\n      // Record loan paid off milestone\r\n      if (loanRemaining === 0 && loanPaidOffMonth === null) {\r\n        loanPaidOffMonth = month;\r\n      }\r\n\r\n      // Calculate monthly savings (including any bonuses)\r\n      const monthlySavings =\r\n        takeHomePay - monthlyExpenses - actualLoanPayment + bonusAmount;\r\n\r\n      // Update balances\r\n      cpfBalance += cpfContribution + employerCpf;\r\n      currentSavings += monthlySavings;\r\n      const totalNetWorth = currentSavings + cpfBalance - loanRemaining;\r\n\r\n      // Record savings goal milestone - now only for cash savings (excluding CPF)\r\n      if (currentSavings >= 100000 && savingsGoalReachedMonth === null) {\r\n        savingsGoalReachedMonth = month;\r\n      }\r\n\r\n      // Create data point\r\n      projection.push({\r\n        month: month + 1,\r\n        date: monthYearStr,\r\n        age: ageStr,\r\n        monthlySalary: currentSalary,\r\n        takeHomePay: takeHomePay,\r\n        expenses: monthlyExpenses,\r\n        loanPayment: actualLoanPayment,\r\n        loanRemaining: loanRemaining,\r\n        monthlySavings: monthlySavings,\r\n        bonusAmount: bonusAmount,\r\n        bonusDescription: bonusDescription,\r\n        cpfContribution: cpfContribution,\r\n        employerCpfContribution: employerCpf,\r\n        totalCpfContribution: cpfContribution + employerCpf,\r\n        cpfBalance: cpfBalance,\r\n        cashSavings: currentSavings,\r\n        totalNetWorth: totalNetWorth,\r\n        milestone:\r\n          month === loanPaidOffMonth\r\n            ? \"Loan Paid Off\"\r\n            : month === savingsGoalReachedMonth\r\n            ? \"100K Cash Savings Goal\"\r\n            : bonusAmount > 0\r\n            ? bonusDescription\r\n            : null,\r\n      });\r\n    }\r\n\r\n    return {\r\n      projection,\r\n      loanPaidOffMonth:\r\n        loanPaidOffMonth !== null ? projection[loanPaidOffMonth] : null,\r\n      savingsGoalReachedMonth:\r\n        savingsGoalReachedMonth !== null\r\n          ? projection[savingsGoalReachedMonth]\r\n          : null,\r\n    };\r\n  };\r\n\r\n  const { projection, loanPaidOffMonth, savingsGoalReachedMonth } =\r\n    calculateProjection();\r\n\r\n  // Expense breakdown for pie chart\r\n  const expenseData = [\r\n    ...financialData.expenses.map((expense) => ({\r\n      name: expense.name,\r\n      value: expense.amount,\r\n    })),\r\n    {\r\n      name: \"Loan Payment\",\r\n      value: financialData.personalInfo.monthlyRepayment,\r\n    },\r\n  ];\r\n\r\n  // Extract summary data\r\n  const timeToPayLoan = loanPaidOffMonth\r\n    ? `${Math.floor(loanPaidOffMonth.month / 12)} years ${\r\n        loanPaidOffMonth.month % 12\r\n      } months`\r\n    : \"Not within projection\";\r\n\r\n  const timeToSavingsGoal = savingsGoalReachedMonth\r\n    ? `${Math.floor(savingsGoalReachedMonth.month / 12)} years ${\r\n        savingsGoalReachedMonth.month % 12\r\n      } months`\r\n    : \"Not within projection\";\r\n\r\n  // Current monthly income & expenses breakdown\r\n  const currentSalary = financialData.income.currentSalary;\r\n  const cpfContribution =\r\n    currentSalary * (financialData.income.cpfRate / 100);\r\n  const employerCpfContribution =\r\n    currentSalary * (financialData.income.employerCpfRate / 100);\r\n  const takeHomePay = currentSalary - cpfContribution;\r\n  const monthlyExpenses = totalExpenses;\r\n  const loanPayment = financialData.personalInfo.monthlyRepayment;\r\n  const monthlySavings = takeHomePay - monthlyExpenses - loanPayment;\r\n  const savingsRate = monthlySavings / takeHomePay;\r\n  const totalMonthlyIncome = currentSalary + employerCpfContribution;\r\n\r\n  // Calculate total yearly bonuses for current year\r\n  const currentYear = new Date().getFullYear();\r\n  const yearlyBonusesThisYear = financialData.yearlyBonuses\r\n    ? financialData.yearlyBonuses\r\n        .filter((bonus) => bonus.year === currentYear)\r\n        .reduce((total, bonus) => total + bonus.amount, 0)\r\n    : 0;\r\n\r\n  // Filtered data for charts (every 3 months)\r\n  const chartData = projection.filter((item, index) => index % 3 === 0);\r\n\r\n  // Calculate asset allocation percentages\r\n  const liquidCash = financialData.personalInfo.currentSavings;\r\n  const cpfSavings = financialData.personalInfo.currentCpfBalance || 0;\r\n  const totalAssets = liquidCash + cpfSavings;\r\n\r\n  const liquidCashPercentage =\r\n    totalAssets > 0 ? (liquidCash / totalAssets) * 100 : 0;\r\n  const cpfPercentage =\r\n    totalAssets > 0 ? (cpfSavings / totalAssets) * 100 : 0;\r\n\r\n  // Asset allocation data for pie chart\r\n  const assetAllocationData = [\r\n    { name: \"Liquid Cash\", value: liquidCash },\r\n    { name: \"CPF (Locked)\", value: cpfSavings },\r\n  ];\r\n\r\n  // Calculate upcoming financial events (next 3 months)\r\n  const upcomingEvents = [];\r\n  const today = new Date();\r\n  const currentMonth = today.getMonth() + 1;\r\n  const nextThreeMonths = [\r\n    { month: currentMonth, year: currentYear },\r\n    {\r\n      month:\r\n        currentMonth + 1 > 12\r\n          ? currentMonth + 1 - 12\r\n          : currentMonth + 1,\r\n      year: currentMonth + 1 > 12 ? currentYear + 1 : currentYear,\r\n    },\r\n    {\r\n      month:\r\n        currentMonth + 2 > 12\r\n          ? currentMonth + 2 - 12\r\n          : currentMonth + 2,\r\n      year: currentMonth + 2 > 12 ? currentYear + 1 : currentYear,\r\n    },\r\n  ];\r\n\r\n  // Find salary adjustments in next 3 months\r\n  if (financialData.income.salaryAdjustments) {\r\n    financialData.income.salaryAdjustments.forEach((adjustment) => {\r\n      const isUpcoming = nextThreeMonths.some(\r\n        (period) =>\r\n          period.month === adjustment.month &&\r\n          period.year === adjustment.year\r\n      );\r\n\r\n      if (isUpcoming) {\r\n        upcomingEvents.push({\r\n          type: \"Salary Adjustment\",\r\n          date: `${getMonthName(adjustment.month)} ${\r\n            adjustment.year\r\n          }`,\r\n          amount: adjustment.newSalary,\r\n          description: `Salary changes to ${formatCurrency(\r\n            adjustment.newSalary\r\n          )}`,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Find bonuses in next 3 months\r\n  if (financialData.yearlyBonuses) {\r\n    financialData.yearlyBonuses.forEach((bonus) => {\r\n      const isUpcoming = nextThreeMonths.some(\r\n        (period) =>\r\n          period.month === bonus.month && period.year === bonus.year\r\n      );\r\n\r\n      if (isUpcoming) {\r\n        upcomingEvents.push({\r\n          type: \"Bonus\",\r\n          date: `${getMonthName(bonus.month)} ${bonus.year}`,\r\n          amount: bonus.amount,\r\n          description: bonus.description,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // InfoItem component for consistent display of key-value pairs\r\n  const InfoItem = ({ label, value, highlighted = false }) => (\r\n    <div\r\n      className={`py-2 flex justify-between items-center border-b ${\r\n        highlighted ? \"bg-blue-50\" : \"\"\r\n      }`}\r\n    >\r\n      <span className=\"text-gray-700\">{label}</span>\r\n      <span\r\n        className={`font-medium ${highlighted ? \"text-blue-700\" : \"\"}`}\r\n      >\r\n        {value}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  // Status indicator component\r\n  const StatusIndicator = ({\r\n    value,\r\n    threshold1,\r\n    threshold2,\r\n    reverse = false,\r\n  }) => {\r\n    let color = \"bg-green-500\";\r\n\r\n    if (reverse) {\r\n      if (value > threshold1) color = \"bg-yellow-500\";\r\n      if (value > threshold2) color = \"bg-red-500\";\r\n    } else {\r\n      if (value < threshold1) color = \"bg-yellow-500\";\r\n      if (value < threshold2) color = \"bg-red-500\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"flex items-center\">\r\n        <div className={`w-3 h-3 rounded-full ${color} mr-2`}></div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-50 rounded-lg max-w-6xl mx-auto\">\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-blue-700 to-blue-500 text-white p-4 rounded-lg mb-6 shadow-md\">\r\n        <h1 className=\"text-xl md:text-2xl font-bold text-center\">\r\n          PERSONAL FINANCIAL DASHBOARD\r\n        </h1>\r\n      </div>\r\n\r\n      {/* Mobile-friendly Navigation Tabs */}\r\n      <div className=\"flex overflow-x-auto mb-6 bg-white rounded-lg shadow-sm border border-gray-200\">\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"summary\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"summary\")}\r\n        >\r\n          Summary\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"milestones\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"milestones\")}\r\n        >\r\n          Milestones\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"charts\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"charts\")}\r\n        >\r\n          Charts\r\n        </button>\r\n        <button\r\n          className={`py-3 px-4 font-medium whitespace-nowrap flex-shrink-0 transition-colors ${\r\n            activeTab === \"projection\"\r\n              ? \"text-blue-600 border-b-2 border-blue-600 bg-blue-50\"\r\n              : \"text-gray-600 hover:text-blue-600 hover:bg-gray-50\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"projection\")}\r\n        >\r\n          Projection\r\n        </button>\r\n      </div>\r\n\r\n      {/* Summary Tab */}\r\n      {activeTab === \"summary\" && (\r\n        <div className=\"space-y-6\">\r\n          {/* Financial Snapshot Cards */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {/* Liquid Cash Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-green-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Liquid Cash\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-green-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .currentSavings\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    Immediately available\r\n                  </p>\r\n                </div>\r\n                <StatusIndicator\r\n                  value={\r\n                    financialData.personalInfo\r\n                      .currentSavings\r\n                  }\r\n                  threshold1={5000}\r\n                  threshold2={2000}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* CPF Balance Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-purple-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    CPF Balance\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-purple-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .currentCpfBalance || 0\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    Locked until retirement\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Remaining Loan Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-red-500\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Remaining Loan\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold text-red-700\">\r\n                    {formatCurrency(\r\n                      financialData.personalInfo\r\n                        .remainingLoan\r\n                    )}\r\n                  </p>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    {timeToPayLoan !==\r\n                    \"Not within projection\"\r\n                      ? `Paid off in ${timeToPayLoan}`\r\n                      : \"Long-term loan\"}\r\n                  </p>\r\n                </div>\r\n                <StatusIndicator\r\n                  value={\r\n                    financialData.personalInfo.remainingLoan\r\n                  }\r\n                  threshold1={20000}\r\n                  threshold2={40000}\r\n                  reverse={true}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Net Worth Card */}\r\n            <div className=\"bg-white p-4 rounded-lg shadow-md border-l-4 border-blue-500\">\r\n              <p className=\"text-sm text-gray-500\">\r\n                Total Net Worth\r\n              </p>\r\n              <p className=\"text-2xl font-bold text-blue-700\">\r\n                {formatCurrency(\r\n                  financialData.personalInfo.currentSavings +\r\n                    (financialData.personalInfo\r\n                      .currentCpfBalance || 0) -\r\n                    financialData.personalInfo.remainingLoan\r\n                )}\r\n              </p>\r\n              <p className=\"text-xs text-gray-500\">\r\n                Assets minus liabilities\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Monthly Overview Card */}\r\n          <Card title=\"Monthly Cash Flow\" titleColor=\"bg-green-600\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n              <div className=\"bg-blue-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-blue-800 mb-2\">\r\n                  Monthly Income\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-blue-700\">\r\n                  {formatCurrency(takeHomePay)}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Take-home pay after CPF\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"bg-red-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-red-800 mb-2\">\r\n                  Monthly Expenses\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-red-700\">\r\n                  {formatCurrency(\r\n                    monthlyExpenses + loanPayment\r\n                  )}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Including loan payment\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"bg-green-50 p-3 rounded-lg\">\r\n                <h3 className=\"font-medium text-green-800 mb-2\">\r\n                  Monthly Savings\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-green-700\">\r\n                  {formatCurrency(monthlySavings)}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {formatPercent(savingsRate)} of take-home\r\n                  pay\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Cash Flow Progress Bar */}\r\n            <div className=\"mt-2 mb-6\">\r\n              <div className=\"flex justify-between text-sm mb-1\">\r\n                <span className=\"text-blue-600 font-medium\">\r\n                  Income\r\n                </span>\r\n                <span className=\"text-gray-600\">\r\n                  {formatCurrency(takeHomePay)}\r\n                </span>\r\n              </div>\r\n              <div className=\"w-full h-6 bg-gray-200 rounded-full overflow-hidden\">\r\n                <div className=\"flex h-full\">\r\n                  <div\r\n                    className=\"bg-red-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (monthlyExpenses /\r\n                          takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Living Expenses\"\r\n                  ></div>\r\n                  <div\r\n                    className=\"bg-orange-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (loanPayment / takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Loan Payment\"\r\n                  ></div>\r\n                  <div\r\n                    className=\"bg-green-500 h-full\"\r\n                    style={{\r\n                      width: `${\r\n                        (monthlySavings / takeHomePay) *\r\n                        100\r\n                      }%`,\r\n                    }}\r\n                    title=\"Savings\"\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex text-xs mt-1 justify-between\">\r\n                <span className=\"text-red-600\">\r\n                  Expenses: {formatCurrency(monthlyExpenses)}\r\n                </span>\r\n                <span className=\"text-orange-600\">\r\n                  Loan: {formatCurrency(loanPayment)}\r\n                </span>\r\n                <span className=\"text-green-600\">\r\n                  Savings: {formatCurrency(monthlySavings)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Expense Breakdown (Using our new component) */}\r\n          <ExpenseBreakdown \r\n            expenseData={expenseData} \r\n            totalExpenses={totalExpenses} \r\n            loanPayment={loanPayment} \r\n          />\r\n\r\n          {/* More cards and content... */}\r\n        </div>\r\n      )}\r\n\r\n      {/* Charts Tab */}\r\n      {activeTab === \"charts\" && (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 gap-6\">\r\n            {/* Net Worth Chart */}\r\n            <NetWorthChart \r\n              chartData={chartData} \r\n              loanPaidOffMonth={loanPaidOffMonth} \r\n              savingsGoalReachedMonth={savingsGoalReachedMonth} \r\n            />\r\n\r\n            {/* Savings Growth Chart */}\r\n            <SavingsGrowthChart \r\n              chartData={chartData} \r\n              savingsGoalReachedMonth={savingsGoalReachedMonth} \r\n            />\r\n\r\n            {/* Cash Flow Chart */}\r\n            <CashFlowChart chartData={chartData} />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Milestones Tab */}\r\n      {activeTab === \"milestones\" && (\r\n        <div className=\"space-y-6\">\r\n          <Card title=\"Key Financial Milestones\">\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-50\">\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Milestone\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Date\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Time to Achieve\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Age\r\n                    </th>\r\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Savings at Milestone\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  <tr className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                      Student Loan Paid Off\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? loanPaidOffMonth.date\r\n                        : \"Not within projection\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {timeToPayLoan}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? loanPaidOffMonth.age\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {loanPaidOffMonth\r\n                        ? formatCurrency(\r\n                            loanPaidOffMonth.cashSavings\r\n                          )\r\n                        : \"-\"}\r\n                    </td>\r\n                  </tr>\r\n                  <tr className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                      $100,000 Savings Achieved\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? savingsGoalReachedMonth.date\r\n                        : \"Not within projection\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {timeToSavingsGoal}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? savingsGoalReachedMonth.age\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                      {savingsGoalReachedMonth\r\n                        ? formatCurrency(\r\n                            savingsGoalReachedMonth.cashSavings\r\n                          )\r\n                        : \"-\"}\r\n                    </td>\r\n                  </tr>\r\n\r\n                  {/* Yearly Bonuses as Milestones */}\r\n                  {financialData.yearlyBonuses &&\r\n                    financialData.yearlyBonuses.map(\r\n                      (bonus, index) => {\r\n                        // Find projection entry for this bonus\r\n                        const bonusMonth =\r\n                          projection.find((p) =>\r\n                            p.date.includes(\r\n                              `${getMonthName(\r\n                                bonus.month\r\n                              ).substring(\r\n                                0,\r\n                                3\r\n                              )} ${bonus.year}`\r\n                            )\r\n                          );\r\n\r\n                        if (!bonusMonth) return null;\r\n\r\n                        return (\r\n                          <tr\r\n                            key={`bonus-${index}`}\r\n                            className=\"hover:bg-gray-50 bg-green-50\"\r\n                          >\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700 font-medium\">\r\n                              {bonus.description}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {bonusMonth.date}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {Math.floor(\r\n                                bonusMonth.month /\r\n                                  12\r\n                              )}{\" \"}\r\n                              years{\" \"}\r\n                              {bonusMonth.month %\r\n                                12}{\" \"}\r\n                              months\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {bonusMonth.age}\r\n                            </td>\r\n                            <td className=\"px-4 py-3 text-sm text-gray-700\">\r\n                              {formatCurrency(\r\n                                bonus.amount\r\n                              )}\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      }\r\n                    )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Card>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Progress Towards Loan Payment */}\r\n            <Card title=\"Progress Towards Loan Payment\">\r\n              {loanPaidOffMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Original Loan:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Remaining:{\" \"}\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan > 0\r\n                            ? projection[0]\r\n                                .loanRemaining\r\n                            : 0\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            ((financialData\r\n                              .personalInfo\r\n                              .remainingLoan -\r\n                              projection[0]\r\n                                .loanRemaining) /\r\n                              financialData\r\n                                .personalInfo\r\n                                .remainingLoan) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-green-800 font-medium\">\r\n                          Congratulations! You'll be\r\n                          debt-free by{\" \"}\r\n                          <span className=\"font-bold\">\r\n                            {loanPaidOffMonth.date}\r\n                          </span>{\" \"}\r\n                          at age{\" \"}\r\n                          {loanPaidOffMonth.age}.\r\n                        </p>\r\n                        <p className=\"mt-1 text-green-700\">\r\n                          Total repayment period:{\" \"}\r\n                          {timeToPayLoan} from{\" \"}\r\n                          {getMonthName(\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .month\r\n                          )}{\" \"}\r\n                          {\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .year\r\n                          }\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {!loanPaidOffMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Original Loan:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .remainingLoan\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Remaining:{\" \"}\r\n                      <span className=\"font-medium text-red-600\">\r\n                        {formatCurrency(\r\n                          projection[\r\n                            projection.length - 1\r\n                          ].loanRemaining\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            (1 -\r\n                              projection[\r\n                                projection.length -\r\n                                  1\r\n                              ].loanRemaining /\r\n                                financialData\r\n                                  .personalInfo\r\n                                  .remainingLoan) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-blue-800 font-medium\">\r\n                          You're making progress, but\r\n                          your loan won't be fully\r\n                          paid within the 5-year\r\n                          projection period.\r\n                        </p>\r\n                        <p className=\"mt-1 text-blue-700\">\r\n                          Consider increasing your\r\n                          monthly payments to\r\n                          accelerate debt payoff.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n\r\n            {/* Progress Towards Savings Goal */}\r\n            <Card title=\"Progress Towards $100K Cash Savings\">\r\n              {savingsGoalReachedMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Starting Cash:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .currentSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Goal:{\" \"}\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {formatCurrency(100000)}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-green-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.min(\r\n                          100,\r\n                          (financialData.personalInfo\r\n                            .currentSavings /\r\n                            100000) *\r\n                            100\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-green-800 font-medium\">\r\n                          Congratulations! You'll\r\n                          reach $100,000 in cash\r\n                          savings by{\" \"}\r\n                          <span className=\"font-bold\">\r\n                            {\r\n                              savingsGoalReachedMonth.date\r\n                            }\r\n                          </span>{\" \"}\r\n                          at age{\" \"}\r\n                          {\r\n                            savingsGoalReachedMonth.age\r\n                          }\r\n                          .\r\n                        </p>\r\n                        <p className=\"mt-1 text-green-700\">\r\n                          Total savings period:{\" \"}\r\n                          {timeToSavingsGoal} from{\" \"}\r\n                          {getMonthName(\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .month\r\n                          )}{\" \"}\r\n                          {\r\n                            financialData\r\n                              .personalInfo\r\n                              .projectionStart\r\n                              .year\r\n                          }\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {!savingsGoalReachedMonth && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm mb-1\">\r\n                    <span className=\"text-gray-600\">\r\n                      Starting Cash:{\" \"}\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          financialData.personalInfo\r\n                            .currentSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-600\">\r\n                      Current:{\" \"}\r\n                      <span className=\"font-medium text-blue-600\">\r\n                        {formatCurrency(\r\n                          projection[\r\n                            projection.length - 1\r\n                          ].cashSavings\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden\">\r\n                    <div\r\n                      className=\"bg-blue-500 h-4 rounded-full transition-all duration-500 ease-out\"\r\n                      style={{\r\n                        width: `${Math.max(\r\n                          0,\r\n                          Math.min(\r\n                            100,\r\n                            (financialData\r\n                              .personalInfo\r\n                              .currentSavings /\r\n                              100000) *\r\n                              100\r\n                          )\r\n                        )}%`,\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mt-4\">\r\n                    <div className=\"flex items-start\">\r\n                      <svg\r\n                        className=\"h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                        ></path>\r\n                      </svg>\r\n                      <div>\r\n                        <p className=\"text-blue-800 font-medium\">\r\n                          You're making progress, but\r\n                          you won't reach the $100,000\r\n                          cash savings goal within the\r\n                          5-year projection period.\r\n                        </p>\r\n                        <p className=\"mt-1 text-blue-700\">\r\n                          Consider increasing your\r\n                          savings rate after paying\r\n                          off your loan to accelerate\r\n                          progress.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Projection Table Tab */}\r\n      {activeTab === \"projection\" && (\r\n        <Card title=\"Monthly Financial Projection\">\r\n          {/* Rows to Display Control */}\r\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n            <div className=\"flex flex-wrap items-center justify-between\">\r\n              <div className=\"mr-4 mb-2 sm:mb-0\">\r\n                <label\r\n                  htmlFor=\"rowsToDisplay\"\r\n                  className=\"block text-sm font-medium text-blue-700 mb-1\"\r\n                >\r\n                  Months to Display:\r\n                </label>\r\n                <select\r\n                  id=\"rowsToDisplay\"\r\n                  value={rowsToDisplay}\r\n                  onChange={handleRowsToDisplayChange}\r\n                  className=\"w-32 px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                >\r\n                  <option value={12}>\r\n                    12 months (1 year)\r\n                  </option>\r\n                  <option value={24}>\r\n                    24 months (2 years)\r\n                  </option>\r\n                  <option value={36}>\r\n                    36 months (3 years)\r\n                  </option>\r\n                  <option value={48}>\r\n                    48 months (4 years)\r\n                  </option>\r\n                  <option value={60}>\r\n                    60 months (5 years)\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div className=\"hidden sm:block text-blue-700 mr-2\">\r\n                  <svg\r\n                    className=\"w-5 h-5\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                    ></path>\r\n                  </svg>\r\n                </div>\r\n                <p className=\"text-sm text-blue-700\">\r\n                  Showing {rowsToDisplay} months of financial\r\n                  projection data\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"overflow-x-auto -mx-4\">\r\n            <div className=\"inline-block min-w-full align-middle p-4\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-50\">\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Month\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Date\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Take-Home\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Expenses\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Loan Payment\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Loan Remaining\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Bonus\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Monthly Savings\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      Cash Savings\r\n                    </th>\r\n                    <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\r\n                      CPF Balance\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {projection\r\n                    .slice(0, rowsToDisplay)\r\n                    .map((month, index) => (\r\n                      <tr\r\n                        key={index}\r\n                        className={`${\r\n                          month.milestone\r\n                            ? \"bg-green-50\"\r\n                            : index % 2 === 0\r\n                            ? \"bg-gray-50\"\r\n                            : \"\"\r\n                        } hover:bg-blue-50 transition-colors`}\r\n                      >\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\r\n                          {month.month}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap\">\r\n                          {month.date}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.takeHomePay\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-orange-600\">\r\n                          {formatCurrency(\r\n                            month.expenses\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\r\n                          {formatCurrency(\r\n                            month.loanPayment\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-red-600\">\r\n                          {formatCurrency(\r\n                            month.loanRemaining\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\r\n                          {month.bonusAmount > 0\r\n                            ? formatCurrency(\r\n                                month.bonusAmount\r\n                              )\r\n                            : \"-\"}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.monthlySavings\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-green-600\">\r\n                          {formatCurrency(\r\n                            month.cashSavings\r\n                          )}\r\n                        </td>\r\n                        <td className=\"px-3 py-2 text-sm text-gray-700 whitespace-nowrap font-medium text-purple-600\">\r\n                          {formatCurrency(\r\n                            month.cpfBalance\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Show milestone information if available */}\r\n          {(loanPaidOffMonth ||\r\n            savingsGoalReachedMonth ||\r\n            financialData.yearlyBonuses?.length > 0) && (\r\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n              <h3 className=\"font-medium text-blue-700 mb-2\">\r\n                Key Milestones:\r\n              </h3>\r\n              <ul className=\"space-y-2\">\r\n                {loanPaidOffMonth && (\r\n                  <li className=\"flex items-start\">\r\n                    <svg\r\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span>\r\n                      <span className=\"font-medium\">\r\n                        Loan Paid Off:\r\n                      </span>{\" \"}\r\n                      {loanPaidOffMonth.date} (Month{\" \"}\r\n                      {loanPaidOffMonth.month})\r\n                    </span>\r\n                  </li>\r\n                )}\r\n                {savingsGoalReachedMonth && (\r\n                  <li className=\"flex items-start\">\r\n                    <svg\r\n                      className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span>\r\n                      <span className=\"font-medium\">\r\n                        $100K Savings Reached:\r\n                      </span>{\" \"}\r\n                      {savingsGoalReachedMonth.date}{\" \"}\r\n                      (Month{\" \"}\r\n                      {savingsGoalReachedMonth.month})\r\n                    </span>\r\n                  </li>\r\n                )}\r\n\r\n                {/* List bonuses as milestones */}\r\n                {financialData.yearlyBonuses &&\r\n                  financialData.yearlyBonuses.map(\r\n                    (bonus, index) => {\r\n                      // Find date for this bonus\r\n                      const bonusProjectionDate =\r\n                        projection.find((p) =>\r\n                          p.date.includes(\r\n                            `${getMonthName(\r\n                              bonus.month\r\n                            ).substring(0, 3)} ${\r\n                              bonus.year\r\n                            }`\r\n                          )\r\n                        )?.date;\r\n\r\n                      if (!bonusProjectionDate)\r\n                        return null;\r\n\r\n                      return (\r\n                        <li\r\n                          key={`bonus-milestone-${index}`}\r\n                          className=\"flex items-start\"\r\n                        >\r\n                          <svg\r\n                            className=\"h-5 w-5 text-purple-500 mr-2 mt-0.5 flex-shrink-0\"\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                          >\r\n                            <path\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                              strokeWidth=\"2\"\r\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                            ></path>\r\n                          </svg>\r\n                          <span>\r\n                            <span className=\"font-medium\">\r\n                              {bonus.description}:\r\n                            </span>{\" \"}\r\n                            {bonusProjectionDate} -{\" \"}\r\n                            {formatCurrency(\r\n                              bonus.amount\r\n                            )}\r\n                          </span>\r\n                        </li>\r\n                      );\r\n                    }\r\n                  )}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"names":["_ref","children","title","className","titleColor","_jsxs","_jsx","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","expenseData","totalExpenses","loanPayment","COLORS","Card","filter","expense","name","map","index","ResponsiveContainer","width","height","PieChart","Pie","data","dataKey","nameKey","cx","cy","outerRadius","fill","labelLine","label","_ref2","percent","toFixed","entry","Cell","length","Tooltip","formatter","chartData","loanPaidOffMonth","savingsGoalReachedMonth","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","angle","textAnchor","tick","fontSize","YAxis","yAxisId","tickFormatter","position","offset","orientation","Legend","Area","type","stroke","fillOpacity","activeDot","r","Line","strokeWidth","dot","ReferenceLine","x","date","AreaChart","y","limitedData","slice","BarChart","Bar","Dashboard","_financialData$projec","_financialData$yearly","financialData","updateFinancialData","updateProjectionSettings","calculateAge","getMonthName","formatDate","useContext","FinancialContext","activeTab","setActiveTab","useState","rowsToDisplay","setRowsToDisplay","projectionSettings","projection","calculateProjection","personalInfo","income","expenses","yearlyBonuses","currentSavings","loanRemaining","remainingLoan","cpfBalance","currentCpfBalance","birthYear","birthday","year","birthMonth","month","currentSalary","cpfRate","employerCpfRate","monthlyExpenses","monthlyRepayment","monthlyInterestRate","interestRate","startMonth","projectionStart","startYear","salaryAdjustments","futureSalary","push","salaryAdjustmentMonth","salaryAdjustmentYear","newSalary","sortedAdjustments","sort","a","b","sortedBonuses","currentMonth","currentYear","Math","floor","monthYearStr","substring","ageYears","ageMonths","ageStr","adjustment","cpfContribution","employerCpf","takeHomePay","bonusAmount","bonusDescription","bonus","amount","description","actualLoanPayment","interestForMonth","principalPayment","min","max","monthlySavings","totalNetWorth","age","monthlySalary","employerCpfContribution","totalCpfContribution","cashSavings","milestone","timeToPayLoan","timeToSavingsGoal","savingsRate","Date","getFullYear","reduce","total","item","upcomingEvents","getMonth","nextThreeMonths","forEach","some","period","StatusIndicator","threshold1","threshold2","reverse","color","onClick","ExpenseBreakdown","NetWorthChart","SavingsGrowthChart","CashFlowChart","bonusMonth","find","p","includes","viewBox","strokeLinecap","strokeLinejoin","d","htmlFor","id","onChange","e","parseInt","target","_projection$find","bonusProjectionDate"],"sourceRoot":""}