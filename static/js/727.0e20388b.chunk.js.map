{"version":3,"file":"static/js/727.0e20388b.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/LineChart.js","components/RetirementPlanner.js"],"sourcesContent":["/**\n * @fileOverview Line Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Line } from '../cartesian/Line';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var LineChart = generateCategoricalChart({\n  chartName: 'LineChart',\n  GraphicalChild: Line,\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","// src/components/RetirementPlanner.js\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { FinancialContext } from \"../context/FinancialContext\";\r\nimport {\r\n    ResponsiveContainer,\r\n    AreaChart,\r\n    Area,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    ReferenceLine,\r\n    LineChart,\r\n    Line\r\n} from \"recharts\";\r\n\r\nconst RetirementPlanner = () => {\r\n    const { financialData, calculateAge } = useContext(FinancialContext);\r\n    \r\n    // Initialize state with default retirement settings\r\n    const [retirementPlan, setRetirementPlan] = useState({\r\n        retirementAge: 65,\r\n        lifeExpectancy: 90,\r\n        desiredMonthlyIncome: 6000,\r\n        inflationRate: 2.5,\r\n        investmentReturnPreRetirement: 7,\r\n        investmentReturnPostRetirement: 4,\r\n        cpfLifePayout: 1500,\r\n        additionalIncomeSource: 0,\r\n        currentSavings: financialData.personalInfo.currentSavings || 0,\r\n        currentAge: calculateAge(),\r\n        currentCpfBalance: financialData.personalInfo.currentCpfBalance || 0,\r\n        monthlySavingsRate: financialData.income.currentSalary * 0.2 || 1000, // Default to 20% of current salary\r\n    });\r\n    \r\n    // Format currency\r\n    const formatCurrency = (value) => {\r\n        return new Intl.NumberFormat(\"en-SG\", {\r\n            style: \"currency\",\r\n            currency: \"SGD\",\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0,\r\n        }).format(value);\r\n    };\r\n    \r\n    // Handle input changes\r\n    const handleInputChange = (name, value) => {\r\n        setRetirementPlan({\r\n            ...retirementPlan,\r\n            [name]: parseFloat(value) || 0\r\n        });\r\n    };\r\n    \r\n    // Calculate retirement projections\r\n    const calculateRetirementProjection = () => {\r\n        const {\r\n            retirementAge,\r\n            lifeExpectancy,\r\n            desiredMonthlyIncome,\r\n            inflationRate,\r\n            investmentReturnPreRetirement,\r\n            investmentReturnPostRetirement,\r\n            cpfLifePayout,\r\n            additionalIncomeSource,\r\n            currentSavings,\r\n            currentAge,\r\n            currentCpfBalance,\r\n            monthlySavingsRate\r\n        } = retirementPlan;\r\n        \r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const yearsInRetirement = lifeExpectancy - retirementAge;\r\n        \r\n        // Inflation-adjusted monthly income at retirement\r\n        const inflationFactor = Math.pow(1 + inflationRate / 100, yearsToRetirement);\r\n        const inflationAdjustedMonthlyIncome = desiredMonthlyIncome * inflationFactor;\r\n        \r\n        // Annual income needed in retirement\r\n        const annualIncomeNeeded = inflationAdjustedMonthlyIncome * 12;\r\n        \r\n        // Projected CPF Life payout with inflation\r\n        const projectedCpfPayout = cpfLifePayout * inflationFactor;\r\n        \r\n        // Additional income source with inflation\r\n        const projectedAdditionalIncome = additionalIncomeSource * inflationFactor;\r\n        \r\n        // Annual retirement withdrawal needed\r\n        const annualWithdrawalNeeded = annualIncomeNeeded - (projectedCpfPayout + projectedAdditionalIncome) * 12;\r\n        \r\n        // Calculate retirement nest egg needed using the 4% rule\r\n        // Adjusted with post-retirement investment return\r\n        const withdrawalRate = investmentReturnPostRetirement / 100;\r\n        const retirementNestEggNeeded = Math.max(0, annualWithdrawalNeeded / withdrawalRate);\r\n        \r\n        // Project savings growth until retirement\r\n        const projection = [];\r\n        let savingsBalance = currentSavings;\r\n        let cpfBalance = currentCpfBalance;\r\n        const annualSavings = monthlySavingsRate * 12;\r\n        const annualReturnRate = investmentReturnPreRetirement / 100;\r\n        \r\n        for (let year = 0; year <= yearsToRetirement + yearsInRetirement; year++) {\r\n            const currentYear = new Date().getFullYear() + year;\r\n            const age = currentAge + year;\r\n            const isRetired = age >= retirementAge;\r\n            \r\n            if (!isRetired) {\r\n                // Pre-retirement: Add savings and investment returns\r\n                savingsBalance = savingsBalance * (1 + annualReturnRate) + annualSavings;\r\n                cpfBalance = cpfBalance * (1.04); // Assuming 4% return on CPF\r\n            } else {\r\n                // Post-retirement: Withdraw from savings\r\n                const yearsSinceRetirement = age - retirementAge;\r\n                const inflationFactorRetirement = Math.pow(1 + inflationRate / 100, yearsSinceRetirement);\r\n                const withdrawalThisYear = annualWithdrawalNeeded * inflationFactorRetirement;\r\n                \r\n                savingsBalance = Math.max(0, savingsBalance * (1 + investmentReturnPostRetirement / 100) - withdrawalThisYear);\r\n                \r\n                // CPF Life continues to pay out, but balance doesn't change after retirement\r\n                // Just keeping it in the model for total net worth tracking\r\n            }\r\n            \r\n            // Total net worth\r\n            const totalNetWorth = savingsBalance + (isRetired ? 0 : cpfBalance);\r\n            \r\n            // Calculate savings ratio compared to target\r\n            const savingsRatio = isRetired ? \r\n                savingsBalance / retirementNestEggNeeded :\r\n                totalNetWorth / retirementNestEggNeeded;\r\n            \r\n            projection.push({\r\n                year: currentYear,\r\n                age,\r\n                savingsBalance: Math.round(savingsBalance),\r\n                cpfBalance: Math.round(isRetired ? 0 : cpfBalance), // CPF not counted after retirement\r\n                totalNetWorth: Math.round(totalNetWorth),\r\n                targetNeeded: Math.round(retirementNestEggNeeded),\r\n                savingsRatio,\r\n                isRetired,\r\n                annualIncome: isRetired ? \r\n                    Math.round(annualWithdrawalNeeded + (projectedCpfPayout + projectedAdditionalIncome) * 12) :\r\n                    0,\r\n                monthlyIncome: isRetired ?\r\n                    Math.round((annualWithdrawalNeeded + (projectedCpfPayout + projectedAdditionalIncome) * 12) / 12) :\r\n                    0\r\n            });\r\n        }\r\n        \r\n        return projection;\r\n    };\r\n    \r\n    // Calculate if savings are adequate\r\n    const determineRetirementReadiness = (projection) => {\r\n        const retirementYear = projection.findIndex(year => year.age === retirementPlan.retirementAge);\r\n        \r\n        if (retirementYear === -1) {\r\n            return {\r\n                status: \"unknown\",\r\n                message: \"Could not determine retirement readiness.\",\r\n                shortfall: 0,\r\n                retirementYear: null\r\n            };\r\n        }\r\n        \r\n        const retirementData = projection[retirementYear];\r\n        const retirementNestEggNeeded = retirementData.targetNeeded;\r\n        const projectedSavings = retirementData.totalNetWorth;\r\n        const shortfall = retirementNestEggNeeded - projectedSavings;\r\n        const savingsRatio = projectedSavings / retirementNestEggNeeded;\r\n        \r\n        let status;\r\n        let message;\r\n        \r\n        if (savingsRatio >= 1) {\r\n            status = \"excellent\";\r\n            message = `You're on track for retirement! By age ${retirementPlan.retirementAge}, you're projected to have ${formatCurrency(projectedSavings)}, exceeding your goal by ${formatCurrency(projectedSavings - retirementNestEggNeeded)}.`;\r\n        } else if (savingsRatio >= 0.8) {\r\n            status = \"good\";\r\n            message = `You're close to your retirement goal. By age ${retirementPlan.retirementAge}, you're projected to have ${formatCurrency(projectedSavings)}, which is ${Math.round(savingsRatio * 100)}% of your target. Consider increasing your savings slightly.`;\r\n        } else if (savingsRatio >= 0.5) {\r\n            status = \"caution\";\r\n            message = `You're making progress, but may fall short. By age ${retirementPlan.retirementAge}, you're projected to have ${formatCurrency(projectedSavings)}, which is ${Math.round(savingsRatio * 100)}% of your target. Consider increasing your monthly savings.`;\r\n        } else {\r\n            status = \"warning\";\r\n            message = `You're at risk of falling short of your retirement goal. By age ${retirementPlan.retirementAge}, you're projected to have ${formatCurrency(projectedSavings)}, which is only ${Math.round(savingsRatio * 100)}% of your target. You may need to significantly increase savings or adjust your retirement plan.`;\r\n        }\r\n        \r\n        return {\r\n            status,\r\n            message,\r\n            shortfall: Math.max(0, shortfall),\r\n            retirementYear: retirementData.year,\r\n            savingsRatio,\r\n            projectedSavings\r\n        };\r\n    };\r\n    \r\n    // Calculate monthly savings needed\r\n    const calculateMonthlySavingsNeeded = (projection) => {\r\n        const { retirementAge, currentAge } = retirementPlan;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        \r\n        const retirementYear = projection.findIndex(year => year.age === retirementAge);\r\n        if (retirementYear === -1) return 0;\r\n        \r\n        const retirementData = projection[retirementYear];\r\n        const shortfall = Math.max(0, retirementData.targetNeeded - retirementData.totalNetWorth);\r\n        \r\n        if (shortfall <= 0) return 0;\r\n        \r\n        // Basic calculation assuming even monthly contributions and ignoring investment returns\r\n        // For a more accurate calculation, this would need to be an iterative process\r\n        const annualReturnRate = retirementPlan.investmentReturnPreRetirement / 100;\r\n        const monthlyReturnRate = Math.pow(1 + annualReturnRate, 1/12) - 1;\r\n        \r\n        // Present value of an annuity formula\r\n        // PMT = FV * r / ((1+r)^n - 1)\r\n        const months = yearsToRetirement * 12;\r\n        const additionalSavingsNeeded = shortfall * monthlyReturnRate / \r\n            (Math.pow(1 + monthlyReturnRate, months) - 1);\r\n            \r\n        return Math.round(additionalSavingsNeeded);\r\n    };\r\n    \r\n    const projectionData = calculateRetirementProjection();\r\n    const retirementReadiness = determineRetirementReadiness(projectionData);\r\n    const additionalMonthlySavingsNeeded = calculateMonthlySavingsNeeded(projectionData);\r\n    \r\n    // Filter projection data for chart to avoid too many data points\r\n    const chartData = projectionData.filter((_, index) => index % 5 === 0 || index === projectionData.length - 1);\r\n    \r\n    // Colors based on readiness status\r\n    const getStatusColor = (status) => {\r\n        switch (status) {\r\n            case \"excellent\": return \"bg-green-100 text-green-800 border-green-200\";\r\n            case \"good\": return \"bg-blue-100 text-blue-800 border-blue-200\";\r\n            case \"caution\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\r\n            case \"warning\": return \"bg-red-100 text-red-800 border-red-200\";\r\n            default: return \"bg-gray-100 text-gray-800 border-gray-200\";\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <div className=\"bg-white rounded-lg shadow-md p-4\">\r\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">\r\n                    Retirement Planner\r\n                </h2>\r\n                \r\n                {/* Quick Summary */}\r\n                <div className={`p-4 rounded-lg border mb-6 ${getStatusColor(retirementReadiness.status)}`}>\r\n                    <h3 className=\"font-medium text-lg mb-2\">Retirement Readiness Summary</h3>\r\n                    <p className=\"mb-1\">{retirementReadiness.message}</p>\r\n                    \r\n                    {retirementReadiness.shortfall > 0 && (\r\n                        <p className=\"text-sm mt-2\">\r\n                            To close the projected shortfall of {formatCurrency(retirementReadiness.shortfall)}, \r\n                            consider saving an additional {formatCurrency(additionalMonthlySavingsNeeded)} per month \r\n                            until retirement.\r\n                        </p>\r\n                    )}\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    {/* Retirement Settings */}\r\n                    <div>\r\n                        <h3 className=\"font-medium text-blue-700 border-b pb-2 mb-4\">Retirement Settings</h3>\r\n                        \r\n                        <div className=\"space-y-4\">\r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Current Age: {retirementPlan.currentAge}\r\n                                </label>\r\n                                <p className=\"text-xs text-gray-500\">\r\n                                    Auto-calculated from your birthday\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Retirement Age\r\n                                </label>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min=\"55\"\r\n                                    max=\"75\"\r\n                                    step=\"1\"\r\n                                    value={retirementPlan.retirementAge}\r\n                                    onChange={(e) => handleInputChange('retirementAge', e.target.value)}\r\n                                    className=\"w-full\"\r\n                                />\r\n                                <div className=\"flex justify-between text-xs text-gray-500\">\r\n                                    <span>55</span>\r\n                                    <span className=\"font-medium\">{retirementPlan.retirementAge}</span>\r\n                                    <span>75</span>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Life Expectancy\r\n                                </label>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min=\"75\"\r\n                                    max=\"105\"\r\n                                    step=\"1\"\r\n                                    value={retirementPlan.lifeExpectancy}\r\n                                    onChange={(e) => handleInputChange('lifeExpectancy', e.target.value)}\r\n                                    className=\"w-full\"\r\n                                />\r\n                                <div className=\"flex justify-between text-xs text-gray-500\">\r\n                                    <span>75</span>\r\n                                    <span className=\"font-medium\">{retirementPlan.lifeExpectancy}</span>\r\n                                    <span>105</span>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Monthly Retirement Income Needed\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">$</span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.desiredMonthlyIncome}\r\n                                        onChange={(e) => handleInputChange('desiredMonthlyIncome', e.target.value)}\r\n                                        className=\"w-full pl-7 px-3 py-2 border border-gray-300 rounded-md\"\r\n                                    />\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Today's dollars (will be adjusted for inflation)\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Current Monthly Savings Rate\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">$</span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.monthlySavingsRate}\r\n                                        onChange={(e) => handleInputChange('monthlySavingsRate', e.target.value)}\r\n                                        className=\"w-full pl-7 px-3 py-2 border border-gray-300 rounded-md\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Expected CPF LIFE Monthly Payout\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">$</span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.cpfLifePayout}\r\n                                        onChange={(e) => handleInputChange('cpfLifePayout', e.target.value)}\r\n                                        className=\"w-full pl-7 px-3 py-2 border border-gray-300 rounded-md\"\r\n                                    />\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Estimated monthly payout from CPF LIFE\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Additional Monthly Income Source\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">$</span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.additionalIncomeSource}\r\n                                        onChange={(e) => handleInputChange('additionalIncomeSource', e.target.value)}\r\n                                        className=\"w-full pl-7 px-3 py-2 border border-gray-300 rounded-md\"\r\n                                    />\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Rental income, part-time work, etc.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* Advanced Settings */}\r\n                    <div>\r\n                        <h3 className=\"font-medium text-blue-700 border-b pb-2 mb-4\">Advanced Settings</h3>\r\n                        \r\n                        <div className=\"space-y-4\">\r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Inflation Rate (%)\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.inflationRate}\r\n                                        onChange={(e) => handleInputChange('inflationRate', e.target.value)}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                        step=\"0.1\"\r\n                                    />\r\n                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">%</span>\r\n                                    </div>\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Long-term inflation rate (2-3% is typical)\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Pre-Retirement Investment Return (%)\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.investmentReturnPreRetirement}\r\n                                        onChange={(e) => handleInputChange('investmentReturnPreRetirement', e.target.value)}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                        step=\"0.1\"\r\n                                    />\r\n                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">%</span>\r\n                                    </div>\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Expected annual return before retirement\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label className=\"block text-gray-700 text-sm font-medium mb-1\">\r\n                                    Post-Retirement Investment Return (%)\r\n                                </label>\r\n                                <div className=\"relative\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={retirementPlan.investmentReturnPostRetirement}\r\n                                        onChange={(e) => handleInputChange('investmentReturnPostRetirement', e.target.value)}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                        step=\"0.1\"\r\n                                    />\r\n                                    <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n                                        <span className=\"text-gray-500\">%</span>\r\n                                    </div>\r\n                                </div>\r\n                                <p className=\"text-xs text-gray-500 mt-1\">\r\n                                    Expected annual return during retirement (typically more conservative)\r\n                                </p>\r\n                            </div>\r\n                            \r\n                            <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n                                <h4 className=\"font-medium text-blue-800 mb-2\">Retirement Calculator Metrics</h4>\r\n                                \r\n                                <div className=\"space-y-2\">\r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Years to Retirement:</div>\r\n                                        <div className=\"text-sm text-gray-700 font-medium\">\r\n                                            {retirementPlan.retirementAge - retirementPlan.currentAge} years\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Retirement Duration:</div>\r\n                                        <div className=\"text-sm text-gray-700 font-medium\">\r\n                                            {retirementPlan.lifeExpectancy - retirementPlan.retirementAge} years\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Savings at Retirement:</div>\r\n                                        <div className=\"text-sm text-gray-700 font-medium\">\r\n                                            {formatCurrency(retirementReadiness.projectedSavings)}\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Target Nest Egg Needed:</div>\r\n                                        <div className={`text-sm font-medium ${\r\n                                            retirementReadiness.shortfall > 0 ? 'text-red-600' : 'text-green-600'\r\n                                        }`}>\r\n                                            {formatCurrency(retirementReadiness.projectedSavings + retirementReadiness.shortfall)}\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Projected Shortfall:</div>\r\n                                        <div className={`text-sm font-medium ${\r\n                                            retirementReadiness.shortfall > 0 ? 'text-red-600' : 'text-green-600'\r\n                                        }`}>\r\n                                            {retirementReadiness.shortfall > 0 \r\n                                                ? formatCurrency(retirementReadiness.shortfall)\r\n                                                : \"No Shortfall\"\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"grid grid-cols-2 gap-2\">\r\n                                        <div className=\"text-sm text-gray-700\">Monthly Income in Retirement:</div>\r\n                                        <div className=\"text-sm text-gray-700 font-medium\">\r\n                                            {formatCurrency(projectionData.find(data => data.age === retirementPlan.retirementAge)?.monthlyIncome || 0)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            {/* Projection Chart */}\r\n            <div className=\"bg-white rounded-lg shadow-md p-4\">\r\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">\r\n                    Retirement Savings Projection\r\n                </h2>\r\n                \r\n                <div className=\"h-96 mb-4\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <AreaChart\r\n                            data={chartData}\r\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"year\" />\r\n                            <YAxis tickFormatter={(value) => formatCurrency(value)} />\r\n                            <Tooltip formatter={(value) => formatCurrency(value)} />\r\n                            <Legend />\r\n                            <ReferenceLine\r\n                                x={retirementReadiness.retirementYear}\r\n                                stroke=\"red\"\r\n                                label={{ value: \"Retirement\", position: \"top\", fill: \"red\" }}\r\n                            />\r\n                            <Area\r\n                                type=\"monotone\"\r\n                                dataKey=\"savingsBalance\"\r\n                                name=\"Savings\"\r\n                                stroke=\"#8884d8\"\r\n                                fill=\"#8884d8\"\r\n                                fillOpacity={0.3}\r\n                            />\r\n                            <Area\r\n                                type=\"monotone\"\r\n                                dataKey=\"cpfBalance\"\r\n                                name=\"CPF Balance\"\r\n                                stroke=\"#82ca9d\"\r\n                                fill=\"#82ca9d\"\r\n                                fillOpacity={0.3}\r\n                            />\r\n                            <Area\r\n                                type=\"monotone\"\r\n                                dataKey=\"targetNeeded\"\r\n                                name=\"Target Needed\"\r\n                                stroke=\"#ff7300\"\r\n                                fill=\"#ff7300\"\r\n                                fillOpacity={0.1}\r\n                            />\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n                \r\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">\r\n                    Retirement Savings Ratio\r\n                </h3>\r\n                \r\n                <div className=\"h-64 mb-4\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <LineChart\r\n                            data={chartData}\r\n                            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"year\" />\r\n                            <YAxis \r\n                                tickFormatter={(value) => `${(value * 100).toFixed(0)}%`} \r\n                                domain={[0, Math.max(1.5, Math.ceil(Math.max(...chartData.map(d => d.savingsRatio)) * 10) / 10)]}\r\n                            />\r\n                            <Tooltip formatter={(value) => `${(value * 100).toFixed(0)}%`} />\r\n                            <Legend />\r\n                            <ReferenceLine\r\n                                x={retirementReadiness.retirementYear}\r\n                                stroke=\"red\"\r\n                                label={{ value: \"Retirement\", position: \"top\", fill: \"red\" }}\r\n                            />\r\n                            <ReferenceLine y={1} stroke=\"green\" strokeDasharray=\"3 3\" label={{ value: \"100% Funded\", position: \"right\" }} />\r\n                            <Line\r\n                                type=\"monotone\"\r\n                                dataKey=\"savingsRatio\"\r\n                                name=\"Funding Ratio\"\r\n                                stroke=\"#ff7300\"\r\n                                activeDot={{ r: 8 }}\r\n                            />\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n                \r\n                {/* Retirement Tips Section */}\r\n                <div className=\"p-4 bg-gray-50 rounded-lg border border-gray-200 mt-6\">\r\n                    <h3 className=\"font-medium text-gray-800 mb-3\">Retirement Planning Tips</h3>\r\n                    \r\n                    <ul className=\"space-y-2 text-sm text-gray-700\">\r\n                        <li className=\"flex items-start\">\r\n                            <svg className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                            <span>Aim to save at least 20% of your income for retirement.</span>\r\n                        </li>\r\n                        <li className=\"flex items-start\">\r\n                            <svg className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                            <span>Consider diversifying your investments to balance growth and risk.</span>\r\n                        </li>\r\n                        <li className=\"flex items-start\">\r\n                            <svg className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                            <span>As you approach retirement, shift to more conservative investments to protect your savings.</span>\r\n                        </li>\r\n                        <li className=\"flex items-start\">\r\n                            <svg className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                            <span>Consider maximizing your CPF contributions to take advantage of the guaranteed interest rates.</span>\r\n                        </li>\r\n                        <li className=\"flex items-start\">\r\n                            <svg className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                            <span>Review your retirement plan annually and adjust as your life circumstances change.</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RetirementPlanner;\r\n"],"names":["LineChart","generateCategoricalChart","chartName","GraphicalChild","Line","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","RetirementPlanner","_projectionData$find","financialData","calculateAge","useContext","FinancialContext","retirementPlan","setRetirementPlan","useState","retirementAge","lifeExpectancy","desiredMonthlyIncome","inflationRate","investmentReturnPreRetirement","investmentReturnPostRetirement","cpfLifePayout","additionalIncomeSource","currentSavings","personalInfo","currentAge","currentCpfBalance","monthlySavingsRate","income","currentSalary","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","handleInputChange","name","parseFloat","projectionData","calculateRetirementProjection","yearsToRetirement","yearsInRetirement","inflationFactor","Math","pow","projectedCpfPayout","projectedAdditionalIncome","annualWithdrawalNeeded","withdrawalRate","retirementNestEggNeeded","max","projection","savingsBalance","cpfBalance","annualSavings","annualReturnRate","year","currentYear","Date","getFullYear","age","isRetired","yearsSinceRetirement","withdrawalThisYear","totalNetWorth","savingsRatio","push","round","targetNeeded","annualIncome","monthlyIncome","retirementReadiness","retirementYear","findIndex","status","message","shortfall","retirementData","projectedSavings","determineRetirementReadiness","additionalMonthlySavingsNeeded","monthlyReturnRate","months","additionalSavingsNeeded","calculateMonthlySavingsNeeded","chartData","filter","_","index","length","_jsxs","className","children","_jsx","getStatusColor","type","min","step","onChange","e","target","find","data","ResponsiveContainer","width","height","AreaChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","dataKey","tickFormatter","Tooltip","formatter","Legend","ReferenceLine","x","stroke","label","position","fill","Area","fillOpacity","toFixed","domain","ceil","map","d","y","activeDot","r","viewBox","strokeLinecap","strokeLinejoin","strokeWidth"],"sourceRoot":""}